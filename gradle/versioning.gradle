import java.text.DateFormat;
import java.text.SimpleDateFormat;
import org.ajoberstar.grgit.*

buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'org.ajoberstar:gradle-git:0.8.0' }
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
def config = new ConfigSlurper(env).parse(file("$rootDir/gradle/config/buildConfig.groovy").toURL())
Calendar calendar = Calendar.getInstance();
DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss")
def buildId = dateFormat.format(calendar.getTime())

def grgit = Grgit.open(project.file('.'))
def jobName = System.getenv("JOB_NAME")
def branch = grgit.branch.current.name
if ("HEAD".equals(branch)) {
    if (System.getenv("GIT_BRANCH") != null) {
        branch = System.getenv("GIT_BRANCH")
        if (branch.contains("/")) {
            branch = branch.split("/")[1];
        }
    }
}

String versionNum
if(jobName != null) {
    def f = new File("$rootDir/metadata.xml")
    def metadata = config.metadata
    if (!f.exists()) {
        new URL(metadata).withInputStream { i ->
            f.withOutputStream {
                it << i
            }
        }
    }
    def mergeRequests = (new XmlParser()).parse("$rootDir/metadata.xml")
    versionNum = "1"
    String tmpVersion = mergeRequests.versioning.versions.version.last().text().tokenize('.').last().tokenize('-').last()
    if (tmpVersion.length() < 5) {
        versionNum = tmpVersion.toInteger() + 1
    }
    f.delete()
}

version = new ProjectVersion(0, 2, jobName != null ? versionNum : "DEV", branch)

class ProjectVersion {
    Integer major
    Integer minor
    String build
    String branch

    ProjectVersion(Integer major, Integer minor, String build, String branch) {
        this.major = major
        this.minor = minor
        this.build = build
        this.branch = branch
    }

    @Override
    String toString() {
        String fullVersion = "$major.$minor"
        if(build) {
            fullVersion += ".$build"
        }
        if (branch != null && !branch.contains("master")) {
            fullVersion += ".$branch"
        }
        fullVersion
    }
}