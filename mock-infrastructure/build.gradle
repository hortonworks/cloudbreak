import org.ajoberstar.grgit.Grgit

buildscript {
  repositories {
    maven { url = "$repoUrl" }
    maven { url = "$springRepoUrl" }
    mavenCentral()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

plugins {
    id "maven-publish"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'

bootRun {
  systemProperty "spring.profiles.active", System.properties["spring.profiles.active"]
  systemProperty "spring.config.location", System.properties["spring.config.location"]
  if (project.hasProperty("jvmArgs")) {
    jvmArgs += project.jvmArgs.split("\\s+").toList()
  }
}

bootRun {
  jvmArgs += ['--add-opens','java.base/java.util=ALL-UNNAMED']
  mainClass = 'com.sequenceiq.mock.MockInfrastructureApplication'
}

bootJar {
  archiveBaseName = 'mock-infrastructure'
  archiveFileName = 'mock-infrastructure.jar'
  manifest {
    def grgit = Grgit.open(currentDir: project.projectDir)
    attributes "Implementation-Version": grgit.describe()
  }
}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
    repositories {
        maven {
            url = "$System.env.NEXUS_URL"
            allowInsecureProtocol = true
            credentials {
                username = "$System.env.NEXUS_USER"
                password = "$System.env.NEXUS_PASSWORD"
            }
        }
    }
}

dependencies {
  implementation group:  'org.springframework.boot',     name: 'spring-boot-starter',            version: springBootVersion
  implementation group:  'org.springframework.boot',     name: 'spring-boot-starter-security',   version: springBootVersion
  implementation group:  'org.springframework.boot',     name: 'spring-boot-starter-jersey',     version: springBootVersion
  implementation group:  'org.springframework.boot',     name: 'spring-boot-starter-web',        version: springBootVersion
  implementation group:  'org.springframework.boot',     name: 'spring-boot-starter-actuator',   version: springBootVersion
  implementation group:  'org.springframework',          name: 'spring-aspects',                 version: springFrameworkVersion
  implementation group:  'org.springframework',          name: 'spring-context-support',         version: springFrameworkVersion
  implementation group:  'org.springframework.security', name: 'spring-security-jwt',            version: '1.1.1.RELEASE'
  implementation group:  'com.fasterxml.jackson.core',   name: 'jackson-core',                   version: jacksonVersion
  implementation group:  'com.google.protobuf',          name: 'protobuf-java-util',             version: protobufVersion
  implementation group:  'io.jsonwebtoken',              name: 'jjwt',                           version: '0.9.1'
  implementation group:  'com.google.code.gson',         name: 'gson',                           version: gsonVersion
  testImplementation group: 'org.mockito',               name: 'mockito-core',                   version: mockitoVersion
  testImplementation group: 'org.springframework.boot',  name: 'spring-boot-starter-test',       version: springBootVersion
  testImplementation group: 'org.assertj',        name: 'assertj-core',                   version: assertjVersion

  implementation project (':cloud-api')
  implementation project (':common')
  implementation (project(':orchestrator-api')) {
    transitive = false;
  }
  implementation (project(':orchestrator-salt')) {
    transitive = false;
  }
  implementation (project(':freeipa-client')) {
    transitive = false;
  }
}

dependencies {
    testImplementation group: 'org.junit.jupiter',name: 'junit-jupiter-migrationsupport', version: junitJupiterVersion
}

checkstyle {
  checkstyleMain.exclude '**/generated/**'
}

sourceSets {
  main {
    java {
      srcDirs 'src/generated'
    }
  }
}
