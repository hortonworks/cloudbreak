/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.sequenceiq.mock.swagger.v31.api;

import com.sequenceiq.mock.swagger.model.ApiSnapshotCommandList;
import com.sequenceiq.mock.swagger.model.ApiSnapshotPolicy;
import com.sequenceiq.mock.swagger.model.ApiSnapshotPolicyList;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-10-26T08:01:08.932+01:00")

@Api(value = "SnapshotsResource", description = "the SnapshotsResource API")
@RequestMapping(value = "/api/v31")
public interface SnapshotsResourceApi {

    Logger log = LoggerFactory.getLogger(SnapshotsResourceApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Creates one or more snapshot policies.", nickname = "createPolicies", notes = "Creates one or more snapshot policies.", response = ApiSnapshotPolicyList.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "SnapshotsResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = ApiSnapshotPolicyList.class) })
    @RequestMapping(value = "/clusters/{clusterName}/services/{serviceName}/snapshots/policies",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiSnapshotPolicyList> createPolicies(@ApiParam(value = "",required=true) @PathVariable("clusterName") String clusterName,@ApiParam(value = "",required=true) @PathVariable("serviceName") String serviceName,@ApiParam(value = "List of the snapshot policies to create."  )  @Valid @RequestBody ApiSnapshotPolicyList body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"items\" : [ {    \"name\" : \"...\",    \"description\" : \"...\",    \"hourlySnapshots\" : 12345,    \"dailySnapshots\" : 12345,    \"weeklySnapshots\" : 12345,    \"monthlySnapshots\" : 12345,    \"yearlySnapshots\" : 12345,    \"minuteOfHour\" : 12345,    \"hoursForHourlySnapshots\" : [ 12345, 12345 ],    \"hourOfDay\" : 12345,    \"dayOfWeek\" : 12345,    \"dayOfMonth\" : 12345,    \"monthOfYear\" : 12345,    \"alertOnStart\" : true,    \"alertOnSuccess\" : true,    \"alertOnFail\" : true,    \"alertOnAbort\" : true,    \"hbaseArguments\" : {      \"tableRegExps\" : [ \"...\", \"...\" ],      \"storage\" : \"REMOTE_S3\"    },    \"hdfsArguments\" : {      \"pathPatterns\" : [ \"...\", \"...\" ]    },    \"lastCommand\" : {      \"hbaseResult\" : { },      \"hdfsResult\" : { },      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"lastSuccessfulCommand\" : {      \"hbaseResult\" : { },      \"hdfsResult\" : { },      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"paused\" : true  }, {    \"name\" : \"...\",    \"description\" : \"...\",    \"hourlySnapshots\" : 12345,    \"dailySnapshots\" : 12345,    \"weeklySnapshots\" : 12345,    \"monthlySnapshots\" : 12345,    \"yearlySnapshots\" : 12345,    \"minuteOfHour\" : 12345,    \"hoursForHourlySnapshots\" : [ 12345, 12345 ],    \"hourOfDay\" : 12345,    \"dayOfWeek\" : 12345,    \"dayOfMonth\" : 12345,    \"monthOfYear\" : 12345,    \"alertOnStart\" : true,    \"alertOnSuccess\" : true,    \"alertOnFail\" : true,    \"alertOnAbort\" : true,    \"hbaseArguments\" : {      \"tableRegExps\" : [ \"...\", \"...\" ],      \"storage\" : \"LOCAL\"    },    \"hdfsArguments\" : {      \"pathPatterns\" : [ \"...\", \"...\" ]    },    \"lastCommand\" : {      \"hbaseResult\" : { },      \"hdfsResult\" : { },      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"lastSuccessfulCommand\" : {      \"hbaseResult\" : { },      \"hdfsResult\" : { },      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"paused\" : true  } ]}", ApiSnapshotPolicyList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SnapshotsResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Deletes an existing snapshot policy.", nickname = "deletePolicy", notes = "Deletes an existing snapshot policy.", response = ApiSnapshotPolicy.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "SnapshotsResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success", response = ApiSnapshotPolicy.class) })
    @RequestMapping(value = "/clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ApiSnapshotPolicy> deletePolicy(@ApiParam(value = "",required=true) @PathVariable("clusterName") String clusterName,@ApiParam(value = "Name of an existing snapshot policy.",required=true) @PathVariable("policyName") String policyName,@ApiParam(value = "",required=true) @PathVariable("serviceName") String serviceName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"name\" : \"...\",  \"description\" : \"...\",  \"hourlySnapshots\" : 12345,  \"dailySnapshots\" : 12345,  \"weeklySnapshots\" : 12345,  \"monthlySnapshots\" : 12345,  \"yearlySnapshots\" : 12345,  \"minuteOfHour\" : 12345,  \"hoursForHourlySnapshots\" : [ 12345, 12345 ],  \"hourOfDay\" : 12345,  \"dayOfWeek\" : 12345,  \"dayOfMonth\" : 12345,  \"monthOfYear\" : 12345,  \"alertOnStart\" : true,  \"alertOnSuccess\" : true,  \"alertOnFail\" : true,  \"alertOnAbort\" : true,  \"hbaseArguments\" : {    \"tableRegExps\" : [ \"...\", \"...\" ],    \"storage\" : \"REMOTE_S3\"  },  \"hdfsArguments\" : {    \"pathPatterns\" : [ \"...\", \"...\" ]  },  \"lastCommand\" : {    \"hbaseResult\" : {      \"processedTableCount\" : 12345,      \"processedTables\" : [ \"...\", \"...\" ],      \"unprocessedTableCount\" : 12345,      \"unprocessedTables\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"hdfsResult\" : {      \"processedPathCount\" : 12345,      \"processedPaths\" : [ \"...\", \"...\" ],      \"unprocessedPathCount\" : 12345,      \"unprocessedPaths\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"lastSuccessfulCommand\" : {    \"hbaseResult\" : {      \"processedTableCount\" : 12345,      \"processedTables\" : [ \"...\", \"...\" ],      \"unprocessedTableCount\" : 12345,      \"unprocessedTables\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"hdfsResult\" : {      \"processedPathCount\" : 12345,      \"processedPaths\" : [ \"...\", \"...\" ],      \"unprocessedPathCount\" : 12345,      \"unprocessedPaths\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"paused\" : true}", ApiSnapshotPolicy.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SnapshotsResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Returns a list of commands triggered by a snapshot policy.", nickname = "readHistory", notes = "Returns a list of commands triggered by a snapshot policy.", response = ApiSnapshotCommandList.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "SnapshotsResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ApiSnapshotCommandList.class) })
    @RequestMapping(value = "/clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}/history",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiSnapshotCommandList> readHistory(@ApiParam(value = "",required=true) @PathVariable("clusterName") String clusterName,@ApiParam(value = "Name of an existing snapshot policy.",required=true) @PathVariable("policyName") String policyName,@ApiParam(value = "",required=true) @PathVariable("serviceName") String serviceName,@ApiParam(value = "Maximum number of commands to retrieve.", defaultValue = "20") @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Index of first command to retrieve.", defaultValue = "0") @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset,@ApiParam(value = "The view to materialize.", allowableValues = "EXPORT, EXPORT_REDACTED, FULL, FULL_WITH_HEALTH_CHECK_EXPLANATION, SUMMARY", defaultValue = "summary") @Valid @RequestParam(value = "view", required = false, defaultValue="summary") String view) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"items\" : [ {    \"hbaseResult\" : {      \"processedTableCount\" : 12345,      \"processedTables\" : [ \"...\", \"...\" ],      \"unprocessedTableCount\" : 12345,      \"unprocessedTables\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"hdfsResult\" : {      \"processedPathCount\" : 12345,      \"processedPaths\" : [ \"...\", \"...\" ],      \"unprocessedPathCount\" : 12345,      \"unprocessedPaths\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  }, {    \"hbaseResult\" : {      \"processedTableCount\" : 12345,      \"processedTables\" : [ \"...\", \"...\" ],      \"unprocessedTableCount\" : 12345,      \"unprocessedTables\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"hdfsResult\" : {      \"processedPathCount\" : 12345,      \"processedPaths\" : [ \"...\", \"...\" ],      \"unprocessedPathCount\" : 12345,      \"unprocessedPaths\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  } ]}", ApiSnapshotCommandList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SnapshotsResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Returns information for all snapshot policies.", nickname = "readPolicies", notes = "Returns information for all snapshot policies.", response = ApiSnapshotPolicyList.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "SnapshotsResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ApiSnapshotPolicyList.class) })
    @RequestMapping(value = "/clusters/{clusterName}/services/{serviceName}/snapshots/policies",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiSnapshotPolicyList> readPolicies(@ApiParam(value = "",required=true) @PathVariable("clusterName") String clusterName,@ApiParam(value = "",required=true) @PathVariable("serviceName") String serviceName,@ApiParam(value = "The view to materialize.", allowableValues = "EXPORT, EXPORT_REDACTED, FULL, FULL_WITH_HEALTH_CHECK_EXPLANATION, SUMMARY", defaultValue = "summary") @Valid @RequestParam(value = "view", required = false, defaultValue="summary") String view) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"items\" : [ {    \"name\" : \"...\",    \"description\" : \"...\",    \"hourlySnapshots\" : 12345,    \"dailySnapshots\" : 12345,    \"weeklySnapshots\" : 12345,    \"monthlySnapshots\" : 12345,    \"yearlySnapshots\" : 12345,    \"minuteOfHour\" : 12345,    \"hoursForHourlySnapshots\" : [ 12345, 12345 ],    \"hourOfDay\" : 12345,    \"dayOfWeek\" : 12345,    \"dayOfMonth\" : 12345,    \"monthOfYear\" : 12345,    \"alertOnStart\" : true,    \"alertOnSuccess\" : true,    \"alertOnFail\" : true,    \"alertOnAbort\" : true,    \"hbaseArguments\" : {      \"tableRegExps\" : [ \"...\", \"...\" ],      \"storage\" : \"LOCAL\"    },    \"hdfsArguments\" : {      \"pathPatterns\" : [ \"...\", \"...\" ]    },    \"lastCommand\" : {      \"hbaseResult\" : { },      \"hdfsResult\" : { },      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"lastSuccessfulCommand\" : {      \"hbaseResult\" : { },      \"hdfsResult\" : { },      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"paused\" : true  }, {    \"name\" : \"...\",    \"description\" : \"...\",    \"hourlySnapshots\" : 12345,    \"dailySnapshots\" : 12345,    \"weeklySnapshots\" : 12345,    \"monthlySnapshots\" : 12345,    \"yearlySnapshots\" : 12345,    \"minuteOfHour\" : 12345,    \"hoursForHourlySnapshots\" : [ 12345, 12345 ],    \"hourOfDay\" : 12345,    \"dayOfWeek\" : 12345,    \"dayOfMonth\" : 12345,    \"monthOfYear\" : 12345,    \"alertOnStart\" : true,    \"alertOnSuccess\" : true,    \"alertOnFail\" : true,    \"alertOnAbort\" : true,    \"hbaseArguments\" : {      \"tableRegExps\" : [ \"...\", \"...\" ],      \"storage\" : \"LOCAL\"    },    \"hdfsArguments\" : {      \"pathPatterns\" : [ \"...\", \"...\" ]    },    \"lastCommand\" : {      \"hbaseResult\" : { },      \"hdfsResult\" : { },      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"lastSuccessfulCommand\" : {      \"hbaseResult\" : { },      \"hdfsResult\" : { },      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"paused\" : true  } ]}", ApiSnapshotPolicyList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SnapshotsResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Returns information for a specific snapshot policy.", nickname = "readPolicy", notes = "Returns information for a specific snapshot policy.", response = ApiSnapshotPolicy.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "SnapshotsResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ApiSnapshotPolicy.class) })
    @RequestMapping(value = "/clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiSnapshotPolicy> readPolicy(@ApiParam(value = "",required=true) @PathVariable("clusterName") String clusterName,@ApiParam(value = "Name of an existing snapshot policy.",required=true) @PathVariable("policyName") String policyName,@ApiParam(value = "",required=true) @PathVariable("serviceName") String serviceName,@ApiParam(value = "The view to materialize.", allowableValues = "EXPORT, EXPORT_REDACTED, FULL, FULL_WITH_HEALTH_CHECK_EXPLANATION, SUMMARY", defaultValue = "summary") @Valid @RequestParam(value = "view", required = false, defaultValue="summary") String view) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"name\" : \"...\",  \"description\" : \"...\",  \"hourlySnapshots\" : 12345,  \"dailySnapshots\" : 12345,  \"weeklySnapshots\" : 12345,  \"monthlySnapshots\" : 12345,  \"yearlySnapshots\" : 12345,  \"minuteOfHour\" : 12345,  \"hoursForHourlySnapshots\" : [ 12345, 12345 ],  \"hourOfDay\" : 12345,  \"dayOfWeek\" : 12345,  \"dayOfMonth\" : 12345,  \"monthOfYear\" : 12345,  \"alertOnStart\" : true,  \"alertOnSuccess\" : true,  \"alertOnFail\" : true,  \"alertOnAbort\" : true,  \"hbaseArguments\" : {    \"tableRegExps\" : [ \"...\", \"...\" ],    \"storage\" : \"REMOTE_S3\"  },  \"hdfsArguments\" : {    \"pathPatterns\" : [ \"...\", \"...\" ]  },  \"lastCommand\" : {    \"hbaseResult\" : {      \"processedTableCount\" : 12345,      \"processedTables\" : [ \"...\", \"...\" ],      \"unprocessedTableCount\" : 12345,      \"unprocessedTables\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"hdfsResult\" : {      \"processedPathCount\" : 12345,      \"processedPaths\" : [ \"...\", \"...\" ],      \"unprocessedPathCount\" : 12345,      \"unprocessedPaths\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"lastSuccessfulCommand\" : {    \"hbaseResult\" : {      \"processedTableCount\" : 12345,      \"processedTables\" : [ \"...\", \"...\" ],      \"unprocessedTableCount\" : 12345,      \"unprocessedTables\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"hdfsResult\" : {      \"processedPathCount\" : 12345,      \"processedPaths\" : [ \"...\", \"...\" ],      \"unprocessedPathCount\" : 12345,      \"unprocessedPaths\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"paused\" : true}", ApiSnapshotPolicy.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SnapshotsResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Updates an existing snapshot policy.", nickname = "updatePolicy", notes = "Updates an existing snapshot policy.", response = ApiSnapshotPolicy.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "SnapshotsResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success", response = ApiSnapshotPolicy.class) })
    @RequestMapping(value = "/clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ApiSnapshotPolicy> updatePolicy(@ApiParam(value = "",required=true) @PathVariable("clusterName") String clusterName,@ApiParam(value = "Name of an existing snapshot policy.",required=true) @PathVariable("policyName") String policyName,@ApiParam(value = "",required=true) @PathVariable("serviceName") String serviceName,@ApiParam(value = "Modified policy."  )  @Valid @RequestBody ApiSnapshotPolicy body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"name\" : \"...\",  \"description\" : \"...\",  \"hourlySnapshots\" : 12345,  \"dailySnapshots\" : 12345,  \"weeklySnapshots\" : 12345,  \"monthlySnapshots\" : 12345,  \"yearlySnapshots\" : 12345,  \"minuteOfHour\" : 12345,  \"hoursForHourlySnapshots\" : [ 12345, 12345 ],  \"hourOfDay\" : 12345,  \"dayOfWeek\" : 12345,  \"dayOfMonth\" : 12345,  \"monthOfYear\" : 12345,  \"alertOnStart\" : true,  \"alertOnSuccess\" : true,  \"alertOnFail\" : true,  \"alertOnAbort\" : true,  \"hbaseArguments\" : {    \"tableRegExps\" : [ \"...\", \"...\" ],    \"storage\" : \"REMOTE_S3\"  },  \"hdfsArguments\" : {    \"pathPatterns\" : [ \"...\", \"...\" ]  },  \"lastCommand\" : {    \"hbaseResult\" : {      \"processedTableCount\" : 12345,      \"processedTables\" : [ \"...\", \"...\" ],      \"unprocessedTableCount\" : 12345,      \"unprocessedTables\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"hdfsResult\" : {      \"processedPathCount\" : 12345,      \"processedPaths\" : [ \"...\", \"...\" ],      \"unprocessedPathCount\" : 12345,      \"unprocessedPaths\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"lastSuccessfulCommand\" : {    \"hbaseResult\" : {      \"processedTableCount\" : 12345,      \"processedTables\" : [ \"...\", \"...\" ],      \"unprocessedTableCount\" : 12345,      \"unprocessedTables\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"hdfsResult\" : {      \"processedPathCount\" : 12345,      \"processedPaths\" : [ \"...\", \"...\" ],      \"unprocessedPathCount\" : 12345,      \"unprocessedPaths\" : [ \"...\", \"...\" ],      \"createdSnapshotCount\" : 12345,      \"createdSnapshots\" : [ { }, { } ],      \"deletedSnapshotCount\" : 12345,      \"deletedSnapshots\" : [ { }, { } ],      \"creationErrorCount\" : 12345,      \"creationErrors\" : [ { }, { } ],      \"deletionErrorCount\" : 12345,      \"deletionErrors\" : [ { }, { } ]    },    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"paused\" : true}", ApiSnapshotPolicy.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SnapshotsResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
