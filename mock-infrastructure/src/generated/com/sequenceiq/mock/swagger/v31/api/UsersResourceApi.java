/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.sequenceiq.mock.swagger.v31.api;

import com.sequenceiq.mock.swagger.model.ApiUser2;
import com.sequenceiq.mock.swagger.model.ApiUser2List;
import com.sequenceiq.mock.swagger.model.ApiUserSessionList;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-10-26T08:01:08.932+01:00")

@Api(value = "UsersResource", description = "the UsersResource API")
@RequestMapping(value = "/api/v31")
public interface UsersResourceApi {

    Logger log = LoggerFactory.getLogger(UsersResourceApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Creates a list of users.", nickname = "createUsers2", notes = "Creates a list of users. <p> When creating new users, the <i>password</i> property of each user should be their plain text password. The returned user information will not contain any password information. <p/>", response = ApiUser2List.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "UsersResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = ApiUser2List.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiUser2List> createUsers2(@ApiParam(value = "List of users to create."  )  @Valid @RequestBody ApiUser2List body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"items\" : [ {    \"name\" : \"...\",    \"password\" : \"...\",    \"authRoles\" : [ {      \"displayName\" : \"...\",      \"name\" : \"...\",      \"uuid\" : \"...\"    }, {      \"displayName\" : \"...\",      \"name\" : \"...\",      \"uuid\" : \"...\"    } ],    \"pwHash\" : \"...\",    \"pwSalt\" : 12345,    \"pwLogin\" : true  }, {    \"name\" : \"...\",    \"password\" : \"...\",    \"authRoles\" : [ {      \"displayName\" : \"...\",      \"name\" : \"...\",      \"uuid\" : \"...\"    }, {      \"displayName\" : \"...\",      \"name\" : \"...\",      \"uuid\" : \"...\"    } ],    \"pwHash\" : \"...\",    \"pwSalt\" : 12345,    \"pwLogin\" : true  } ]}", ApiUser2List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Deletes a user from the system.", nickname = "deleteUser2", notes = "Deletes a user from the system. <p/>", response = ApiUser2.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "UsersResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success", response = ApiUser2.class) })
    @RequestMapping(value = "/users/{userName}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<ApiUser2> deleteUser2(@ApiParam(value = "The name of the user to delete.",required=true) @PathVariable("userName") String userName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"name\" : \"...\",  \"password\" : \"...\",  \"authRoles\" : [ {    \"displayName\" : \"...\",    \"name\" : \"...\",    \"uuid\" : \"...\"  }, {    \"displayName\" : \"...\",    \"name\" : \"...\",    \"uuid\" : \"...\"  } ],  \"pwHash\" : \"...\",  \"pwSalt\" : 12345,  \"pwLogin\" : true}", ApiUser2.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Expires the sessions associated with interactive authenticated user in Cloudera Manager.", nickname = "expireSessions", notes = "Expires the sessions associated with interactive authenticated user in Cloudera Manager. This can be used by Full Admin/User Admin users only. <p> Note that these sessions are only associated with a user who log into the web interface. Sessions of an API user will not be affected.", authorizations = {
        @Authorization(value = "basic")
    }, tags={ "UsersResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success") })
    @RequestMapping(value = "/users/expireSessions/{userName}",
        method = RequestMethod.POST)
    default ResponseEntity<Void> expireSessions(@ApiParam(value = "",required=true) @PathVariable("userName") String userName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Return a list of the sessions associated with interactive authenticated users in Cloudera Manager.", nickname = "getSessions", notes = "Return a list of the sessions associated with interactive authenticated users in Cloudera Manager. <p> Note that these sessions are only associated with users who log into the web interface. API users will not appear.", response = ApiUserSessionList.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "UsersResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ApiUserSessionList.class) })
    @RequestMapping(value = "/users/sessions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiUserSessionList> getSessions() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"items\" : [ {    \"name\" : \"...\",    \"remoteAddr\" : \"...\",    \"lastRequest\" : \"...\"  }, {    \"name\" : \"...\",    \"remoteAddr\" : \"...\",    \"lastRequest\" : \"...\"  } ]}", ApiUserSessionList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Returns detailed information about a user.", nickname = "readUser2", notes = "Returns detailed information about a user.", response = ApiUser2.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "UsersResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ApiUser2.class) })
    @RequestMapping(value = "/users/{userName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiUser2> readUser2(@ApiParam(value = "The user to read.",required=true) @PathVariable("userName") String userName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"name\" : \"...\",  \"password\" : \"...\",  \"authRoles\" : [ {    \"displayName\" : \"...\",    \"name\" : \"...\",    \"uuid\" : \"...\"  }, {    \"displayName\" : \"...\",    \"name\" : \"...\",    \"uuid\" : \"...\"  } ],  \"pwHash\" : \"...\",  \"pwSalt\" : 12345,  \"pwLogin\" : true}", ApiUser2.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Returns a list of the user names configured in the system.", nickname = "readUsers2", notes = "Returns a list of the user names configured in the system.", response = ApiUser2List.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "UsersResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ApiUser2List.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiUser2List> readUsers2(@ApiParam(value = "", allowableValues = "EXPORT, EXPORT_REDACTED, FULL, FULL_WITH_HEALTH_CHECK_EXPLANATION, SUMMARY", defaultValue = "summary") @Valid @RequestParam(value = "view", required = false, defaultValue="summary") String view) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"items\" : [ {    \"name\" : \"...\",    \"password\" : \"...\",    \"authRoles\" : [ {      \"displayName\" : \"...\",      \"name\" : \"...\",      \"uuid\" : \"...\"    }, {      \"displayName\" : \"...\",      \"name\" : \"...\",      \"uuid\" : \"...\"    } ],    \"pwHash\" : \"...\",    \"pwSalt\" : 12345,    \"pwLogin\" : true  }, {    \"name\" : \"...\",    \"password\" : \"...\",    \"authRoles\" : [ {      \"displayName\" : \"...\",      \"name\" : \"...\",      \"uuid\" : \"...\"    }, {      \"displayName\" : \"...\",      \"name\" : \"...\",      \"uuid\" : \"...\"    } ],    \"pwHash\" : \"...\",    \"pwSalt\" : 12345,    \"pwLogin\" : true  } ]}", ApiUser2List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Updates the given user's information.", nickname = "updateUser2", notes = "Updates the given user's information. Note that the user's name cannot be changed.", response = ApiUser2.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "UsersResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success", response = ApiUser2.class) })
    @RequestMapping(value = "/users/{userName}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ApiUser2> updateUser2(@ApiParam(value = "User name being updated.",required=true) @PathVariable("userName") String userName,@ApiParam(value = "The user information."  )  @Valid @RequestBody ApiUser2 body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"name\" : \"...\",  \"password\" : \"...\",  \"authRoles\" : [ {    \"displayName\" : \"...\",    \"name\" : \"...\",    \"uuid\" : \"...\"  }, {    \"displayName\" : \"...\",    \"name\" : \"...\",    \"uuid\" : \"...\"  } ],  \"pwHash\" : \"...\",  \"pwSalt\" : 12345,  \"pwLogin\" : true}", ApiUser2.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
