/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.sequenceiq.mock.swagger.v40.api;

import com.sequenceiq.mock.swagger.model.ApiEvent;
import com.sequenceiq.mock.swagger.model.ApiEventQueryResult;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-10-26T08:00:53.907+01:00")

@Api(value = "EventsResource", description = "the EventsResource API")
@RequestMapping(value = "/api/v40")
public interface EventsResourceApi {

    Logger log = LoggerFactory.getLogger(EventsResourceApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Returns a specific event in the system.", nickname = "readEvent", notes = "Returns a specific event in the system", response = ApiEvent.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "EventsResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ApiEvent.class) })
    @RequestMapping(value = "/events/{eventId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiEvent> readEvent(@ApiParam(value = "The UUID of the event to read",required=true) @PathVariable("eventId") String eventId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : \"...\",  \"content\" : \"...\",  \"timeOccurred\" : \"...\",  \"timeReceived\" : \"...\",  \"category\" : \"SYSTEM\",  \"severity\" : \"INFORMATIONAL\",  \"alert\" : true,  \"attributes\" : [ {    \"name\" : \"...\",    \"values\" : [ \"...\", \"...\" ]  }, {    \"name\" : \"...\",    \"values\" : [ \"...\", \"...\" ]  } ]}", ApiEvent.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EventsResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Allows you to query events in the system.", nickname = "readEvents", notes = "Allows you to query events in the system.", response = ApiEventQueryResult.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "EventsResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = ApiEventQueryResult.class) })
    @RequestMapping(value = "/events",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiEventQueryResult> readEvents(@ApiParam(value = "The maximum number of events to return.", defaultValue = "100") @Valid @RequestParam(value = "maxResults", required = false, defaultValue="100") Integer maxResults,@ApiParam(value = "The query to perform to find events in the system. It accepts querying the intersection of a list of constraints, joined together with semicolons (without spaces). For example: </p> <dl> <dt>alert==true</dt> <dd>looks for alerts.</dd> <dt>alert==true;attributes.host!=flaky.mysite.com</dt> <dd>looks for alerts, but exclude those with the host attribute of \"flaky.mysite.com\".</dd> <dt>category==log_event;attributes.log_level==ERROR</dt> <dd>looks for error log events. Event attribute matching is case sensitive.</dd> <dt>attributes.service==hbase1;content==hlog</dt> <dd>looks for any events from the \"hbase1\" service that mention \"hlog\".</dd> <dt>attributes.service==hbase1;content!=hlog</dt> <dd>looks for any events from the \"hbase1\" service that do not mention \"hlog\".<br/> A query must not contain only negative constraints (<em>!=</em>). It returns empty results because there is nothing to perform exclusion on.</dd> <dt>attributes.role_type==NAMENODE;severity==critical important</dt> <dd>looks for any important or critical events related to all NameNodes.</dd> <dt>severity==critical;timeReceived=ge=2012-05-04T00:00;timeReceived=lt=2012-05-04T00:10</dt> <dd>looks for critical events received between the given 10 minute range. <br/> When polling for events, use <em>timeReceived</em> instead of <em>timeOccurred</em> because events arrive out of order.</dd> </dl>  You may query any fields present in the ApiEvent object. You can also query by event attribute values using the <em>attributes.*</em> syntax. Values for date time fields (e.g. <em>timeOccurred</em>, <em>timeReceived</em>) should be ISO8601 timestamps. <p> The other valid comparators are <em>=lt=</em>, <em>=le=</em>, <em>=ge=</em>, and <em>=gt=</em>. They stand for \"&lt;\", \"&lt;=\", \"&gt;=\", \"&gt;\" respectively. These comparators are only applicable for date time fields.") @Valid @RequestParam(value = "query", required = false) String query,@ApiParam(value = "Specified the offset of events to return.", defaultValue = "0") @Valid @RequestParam(value = "resultOffset", required = false, defaultValue="0") Integer resultOffset) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"totalResults\" : 12345,  \"items\" : [ {    \"id\" : \"...\",    \"content\" : \"...\",    \"timeOccurred\" : \"...\",    \"timeReceived\" : \"...\",    \"category\" : \"HBASE\",    \"severity\" : \"INFORMATIONAL\",    \"alert\" : true,    \"attributes\" : [ {      \"name\" : \"...\",      \"values\" : [ \"...\", \"...\" ]    }, {      \"name\" : \"...\",      \"values\" : [ \"...\", \"...\" ]    } ]  }, {    \"id\" : \"...\",    \"content\" : \"...\",    \"timeOccurred\" : \"...\",    \"timeReceived\" : \"...\",    \"category\" : \"ACTIVITY_EVENT\",    \"severity\" : \"INFORMATIONAL\",    \"alert\" : true,    \"attributes\" : [ {      \"name\" : \"...\",      \"values\" : [ \"...\", \"...\" ]    }, {      \"name\" : \"...\",      \"values\" : [ \"...\", \"...\" ]    } ]  } ]}", ApiEventQueryResult.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EventsResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
