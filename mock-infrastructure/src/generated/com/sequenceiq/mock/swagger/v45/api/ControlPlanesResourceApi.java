/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.sequenceiq.mock.swagger.v45.api;

import com.sequenceiq.mock.swagger.model.ApiCluster;
import com.sequenceiq.mock.swagger.model.ApiCommand;
import com.sequenceiq.mock.swagger.model.ApiControlPlane;
import com.sequenceiq.mock.swagger.model.ApiControlPlaneList;
import com.sequenceiq.mock.swagger.model.ApiGenerateCopyDockerArgs;
import com.sequenceiq.mock.swagger.model.ApiGenerateExternalVaultSetupArgs;
import com.sequenceiq.mock.swagger.model.ApiInstallControlPlaneArgs;
import com.sequenceiq.mock.swagger.model.ApiInstallEmbeddedControlPlaneArgs;
import com.sequenceiq.mock.swagger.model.ApiRemoteRepoUrl;
import com.sequenceiq.mock.swagger.model.ApiUninstallControlPlaneArgs;
import com.sequenceiq.mock.swagger.model.ApiUpdateControlPlaneValuesYamlArgs;
import com.sequenceiq.mock.swagger.model.ApiUpgradeControlPlaneArgs;
import com.sequenceiq.mock.swagger.model.ApiUpgradeEmbeddedControlPlaneArgs;
import org.springframework.core.io.Resource;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-12-10T21:24:30.629+01:00")

@Api(value = "ControlPlanesResource", description = "the ControlPlanesResource API")
@RequestMapping(value = "/{mockUuid}/api/v45")
public interface ControlPlanesResourceApi {

    Logger log = LoggerFactory.getLogger(ControlPlanesResourceApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Launches the Generate Copy Docker Script Command.", nickname = "generateCopyDocker", notes = "Launches the Generate Copy Docker Script Command", response = ApiCommand.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The command that generates the script", response = ApiCommand.class) })
    @RequestMapping(value = "/controlPlanes/commands/generateCopyDocker",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiCommand> generateCopyDocker(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "Arguments for the Command"  )  @Valid @RequestBody ApiGenerateCopyDockerArgs body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 12345,  \"name\" : \"...\",  \"startTime\" : \"...\",  \"endTime\" : \"...\",  \"active\" : true,  \"success\" : true,  \"resultMessage\" : \"...\",  \"resultDataUrl\" : \"...\",  \"clusterRef\" : {    \"clusterName\" : \"...\",    \"displayName\" : \"...\"  },  \"serviceRef\" : {    \"peerName\" : \"...\",    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"serviceDisplayName\" : \"...\",    \"serviceType\" : \"...\"  },  \"roleRef\" : {    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"roleName\" : \"...\",    \"healthSummary\" : \"HISTORY_NOT_AVAILABLE\",    \"roleStatus\" : \"HISTORY_NOT_AVAILABLE\"  },  \"hostRef\" : {    \"hostId\" : \"...\",    \"hostname\" : \"...\"  },  \"parent\" : {    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\",      \"healthSummary\" : \"BAD\",      \"roleStatus\" : \"STOPPING\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : { },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"children\" : {    \"items\" : [ {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    }, {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    } ]  },  \"canRetry\" : true}", ApiCommand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Launches the Generate Vault Setup Command command.", nickname = "generateExternalVaultSetup", notes = "Launches the Generate Vault Setup Command command", response = ApiCommand.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The command that generates and downloads the script", response = ApiCommand.class) })
    @RequestMapping(value = "/controlPlanes/commands/generateExternalVaultSetup",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiCommand> generateExternalVaultSetup(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "Arguments for the Command"  )  @Valid @RequestBody ApiGenerateExternalVaultSetupArgs body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 12345,  \"name\" : \"...\",  \"startTime\" : \"...\",  \"endTime\" : \"...\",  \"active\" : true,  \"success\" : true,  \"resultMessage\" : \"...\",  \"resultDataUrl\" : \"...\",  \"clusterRef\" : {    \"clusterName\" : \"...\",    \"displayName\" : \"...\"  },  \"serviceRef\" : {    \"peerName\" : \"...\",    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"serviceDisplayName\" : \"...\",    \"serviceType\" : \"...\"  },  \"roleRef\" : {    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"roleName\" : \"...\",    \"healthSummary\" : \"NOT_AVAILABLE\",    \"roleStatus\" : \"NA\"  },  \"hostRef\" : {    \"hostId\" : \"...\",    \"hostname\" : \"...\"  },  \"parent\" : {    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\",      \"healthSummary\" : \"CONCERNING\",      \"roleStatus\" : \"UNKNOWN\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : { },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"children\" : {    \"items\" : [ {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    }, {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    } ]  },  \"canRetry\" : true}", ApiCommand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Current Control Planes.", nickname = "getControlPlanes", notes = "Current Control Planes", response = ApiControlPlaneList.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Detailed description of the current control planes.", response = ApiControlPlaneList.class) })
    @RequestMapping(value = "/controlPlanes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiControlPlaneList> getControlPlanes(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"items\" : [ {    \"namespace\" : \"...\",    \"dnsSuffix\" : \"...\",    \"uuid\" : \"...\",    \"remoteRepoUrl\" : \"...\",    \"version\" : \"...\",    \"manifest\" : \"...\",    \"valuesYaml\" : \"...\",    \"kubernetesType\" : \"...\"  }, {    \"namespace\" : \"...\",    \"dnsSuffix\" : \"...\",    \"uuid\" : \"...\",    \"remoteRepoUrl\" : \"...\",    \"version\" : \"...\",    \"manifest\" : \"...\",    \"valuesYaml\" : \"...\",    \"kubernetesType\" : \"...\"  } ]}", ApiControlPlaneList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "The Experience cluster this control plane is associated with, if any.", nickname = "getExperienceCluster", notes = "The Experience cluster this control plane is associated with, if any", response = ApiCluster.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The cluster attached to this control plane", response = ApiCluster.class) })
    @RequestMapping(value = "/controlPlanes/{controlPlaneUuid}/getExperienceCluster",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiCluster> getExperienceCluster(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "The universally unique id of the control plane",required=true) @PathVariable("controlPlaneUuid") String controlPlaneUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"name\" : \"...\",  \"displayName\" : \"...\",  \"fullVersion\" : \"...\",  \"maintenanceMode\" : true,  \"maintenanceOwners\" : [ \"HOST\", \"CLUSTER\" ],  \"services\" : [ {    \"name\" : \"...\",    \"type\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceState\" : \"STARTING\",    \"healthSummary\" : \"DISABLED\",    \"configStalenessStatus\" : \"STALE\",    \"clientConfigStalenessStatus\" : \"FRESH\",    \"healthChecks\" : [ {      \"name\" : \"...\",      \"summary\" : \"CONCERNING\",      \"explanation\" : \"...\",      \"suppressed\" : true    }, {      \"name\" : \"...\",      \"summary\" : \"DISABLED\",      \"explanation\" : \"...\",      \"suppressed\" : true    } ],    \"serviceUrl\" : \"...\",    \"roleInstancesUrl\" : \"...\",    \"maintenanceMode\" : true,    \"maintenanceOwners\" : [ \"ROLE\", \"HOST\" ],    \"config\" : {      \"roleTypeConfigs\" : [ { }, { } ],      \"items\" : [ { }, { } ]    },    \"roles\" : [ {      \"name\" : \"...\",      \"type\" : \"...\",      \"hostRef\" : { },      \"serviceRef\" : { },      \"roleState\" : \"STARTING\",      \"commissionState\" : \"DECOMMISSIONING\",      \"healthSummary\" : \"NOT_AVAILABLE\",      \"configStalenessStatus\" : \"STALE_REFRESHABLE\",      \"healthChecks\" : [ { }, { } ],      \"haStatus\" : \"ACTIVE\",      \"roleUrl\" : \"...\",      \"maintenanceMode\" : true,      \"maintenanceOwners\" : [ \"ROLE\", \"ROLE\" ],      \"config\" : { },      \"roleConfigGroupRef\" : { },      \"zooKeeperServerMode\" : \"STANDALONE\",      \"entityStatus\" : \"STARTING\",      \"tags\" : [ { }, { } ]    }, {      \"name\" : \"...\",      \"type\" : \"...\",      \"hostRef\" : { },      \"serviceRef\" : { },      \"roleState\" : \"UNKNOWN\",      \"commissionState\" : \"OFFLINED\",      \"healthSummary\" : \"CONCERNING\",      \"configStalenessStatus\" : \"FRESH\",      \"healthChecks\" : [ { }, { } ],      \"haStatus\" : \"ACTIVE\",      \"roleUrl\" : \"...\",      \"maintenanceMode\" : true,      \"maintenanceOwners\" : [ \"ROLE\", \"SERVICE\" ],      \"config\" : { },      \"roleConfigGroupRef\" : { },      \"zooKeeperServerMode\" : \"REPLICATED_LEADER_ELECTION\",      \"entityStatus\" : \"UNKNOWN\",      \"tags\" : [ { }, { } ]    } ],    \"displayName\" : \"...\",    \"roleConfigGroups\" : [ {      \"name\" : \"...\",      \"roleType\" : \"...\",      \"base\" : true,      \"config\" : { },      \"displayName\" : \"...\",      \"serviceRef\" : { }    }, {      \"name\" : \"...\",      \"roleType\" : \"...\",      \"base\" : true,      \"config\" : { },      \"displayName\" : \"...\",      \"serviceRef\" : { }    } ],    \"replicationSchedules\" : [ {      \"hdfsArguments\" : { },      \"hiveArguments\" : { },      \"hdfsCloudArguments\" : { },      \"history\" : [ { }, { } ],      \"active\" : true,      \"hiveCloudArguments\" : { },      \"hbaseArguments\" : { },      \"hive3Arguments\" : { },      \"id\" : 12345,      \"displayName\" : \"...\",      \"description\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"interval\" : 12345,      \"intervalUnit\" : \"DAY\",      \"nextRun\" : \"...\",      \"paused\" : true,      \"alertOnStart\" : true,      \"alertOnSuccess\" : true,      \"alertOnFail\" : true,      \"alertOnAbort\" : true    }, {      \"hdfsArguments\" : { },      \"hiveArguments\" : { },      \"hdfsCloudArguments\" : { },      \"history\" : [ { }, { } ],      \"active\" : true,      \"hiveCloudArguments\" : { },      \"hbaseArguments\" : { },      \"hive3Arguments\" : { },      \"id\" : 12345,      \"displayName\" : \"...\",      \"description\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"interval\" : 12345,      \"intervalUnit\" : \"HOUR\",      \"nextRun\" : \"...\",      \"paused\" : true,      \"alertOnStart\" : true,      \"alertOnSuccess\" : true,      \"alertOnFail\" : true,      \"alertOnAbort\" : true    } ],    \"snapshotPolicies\" : [ {      \"name\" : \"...\",      \"description\" : \"...\",      \"hourlySnapshots\" : 12345,      \"dailySnapshots\" : 12345,      \"weeklySnapshots\" : 12345,      \"monthlySnapshots\" : 12345,      \"yearlySnapshots\" : 12345,      \"minuteOfHour\" : 12345,      \"hoursForHourlySnapshots\" : [ 12345, 12345 ],      \"hourOfDay\" : 12345,      \"dayOfWeek\" : 12345,      \"dayOfMonth\" : 12345,      \"monthOfYear\" : 12345,      \"alertOnStart\" : true,      \"alertOnSuccess\" : true,      \"alertOnFail\" : true,      \"alertOnAbort\" : true,      \"hbaseArguments\" : { },      \"hdfsArguments\" : { },      \"lastCommand\" : { },      \"lastSuccessfulCommand\" : { },      \"paused\" : true    }, {      \"name\" : \"...\",      \"description\" : \"...\",      \"hourlySnapshots\" : 12345,      \"dailySnapshots\" : 12345,      \"weeklySnapshots\" : 12345,      \"monthlySnapshots\" : 12345,      \"yearlySnapshots\" : 12345,      \"minuteOfHour\" : 12345,      \"hoursForHourlySnapshots\" : [ 12345, 12345 ],      \"hourOfDay\" : 12345,      \"dayOfWeek\" : 12345,      \"dayOfMonth\" : 12345,      \"monthOfYear\" : 12345,      \"alertOnStart\" : true,      \"alertOnSuccess\" : true,      \"alertOnFail\" : true,      \"alertOnAbort\" : true,      \"hbaseArguments\" : { },      \"hdfsArguments\" : { },      \"lastCommand\" : { },      \"lastSuccessfulCommand\" : { },      \"paused\" : true    } ],    \"entityStatus\" : \"NONE\",    \"tags\" : [ {      \"name\" : \"...\",      \"value\" : \"...\"    }, {      \"name\" : \"...\",      \"value\" : \"...\"    } ],    \"serviceVersion\" : \"...\"  }, {    \"name\" : \"...\",    \"type\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceState\" : \"STARTING\",    \"healthSummary\" : \"GOOD\",    \"configStalenessStatus\" : \"FRESH\",    \"clientConfigStalenessStatus\" : \"STALE_REFRESHABLE\",    \"healthChecks\" : [ {      \"name\" : \"...\",      \"summary\" : \"GOOD\",      \"explanation\" : \"...\",      \"suppressed\" : true    }, {      \"name\" : \"...\",      \"summary\" : \"CONCERNING\",      \"explanation\" : \"...\",      \"suppressed\" : true    } ],    \"serviceUrl\" : \"...\",    \"roleInstancesUrl\" : \"...\",    \"maintenanceMode\" : true,    \"maintenanceOwners\" : [ \"CLUSTER\", \"CLUSTER\" ],    \"config\" : {      \"roleTypeConfigs\" : [ { }, { } ],      \"items\" : [ { }, { } ]    },    \"roles\" : [ {      \"name\" : \"...\",      \"type\" : \"...\",      \"hostRef\" : { },      \"serviceRef\" : { },      \"roleState\" : \"HISTORY_NOT_AVAILABLE\",      \"commissionState\" : \"DECOMMISSIONING\",      \"healthSummary\" : \"HISTORY_NOT_AVAILABLE\",      \"configStalenessStatus\" : \"STALE\",      \"healthChecks\" : [ { }, { } ],      \"haStatus\" : \"STANDBY\",      \"roleUrl\" : \"...\",      \"maintenanceMode\" : true,      \"maintenanceOwners\" : [ \"CLUSTER\", \"HOST\" ],      \"config\" : { },      \"roleConfigGroupRef\" : { },      \"zooKeeperServerMode\" : \"UNKNOWN\",      \"entityStatus\" : \"HISTORY_NOT_AVAILABLE\",      \"tags\" : [ { }, { } ]    }, {      \"name\" : \"...\",      \"type\" : \"...\",      \"hostRef\" : { },      \"serviceRef\" : { },      \"roleState\" : \"NA\",      \"commissionState\" : \"DECOMMISSIONING\",      \"healthSummary\" : \"GOOD\",      \"configStalenessStatus\" : \"STALE\",      \"healthChecks\" : [ { }, { } ],      \"haStatus\" : \"ACTIVE\",      \"roleUrl\" : \"...\",      \"maintenanceMode\" : true,      \"maintenanceOwners\" : [ \"ROLE\", \"CLUSTER\" ],      \"config\" : { },      \"roleConfigGroupRef\" : { },      \"zooKeeperServerMode\" : \"REPLICATED_FOLLOWER\",      \"entityStatus\" : \"NONE\",      \"tags\" : [ { }, { } ]    } ],    \"displayName\" : \"...\",    \"roleConfigGroups\" : [ {      \"name\" : \"...\",      \"roleType\" : \"...\",      \"base\" : true,      \"config\" : { },      \"displayName\" : \"...\",      \"serviceRef\" : { }    }, {      \"name\" : \"...\",      \"roleType\" : \"...\",      \"base\" : true,      \"config\" : { },      \"displayName\" : \"...\",      \"serviceRef\" : { }    } ],    \"replicationSchedules\" : [ {      \"hdfsArguments\" : { },      \"hiveArguments\" : { },      \"hdfsCloudArguments\" : { },      \"history\" : [ { }, { } ],      \"active\" : true,      \"hiveCloudArguments\" : { },      \"hbaseArguments\" : { },      \"hive3Arguments\" : { },      \"id\" : 12345,      \"displayName\" : \"...\",      \"description\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"interval\" : 12345,      \"intervalUnit\" : \"MINUTE\",      \"nextRun\" : \"...\",      \"paused\" : true,      \"alertOnStart\" : true,      \"alertOnSuccess\" : true,      \"alertOnFail\" : true,      \"alertOnAbort\" : true    }, {      \"hdfsArguments\" : { },      \"hiveArguments\" : { },      \"hdfsCloudArguments\" : { },      \"history\" : [ { }, { } ],      \"active\" : true,      \"hiveCloudArguments\" : { },      \"hbaseArguments\" : { },      \"hive3Arguments\" : { },      \"id\" : 12345,      \"displayName\" : \"...\",      \"description\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"interval\" : 12345,      \"intervalUnit\" : \"DAY\",      \"nextRun\" : \"...\",      \"paused\" : true,      \"alertOnStart\" : true,      \"alertOnSuccess\" : true,      \"alertOnFail\" : true,      \"alertOnAbort\" : true    } ],    \"snapshotPolicies\" : [ {      \"name\" : \"...\",      \"description\" : \"...\",      \"hourlySnapshots\" : 12345,      \"dailySnapshots\" : 12345,      \"weeklySnapshots\" : 12345,      \"monthlySnapshots\" : 12345,      \"yearlySnapshots\" : 12345,      \"minuteOfHour\" : 12345,      \"hoursForHourlySnapshots\" : [ 12345, 12345 ],      \"hourOfDay\" : 12345,      \"dayOfWeek\" : 12345,      \"dayOfMonth\" : 12345,      \"monthOfYear\" : 12345,      \"alertOnStart\" : true,      \"alertOnSuccess\" : true,      \"alertOnFail\" : true,      \"alertOnAbort\" : true,      \"hbaseArguments\" : { },      \"hdfsArguments\" : { },      \"lastCommand\" : { },      \"lastSuccessfulCommand\" : { },      \"paused\" : true    }, {      \"name\" : \"...\",      \"description\" : \"...\",      \"hourlySnapshots\" : 12345,      \"dailySnapshots\" : 12345,      \"weeklySnapshots\" : 12345,      \"monthlySnapshots\" : 12345,      \"yearlySnapshots\" : 12345,      \"minuteOfHour\" : 12345,      \"hoursForHourlySnapshots\" : [ 12345, 12345 ],      \"hourOfDay\" : 12345,      \"dayOfWeek\" : 12345,      \"dayOfMonth\" : 12345,      \"monthOfYear\" : 12345,      \"alertOnStart\" : true,      \"alertOnSuccess\" : true,      \"alertOnFail\" : true,      \"alertOnAbort\" : true,      \"hbaseArguments\" : { },      \"hdfsArguments\" : { },      \"lastCommand\" : { },      \"lastSuccessfulCommand\" : { },      \"paused\" : true    } ],    \"entityStatus\" : \"DOWN\",    \"tags\" : [ {      \"name\" : \"...\",      \"value\" : \"...\"    }, {      \"name\" : \"...\",      \"value\" : \"...\"    } ],    \"serviceVersion\" : \"...\"  } ],  \"parcels\" : [ {    \"product\" : \"...\",    \"version\" : \"...\",    \"stage\" : \"...\",    \"state\" : {      \"progress\" : 12345,      \"totalProgress\" : 12345,      \"count\" : 12345,      \"totalCount\" : 12345,      \"errors\" : [ \"...\", \"...\" ],      \"warnings\" : [ \"...\", \"...\" ]    },    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"displayName\" : \"...\",    \"description\" : \"...\"  }, {    \"product\" : \"...\",    \"version\" : \"...\",    \"stage\" : \"...\",    \"state\" : {      \"progress\" : 12345,      \"totalProgress\" : 12345,      \"count\" : 12345,      \"totalCount\" : 12345,      \"errors\" : [ \"...\", \"...\" ],      \"warnings\" : [ \"...\", \"...\" ]    },    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"displayName\" : \"...\",    \"description\" : \"...\"  } ],  \"clusterUrl\" : \"...\",  \"hostsUrl\" : \"...\",  \"entityStatus\" : \"NONE\",  \"uuid\" : \"...\",  \"dataContextRefs\" : [ {    \"name\" : \"...\"  }, {    \"name\" : \"...\"  } ],  \"clusterType\" : \"...\",  \"tags\" : [ {    \"name\" : \"...\",    \"value\" : \"...\"  }, {    \"name\" : \"...\",    \"value\" : \"...\"  } ]}", ApiCluster.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Fetches the log content for the specific command.", nickname = "getLogContent", notes = "Fetches the log content for the specific command.", response = Resource.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "the log content.", response = Resource.class) })
    @RequestMapping(value = "/controlPlanes/fetchResources/{commandId}/logContent",
        produces = { "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Resource> getLogContent(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "the command id",required=true) @PathVariable("commandId") Integer commandId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("", Resource.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type ", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Fetches the manifest.", nickname = "getManifestJson", notes = "Fetches the manifest.json under the specified remote repo.", response = Resource.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "the content of the manifest.json", response = Resource.class) })
    @RequestMapping(value = "/controlPlanes/fetchResources/manifest.json",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Resource> getManifestJson(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "the remote repo url."  )  @Valid @RequestBody ApiRemoteRepoUrl body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", Resource.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Launches the install control plane command.", nickname = "installControlPlane", notes = "Launches the install control plane command.", response = ApiCommand.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The command that install a control plane.", response = ApiCommand.class) })
    @RequestMapping(value = "/controlPlanes/commands/installControlPlane",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiCommand> installControlPlane(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "Arguments for the Command"  )  @Valid @RequestBody ApiInstallControlPlaneArgs body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 12345,  \"name\" : \"...\",  \"startTime\" : \"...\",  \"endTime\" : \"...\",  \"active\" : true,  \"success\" : true,  \"resultMessage\" : \"...\",  \"resultDataUrl\" : \"...\",  \"clusterRef\" : {    \"clusterName\" : \"...\",    \"displayName\" : \"...\"  },  \"serviceRef\" : {    \"peerName\" : \"...\",    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"serviceDisplayName\" : \"...\",    \"serviceType\" : \"...\"  },  \"roleRef\" : {    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"roleName\" : \"...\",    \"healthSummary\" : \"GOOD\",    \"roleStatus\" : \"BUSY\"  },  \"hostRef\" : {    \"hostId\" : \"...\",    \"hostname\" : \"...\"  },  \"parent\" : {    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\",      \"healthSummary\" : \"BAD\",      \"roleStatus\" : \"STARTED\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : { },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"children\" : {    \"items\" : [ {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    }, {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    } ]  },  \"canRetry\" : true}", ApiCommand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Brings up a control plane on embedded kubernetes.", nickname = "installEmbeddedControlPlane", notes = "Brings up a control plane on embedded kubernetes. At its core, this command launches the FirstRun command on the Experience cluster", response = ApiCommand.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The First Run command", response = ApiCommand.class) })
    @RequestMapping(value = "/controlPlanes/commands/installEmbeddedControlPlane",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiCommand> installEmbeddedControlPlane(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "The arguments for Ek8s control plane installation"  )  @Valid @RequestBody ApiInstallEmbeddedControlPlaneArgs body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 12345,  \"name\" : \"...\",  \"startTime\" : \"...\",  \"endTime\" : \"...\",  \"active\" : true,  \"success\" : true,  \"resultMessage\" : \"...\",  \"resultDataUrl\" : \"...\",  \"clusterRef\" : {    \"clusterName\" : \"...\",    \"displayName\" : \"...\"  },  \"serviceRef\" : {    \"peerName\" : \"...\",    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"serviceDisplayName\" : \"...\",    \"serviceType\" : \"...\"  },  \"roleRef\" : {    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"roleName\" : \"...\",    \"healthSummary\" : \"CONCERNING\",    \"roleStatus\" : \"NA\"  },  \"hostRef\" : {    \"hostId\" : \"...\",    \"hostname\" : \"...\"  },  \"parent\" : {    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\",      \"healthSummary\" : \"BAD\",      \"roleStatus\" : \"BUSY\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : { },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"children\" : {    \"items\" : [ {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    }, {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    } ]  },  \"canRetry\" : true}", ApiCommand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "The control plane with the given id.", nickname = "readControlPlaneByUuid", notes = "The control plane with the given id", response = ApiControlPlane.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Detailed description of the control plane.", response = ApiControlPlane.class) })
    @RequestMapping(value = "/controlPlanes/{controlPlaneUuid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiControlPlane> readControlPlaneByUuid(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "The universally unique id of the control plane",required=true) @PathVariable("controlPlaneUuid") String controlPlaneUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"namespace\" : \"...\",  \"dnsSuffix\" : \"...\",  \"uuid\" : \"...\",  \"remoteRepoUrl\" : \"...\",  \"version\" : \"...\",  \"manifest\" : \"...\",  \"valuesYaml\" : \"...\",  \"kubernetesType\" : \"...\"}", ApiControlPlane.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Launches Uninstall Command on the control plane with the given uuid.", nickname = "uninstallControlPlane", notes = "Launches Uninstall Command on the control plane with the given uuid", response = ApiCommand.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The command that uninstalls the control plane.", response = ApiCommand.class) })
    @RequestMapping(value = "/controlPlanes/{controlPlaneUuid}/commands/uninstallControlPlane",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiCommand> uninstallControlPlane(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "The universally unique id of the control plane",required=true) @PathVariable("controlPlaneUuid") String controlPlaneUuid,@ApiParam(value = "Arguments for the Command"  )  @Valid @RequestBody ApiUninstallControlPlaneArgs body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 12345,  \"name\" : \"...\",  \"startTime\" : \"...\",  \"endTime\" : \"...\",  \"active\" : true,  \"success\" : true,  \"resultMessage\" : \"...\",  \"resultDataUrl\" : \"...\",  \"clusterRef\" : {    \"clusterName\" : \"...\",    \"displayName\" : \"...\"  },  \"serviceRef\" : {    \"peerName\" : \"...\",    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"serviceDisplayName\" : \"...\",    \"serviceType\" : \"...\"  },  \"roleRef\" : {    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"roleName\" : \"...\",    \"healthSummary\" : \"CONCERNING\",    \"roleStatus\" : \"STARTING\"  },  \"hostRef\" : {    \"hostId\" : \"...\",    \"hostname\" : \"...\"  },  \"parent\" : {    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\",      \"healthSummary\" : \"CONCERNING\",      \"roleStatus\" : \"STOPPING\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : { },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"children\" : {    \"items\" : [ {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    }, {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    } ]  },  \"canRetry\" : true}", ApiCommand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Launches update the values.", nickname = "updateValuesYaml", notes = "Launches update the values.yaml from the control plane with the given uuid This updates the content of values.yaml.merged in the CM database.", response = ApiCommand.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The command that updates the current values.yaml.merged from the control plane.", response = ApiCommand.class) })
    @RequestMapping(value = "/controlPlanes/{controlPlaneUuid}/commands/updateControlPlaneValuesYaml",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiCommand> updateValuesYaml(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "The universally unique id of the control plane",required=true) @PathVariable("controlPlaneUuid") String controlPlaneUuid,@ApiParam(value = "Arguments for the Command"  )  @Valid @RequestBody ApiUpdateControlPlaneValuesYamlArgs body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 12345,  \"name\" : \"...\",  \"startTime\" : \"...\",  \"endTime\" : \"...\",  \"active\" : true,  \"success\" : true,  \"resultMessage\" : \"...\",  \"resultDataUrl\" : \"...\",  \"clusterRef\" : {    \"clusterName\" : \"...\",    \"displayName\" : \"...\"  },  \"serviceRef\" : {    \"peerName\" : \"...\",    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"serviceDisplayName\" : \"...\",    \"serviceType\" : \"...\"  },  \"roleRef\" : {    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"roleName\" : \"...\",    \"healthSummary\" : \"CONCERNING\",    \"roleStatus\" : \"BUSY\"  },  \"hostRef\" : {    \"hostId\" : \"...\",    \"hostname\" : \"...\"  },  \"parent\" : {    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\",      \"healthSummary\" : \"NOT_AVAILABLE\",      \"roleStatus\" : \"NA\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : { },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"children\" : {    \"items\" : [ {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    }, {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    } ]  },  \"canRetry\" : true}", ApiCommand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Launches the Upgrade Command on the control plane with the given uuid.", nickname = "upgradeControlPlane", notes = "Launches the Upgrade Command on the control plane with the given uuid", response = ApiCommand.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The command that upgrades the control plane.", response = ApiCommand.class) })
    @RequestMapping(value = "/controlPlanes/{controlPlaneUuid}/commands/upgradeControlPlane",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiCommand> upgradeControlPlane(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "The universally unique id of the control plane",required=true) @PathVariable("controlPlaneUuid") String controlPlaneUuid,@ApiParam(value = "Arguments for the Command"  )  @Valid @RequestBody ApiUpgradeControlPlaneArgs body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 12345,  \"name\" : \"...\",  \"startTime\" : \"...\",  \"endTime\" : \"...\",  \"active\" : true,  \"success\" : true,  \"resultMessage\" : \"...\",  \"resultDataUrl\" : \"...\",  \"clusterRef\" : {    \"clusterName\" : \"...\",    \"displayName\" : \"...\"  },  \"serviceRef\" : {    \"peerName\" : \"...\",    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"serviceDisplayName\" : \"...\",    \"serviceType\" : \"...\"  },  \"roleRef\" : {    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"roleName\" : \"...\",    \"healthSummary\" : \"BAD\",    \"roleStatus\" : \"STARTED\"  },  \"hostRef\" : {    \"hostId\" : \"...\",    \"hostname\" : \"...\"  },  \"parent\" : {    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\",      \"healthSummary\" : \"HISTORY_NOT_AVAILABLE\",      \"roleStatus\" : \"STARTING\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : { },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"children\" : {    \"items\" : [ {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    }, {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    } ]  },  \"canRetry\" : true}", ApiCommand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Upgrade an experience cluster, including upgrading the control plane running on embedded kubernetes.", nickname = "upgradeEmbeddedControlPlane", notes = "Upgrade an experience cluster, including upgrading the control plane running on embedded kubernetes.", response = ApiCommand.class, authorizations = {
        @Authorization(value = "basic")
    }, tags={ "ControlPlanesResource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The Upgrade Cluster command", response = ApiCommand.class) })
    @RequestMapping(value = "/controlPlanes/commands/upgradeEmbeddedControlPlane",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiCommand> upgradeEmbeddedControlPlane(@ApiParam(value = "The unique id of CB cluster (works in CB test framework only)",required=true) @PathVariable("mockUuid") String mockUuid,@ApiParam(value = "The arguments for Ek8s control plane upgrade"  )  @Valid @RequestBody ApiUpgradeEmbeddedControlPlaneArgs body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 12345,  \"name\" : \"...\",  \"startTime\" : \"...\",  \"endTime\" : \"...\",  \"active\" : true,  \"success\" : true,  \"resultMessage\" : \"...\",  \"resultDataUrl\" : \"...\",  \"clusterRef\" : {    \"clusterName\" : \"...\",    \"displayName\" : \"...\"  },  \"serviceRef\" : {    \"peerName\" : \"...\",    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"serviceDisplayName\" : \"...\",    \"serviceType\" : \"...\"  },  \"roleRef\" : {    \"clusterName\" : \"...\",    \"serviceName\" : \"...\",    \"roleName\" : \"...\",    \"healthSummary\" : \"DISABLED\",    \"roleStatus\" : \"UNKNOWN\"  },  \"hostRef\" : {    \"hostId\" : \"...\",    \"hostname\" : \"...\"  },  \"parent\" : {    \"id\" : 12345,    \"name\" : \"...\",    \"startTime\" : \"...\",    \"endTime\" : \"...\",    \"active\" : true,    \"success\" : true,    \"resultMessage\" : \"...\",    \"resultDataUrl\" : \"...\",    \"clusterRef\" : {      \"clusterName\" : \"...\",      \"displayName\" : \"...\"    },    \"serviceRef\" : {      \"peerName\" : \"...\",      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"serviceDisplayName\" : \"...\",      \"serviceType\" : \"...\"    },    \"roleRef\" : {      \"clusterName\" : \"...\",      \"serviceName\" : \"...\",      \"roleName\" : \"...\",      \"healthSummary\" : \"CONCERNING\",      \"roleStatus\" : \"STOPPED\"    },    \"hostRef\" : {      \"hostId\" : \"...\",      \"hostname\" : \"...\"    },    \"parent\" : { },    \"children\" : {      \"items\" : [ { }, { } ]    },    \"canRetry\" : true  },  \"children\" : {    \"items\" : [ {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    }, {      \"id\" : 12345,      \"name\" : \"...\",      \"startTime\" : \"...\",      \"endTime\" : \"...\",      \"active\" : true,      \"success\" : true,      \"resultMessage\" : \"...\",      \"resultDataUrl\" : \"...\",      \"clusterRef\" : { },      \"serviceRef\" : { },      \"roleRef\" : { },      \"hostRef\" : { },      \"parent\" : { },      \"children\" : { },      \"canRetry\" : true    } ]  },  \"canRetry\" : true}", ApiCommand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ControlPlanesResourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
