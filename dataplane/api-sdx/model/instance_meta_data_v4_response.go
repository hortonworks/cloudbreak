// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceMetaDataV4Response instance meta data v4 response
// swagger:model InstanceMetaDataV4Response
type InstanceMetaDataV4Response struct {

	// ambari server address
	AmbariServer bool `json:"ambariServer,omitempty"`

	// the fully qualified domain name of the node in the service discovery cluster
	DiscoveryFQDN string `json:"discoveryFQDN,omitempty"`

	// name of the instance group
	InstanceGroup string `json:"instanceGroup,omitempty"`

	// id of the instance
	InstanceID string `json:"instanceId,omitempty"`

	// status of the instance
	// Enum: [REQUESTED CREATED UNREGISTERED REGISTERED DECOMMISSIONED TERMINATED DELETED_ON_PROVIDER_SIDE FAILED STOPPED ORCHESTRATION_FAILED DECOMMISSION_FAILED]
	InstanceStatus string `json:"instanceStatus,omitempty"`

	// type of the instance
	// Enum: [GATEWAY GATEWAY_PRIMARY CORE]
	InstanceType string `json:"instanceType,omitempty"`

	// mounted volumes
	MountedVolumes []*MountedVolumeV4Response `json:"mountedVolumes"`

	// private ip of the insctance
	PrivateIP string `json:"privateIp,omitempty"`

	// public ip of the instance
	PublicIP string `json:"publicIp,omitempty"`

	// ssh port
	SSHPort int32 `json:"sshPort,omitempty"`

	// state of the host
	State string `json:"state,omitempty"`
}

// Validate validates this instance meta data v4 response
func (m *InstanceMetaDataV4Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountedVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var instanceMetaDataV4ResponseTypeInstanceStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REQUESTED","CREATED","UNREGISTERED","REGISTERED","DECOMMISSIONED","TERMINATED","DELETED_ON_PROVIDER_SIDE","FAILED","STOPPED","ORCHESTRATION_FAILED","DECOMMISSION_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceMetaDataV4ResponseTypeInstanceStatusPropEnum = append(instanceMetaDataV4ResponseTypeInstanceStatusPropEnum, v)
	}
}

const (

	// InstanceMetaDataV4ResponseInstanceStatusREQUESTED captures enum value "REQUESTED"
	InstanceMetaDataV4ResponseInstanceStatusREQUESTED string = "REQUESTED"

	// InstanceMetaDataV4ResponseInstanceStatusCREATED captures enum value "CREATED"
	InstanceMetaDataV4ResponseInstanceStatusCREATED string = "CREATED"

	// InstanceMetaDataV4ResponseInstanceStatusUNREGISTERED captures enum value "UNREGISTERED"
	InstanceMetaDataV4ResponseInstanceStatusUNREGISTERED string = "UNREGISTERED"

	// InstanceMetaDataV4ResponseInstanceStatusREGISTERED captures enum value "REGISTERED"
	InstanceMetaDataV4ResponseInstanceStatusREGISTERED string = "REGISTERED"

	// InstanceMetaDataV4ResponseInstanceStatusDECOMMISSIONED captures enum value "DECOMMISSIONED"
	InstanceMetaDataV4ResponseInstanceStatusDECOMMISSIONED string = "DECOMMISSIONED"

	// InstanceMetaDataV4ResponseInstanceStatusTERMINATED captures enum value "TERMINATED"
	InstanceMetaDataV4ResponseInstanceStatusTERMINATED string = "TERMINATED"

	// InstanceMetaDataV4ResponseInstanceStatusDELETEDONPROVIDERSIDE captures enum value "DELETED_ON_PROVIDER_SIDE"
	InstanceMetaDataV4ResponseInstanceStatusDELETEDONPROVIDERSIDE string = "DELETED_ON_PROVIDER_SIDE"

	// InstanceMetaDataV4ResponseInstanceStatusFAILED captures enum value "FAILED"
	InstanceMetaDataV4ResponseInstanceStatusFAILED string = "FAILED"

	// InstanceMetaDataV4ResponseInstanceStatusSTOPPED captures enum value "STOPPED"
	InstanceMetaDataV4ResponseInstanceStatusSTOPPED string = "STOPPED"

	// InstanceMetaDataV4ResponseInstanceStatusORCHESTRATIONFAILED captures enum value "ORCHESTRATION_FAILED"
	InstanceMetaDataV4ResponseInstanceStatusORCHESTRATIONFAILED string = "ORCHESTRATION_FAILED"

	// InstanceMetaDataV4ResponseInstanceStatusDECOMMISSIONFAILED captures enum value "DECOMMISSION_FAILED"
	InstanceMetaDataV4ResponseInstanceStatusDECOMMISSIONFAILED string = "DECOMMISSION_FAILED"
)

// prop value enum
func (m *InstanceMetaDataV4Response) validateInstanceStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceMetaDataV4ResponseTypeInstanceStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceMetaDataV4Response) validateInstanceStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateInstanceStatusEnum("instanceStatus", "body", m.InstanceStatus); err != nil {
		return err
	}

	return nil
}

var instanceMetaDataV4ResponseTypeInstanceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GATEWAY","GATEWAY_PRIMARY","CORE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceMetaDataV4ResponseTypeInstanceTypePropEnum = append(instanceMetaDataV4ResponseTypeInstanceTypePropEnum, v)
	}
}

const (

	// InstanceMetaDataV4ResponseInstanceTypeGATEWAY captures enum value "GATEWAY"
	InstanceMetaDataV4ResponseInstanceTypeGATEWAY string = "GATEWAY"

	// InstanceMetaDataV4ResponseInstanceTypeGATEWAYPRIMARY captures enum value "GATEWAY_PRIMARY"
	InstanceMetaDataV4ResponseInstanceTypeGATEWAYPRIMARY string = "GATEWAY_PRIMARY"

	// InstanceMetaDataV4ResponseInstanceTypeCORE captures enum value "CORE"
	InstanceMetaDataV4ResponseInstanceTypeCORE string = "CORE"
)

// prop value enum
func (m *InstanceMetaDataV4Response) validateInstanceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceMetaDataV4ResponseTypeInstanceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceMetaDataV4Response) validateInstanceType(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateInstanceTypeEnum("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	return nil
}

func (m *InstanceMetaDataV4Response) validateMountedVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.MountedVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.MountedVolumes); i++ {
		if swag.IsZero(m.MountedVolumes[i]) { // not required
			continue
		}

		if m.MountedVolumes[i] != nil {
			if err := m.MountedVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mountedVolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceMetaDataV4Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceMetaDataV4Response) UnmarshalBinary(b []byte) error {
	var res InstanceMetaDataV4Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
