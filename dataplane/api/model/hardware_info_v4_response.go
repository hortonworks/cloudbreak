// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HardwareInfoV4Response hardware info v4 response
// swagger:model HardwareInfoV4Response
type HardwareInfoV4Response struct {

	// ambari server address
	AmbariServer bool `json:"ambariServer,omitempty"`

	// the fully qualified domain name of the node in the service discovery cluster
	DiscoveryFQDN string `json:"discoveryFQDN,omitempty"`

	// name of the host group
	// Required: true
	GroupName *string `json:"groupName"`

	// image catalog name
	ImageCatalogName string `json:"imageCatalogName,omitempty"`

	// image catalog Url
	ImageCatalogURL string `json:"imageCatalogUrl,omitempty"`

	// image Id
	ImageID string `json:"imageId,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// name of the instance group
	InstanceGroup string `json:"instanceGroup,omitempty"`

	// id of the instance
	InstanceID string `json:"instanceId,omitempty"`

	// type of the instance
	// Enum: [GATEWAY GATEWAY_PRIMARY CORE]
	InstanceMetadataType string `json:"instanceMetadataType,omitempty"`

	// status of the instance
	// Enum: [REQUESTED CREATED UNREGISTERED REGISTERED DECOMMISSIONED TERMINATED DELETED_ON_PROVIDER_SIDE FAILED STOPPED ORCHESTRATION_FAILED DECOMMISSION_FAILED]
	InstanceStatus string `json:"instanceStatus,omitempty"`

	// name of the resource
	// Required: true
	Name *string `json:"name"`

	// os
	Os string `json:"os,omitempty"`

	// os type
	OsType string `json:"osType,omitempty"`

	// package versions
	PackageVersions map[string]string `json:"packageVersions,omitempty"`

	// private ip of the insctance
	PrivateIP string `json:"privateIp,omitempty"`

	// public ip of the instance
	PublicIP string `json:"publicIp,omitempty"`

	// ssh port
	SSHPort int32 `json:"sshPort,omitempty"`

	// state of the host
	State string `json:"state,omitempty"`

	// instancegroup related template
	Template *InstanceTemplateV4Response `json:"template,omitempty"`
}

// Validate validates this hardware info v4 response
func (m *HardwareInfoV4Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceMetadataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HardwareInfoV4Response) validateGroupName(formats strfmt.Registry) error {

	if err := validate.Required("groupName", "body", m.GroupName); err != nil {
		return err
	}

	return nil
}

var hardwareInfoV4ResponseTypeInstanceMetadataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GATEWAY","GATEWAY_PRIMARY","CORE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hardwareInfoV4ResponseTypeInstanceMetadataTypePropEnum = append(hardwareInfoV4ResponseTypeInstanceMetadataTypePropEnum, v)
	}
}

const (

	// HardwareInfoV4ResponseInstanceMetadataTypeGATEWAY captures enum value "GATEWAY"
	HardwareInfoV4ResponseInstanceMetadataTypeGATEWAY string = "GATEWAY"

	// HardwareInfoV4ResponseInstanceMetadataTypeGATEWAYPRIMARY captures enum value "GATEWAY_PRIMARY"
	HardwareInfoV4ResponseInstanceMetadataTypeGATEWAYPRIMARY string = "GATEWAY_PRIMARY"

	// HardwareInfoV4ResponseInstanceMetadataTypeCORE captures enum value "CORE"
	HardwareInfoV4ResponseInstanceMetadataTypeCORE string = "CORE"
)

// prop value enum
func (m *HardwareInfoV4Response) validateInstanceMetadataTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hardwareInfoV4ResponseTypeInstanceMetadataTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HardwareInfoV4Response) validateInstanceMetadataType(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceMetadataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateInstanceMetadataTypeEnum("instanceMetadataType", "body", m.InstanceMetadataType); err != nil {
		return err
	}

	return nil
}

var hardwareInfoV4ResponseTypeInstanceStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REQUESTED","CREATED","UNREGISTERED","REGISTERED","DECOMMISSIONED","TERMINATED","DELETED_ON_PROVIDER_SIDE","FAILED","STOPPED","ORCHESTRATION_FAILED","DECOMMISSION_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hardwareInfoV4ResponseTypeInstanceStatusPropEnum = append(hardwareInfoV4ResponseTypeInstanceStatusPropEnum, v)
	}
}

const (

	// HardwareInfoV4ResponseInstanceStatusREQUESTED captures enum value "REQUESTED"
	HardwareInfoV4ResponseInstanceStatusREQUESTED string = "REQUESTED"

	// HardwareInfoV4ResponseInstanceStatusCREATED captures enum value "CREATED"
	HardwareInfoV4ResponseInstanceStatusCREATED string = "CREATED"

	// HardwareInfoV4ResponseInstanceStatusUNREGISTERED captures enum value "UNREGISTERED"
	HardwareInfoV4ResponseInstanceStatusUNREGISTERED string = "UNREGISTERED"

	// HardwareInfoV4ResponseInstanceStatusREGISTERED captures enum value "REGISTERED"
	HardwareInfoV4ResponseInstanceStatusREGISTERED string = "REGISTERED"

	// HardwareInfoV4ResponseInstanceStatusDECOMMISSIONED captures enum value "DECOMMISSIONED"
	HardwareInfoV4ResponseInstanceStatusDECOMMISSIONED string = "DECOMMISSIONED"

	// HardwareInfoV4ResponseInstanceStatusTERMINATED captures enum value "TERMINATED"
	HardwareInfoV4ResponseInstanceStatusTERMINATED string = "TERMINATED"

	// HardwareInfoV4ResponseInstanceStatusDELETEDONPROVIDERSIDE captures enum value "DELETED_ON_PROVIDER_SIDE"
	HardwareInfoV4ResponseInstanceStatusDELETEDONPROVIDERSIDE string = "DELETED_ON_PROVIDER_SIDE"

	// HardwareInfoV4ResponseInstanceStatusFAILED captures enum value "FAILED"
	HardwareInfoV4ResponseInstanceStatusFAILED string = "FAILED"

	// HardwareInfoV4ResponseInstanceStatusSTOPPED captures enum value "STOPPED"
	HardwareInfoV4ResponseInstanceStatusSTOPPED string = "STOPPED"

	// HardwareInfoV4ResponseInstanceStatusORCHESTRATIONFAILED captures enum value "ORCHESTRATION_FAILED"
	HardwareInfoV4ResponseInstanceStatusORCHESTRATIONFAILED string = "ORCHESTRATION_FAILED"

	// HardwareInfoV4ResponseInstanceStatusDECOMMISSIONFAILED captures enum value "DECOMMISSION_FAILED"
	HardwareInfoV4ResponseInstanceStatusDECOMMISSIONFAILED string = "DECOMMISSION_FAILED"
)

// prop value enum
func (m *HardwareInfoV4Response) validateInstanceStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hardwareInfoV4ResponseTypeInstanceStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HardwareInfoV4Response) validateInstanceStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateInstanceStatusEnum("instanceStatus", "body", m.InstanceStatus); err != nil {
		return err
	}

	return nil
}

func (m *HardwareInfoV4Response) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *HardwareInfoV4Response) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HardwareInfoV4Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HardwareInfoV4Response) UnmarshalBinary(b []byte) error {
	var res HardwareInfoV4Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
