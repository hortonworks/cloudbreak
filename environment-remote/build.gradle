import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        maven { url = "$repoUrl" }
        maven { url = "$springRepoUrl" }
        mavenCentral()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarVersion}"
        classpath "org.openapitools:openapi-generator-gradle-plugin:$openapiGeneratorGradlePlugin"
        classpath "com.google.protobuf:protobuf-gradle-plugin:${protobufPluginVersion}"
    }
}

plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'maven-publish'
    id 'org.springframework.boot' version "${springBootVersion}"
    id "org.sonarqube" version "${sonarVersion}"
    id 'org.openapi.generator' version "$openapiGeneratorGradlePlugin"
    id 'com.google.protobuf' version "${protobufPluginVersion}"
}

apply plugin: org.sonarqube.gradle.SonarQubePlugin
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.google.protobuf'

configurations.all {
    resolutionStrategy {
        force "net.bytebuddy:byte-buddy:${byteBuddyVersion}"
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectName", "cb-environment-service"
        property "sonar.projectKey", "cb-environment-service"
        property "sonar.java.coveragePlugin", "plugin"
        property "sonar.sources", "src/main"
        property "sonar.tests", "src/test"
        property "sonar.java.binaries", "build/classes"
        property "sonar.java.libraries", "build/libs/*.jar"
        property "project.reporting.outputEncoding", "UTF-8"
        property "sonar.host.url", "$System.env.SONAR_URL"
        property "sonar.login", "$System.env.SONAR_PASSWORD"
        property "org.gradle.internal.http.socketTimeout", "600000"
        property "org.gradle.internal.http.connectionTimeout", "600000"
        property "sonar.coverage.exclusions", "**/proto/**,**/generated/**"
        property "sonar.exclusions", "**/proto/**,**/generated/**"
    }
}

ext {
    swagger_annotations_version = "1.6.5"
    jackson_version = "2.13.4"
    jackson_databind_version = "2.13.4.2"
    jackson_databind_nullable_version = "0.2.6"
    jakarta_annotation_version = "2.1.0"
    jersey_version = "3.0.4"
    junit_version = "5.8.2"
}

dependencies {
    implementation project(':authorization-common')
    implementation project(':auth-connector')
    implementation project(":flow-api")
    implementation project(':flow')
    implementation project(":common")
    implementation project(':environment-remote-api')
    implementation project(':cluster-proxy')
    implementation project(':secret-engine')
    implementation project(':service-common')

    implementation group: 'org.springframework.boot',   name: 'spring-boot-starter',            version: springBootVersion
    implementation group: 'org.springframework.boot',   name: 'spring-boot-starter-web',        version: springBootVersion
    implementation group: 'org.springframework.boot',   name: 'spring-boot-starter-actuator',   version: springBootVersion
    implementation group: 'org.springframework.boot',   name: 'spring-boot-starter-jersey',     version: springBootVersion
    implementation group: 'org.springframework.boot',   name: 'spring-boot-starter-data-jpa',   version: springBootVersion
    implementation group: 'org.springframework.boot',   name: 'spring-boot-starter-security',   version: springBootVersion
    implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart',         version: jerseyCoreVersion
    implementation group: 'io.swagger.core.v3',         name: 'swagger-jaxrs2-jakarta',         version: swaggerCoreVersion
    implementation group: 'javax.xml.bind',             name: 'jaxb-api',                       version: javaxXmlBindJaxbApiVersion
    implementation group: 'org.openapitools',           name: 'jackson-databind-nullable',      version: "$jacksonDatabindNullable"
    implementation group: 'javax.annotation',           name: 'javax.annotation-api',           version: javaxAnnotationApiVersion

    testImplementation project(path: ':authorization-common', configuration: 'tests')
    testImplementation project(path: ':common', configuration: 'tests')
    testImplementation project(path: ':flow', configuration: 'tests')
    testImplementation group: "org.mockito",               name: "mockito-core",                             version: mockitoVersion
    testImplementation(group: "org.springframework.boot",  name: "spring-boot-starter-test",                 version: springBootVersion) {
        exclude group: "junit"
    }
    testImplementation group: "com.openpojo",              name: "openpojo",                                 version: openPojoVersion
    testImplementation group: "com.h2database",            name: "h2",                                       version: h2databaseVersion
    testImplementation group: "org.mockito",               name: "mockito-core",                             version: mockitoVersion
    testImplementation group: "com.google.guava",          name: "guava",                                    version: guavaVersion
    testImplementation group: 'org.assertj',               name: 'assertj-core',                             version: assertjVersion
    testRuntimeOnly    group: 'org.testcontainers',        name: 'postgresql',                               version: testContainersVersion
    testRuntimeOnly    group: 'org.awaitility',            name: 'awaitility',                               version: awaitilityVersion
}


bootRun {
    systemProperty "spring.profiles.active", System.properties["spring.profiles.active"]
    systemProperty "spring.config.location", System.properties["spring.config.location"]
    systemProperty 'spring.config.additional-location', System.properties['spring.config.additional-location']

    if (project.hasProperty("jvmArgs")) {
        jvmArgs += project.jvmArgs.split("\\s+").toList()
    }
}

bootRun {
    mainClass = 'com.sequenceiq.environmentprivate.PrivateEnvironmentApplication'
}

bootJar {
    archiveBaseName = 'remote-environment'
    archiveFileName = 'remote-environment.jar'
    manifest {
        def grgit = Grgit.open(currentDir: project.projectDir)
        attributes "Implementation-Version": grgit.describe()
    }
}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
    repositories {
        maven {
            url = "$System.env.NEXUS_URL"
            allowInsecureProtocol = true
            credentials {
                username = "$System.env.NEXUS_USER"
                password = "$System.env.NEXUS_PASSWORD"
            }
        }
    }
}

protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

checkstyle {
    checkstyleMain.exclude '**/generated/**'
}