server.servlet.context-path: "/cb"

opentracing:
  jaeger:
    log-spans: false

management:
  endpoints:
    web:
      base-path: "/"
      exposure:
        include: info,health,prometheus
      path-mapping:
        prometheus: metrics
  endpoint:
    metrics:
      enabled: true
      export:
        prometheus:
          enabled: true
    prometheus:
      enabled: true
  metrics:
    distribution:
      sla:
        "[http.server.requests]": "125ms, 250ms, 500ms, 1s, 2s"
      percentiles:
        "[http.server.requests]": "0.5, 0.95"

info:
  app:
    capabilities: gov_cloud, mock_idbroker_mapping

spring:
  application:
    name: CloudbreakService
  freemarker:
    template-loader-path: file:/etc/cloudbreak,classpath:/
    prefer-file-system-access: false
  datasource:
    maxActive: 30
  jpa:
    properties:
      hibernate:
        jdbc.batch_size: 50
        order_inserts: true

rest:
  debug: false

cert:
  validation: true
  ignorePreValidation: false

secret:
  application: cb/shared
  engine: "com.sequenceiq.cloudbreak.service.secret.vault.VaultKvV2Engine"

vault:
  addr: localhost
  port: 8200
  ssl.enabled: false
  kv.engine.v2.path: secret
  config.enabled: true
  auth:
    type: "token"
    kubernetes:
      service.account.token.path: /var/run/secrets/kubernetes.io/serviceaccount/token
      mount.path: "dps-dev"
      login.role: "cloudbreak.default"

flow:
  schema:
    migration:
      auto: false

distrox:
  gateway:
    topology:
      name: cdp-proxy
    ssotype: SSO_PROVIDER
  restrict:
    instance:
      types: true

cb:
  enabledplatforms: AZURE,AWS,GCP,OPENSTACK
  platform.default.rootVolumeSize:
    AWS: 50
    AZURE: 50
    GCP: 50
  enabled.linux.types: redhat6,redhat7,centos6,centos7
  default.gateway.cidr: 0.0.0.0/0
  publicip:
  etc.config.dir: /etc/cloudbreak
  threadpool:
    core.size: 100
    capacity.size: 4000
  intermediate.threadpool:
    core.size: 100
    capacity.size: 4000
  notification:
    endpoint: http://localhost:3000/notifications
  environment:
    url: http://localhost:8088
    contextPath: /environmentservice
  freeipa:
    url: http://localhost:8090
    contextPath: /freeipa
  sdx:
    url: http://localhost:8086
    contextPath: /dl
  redbeams:
    url: http://localhost:8087
    contextPath: /redbeams
  runtimes:
    latest: "7.2.0"

  host.discovery.custom.hostname.enabled: false

  cert:
    dir: /certs/

  smtp.sender:
    host:
    port: 25
    username:
    password:
    from: no-reply@sequenceiq.com

  db.env:
    user: postgres
    pass:
    db: cbdb
    schema: public
    cert.file: database.crt
    ssl: false

  aws:
    spotinstances.enabled: true
    disabled.instance.types:
    distrox:
      enabled.instance.types: >
        m5.2xlarge,
        m5.4xlarge,
        m5.8xlarge,
        d2.xlarge,
        d2.2xlarge,
        d2.4xlarge,
        d2.8xlarge,
        r5.2xlarge,
        r5.4xlarge,
        r5.8xlarge,
        c5.2xlarge,
        c5.4xlarge,
        c5.9xlarge,
        i3.2xlarge,
        i3.4xlarge,
        i3.8xlarge,
        h1.2xlarge,
        h1.4xlarge,
        h1.8xlarge,
        r5d.4xlarge
    hostkey.verify: false
    role.session.name: cdp-provisioning
    cf.template.new.path: templates/aws-cf-stack.ftl
    cf.network.template.path: templates/aws-cf-network.ftl
    cf.template.newdb.path: templates/aws-cf-dbstack.ftl
    default.inbound.security.group:
    vpc:
    externaldatabase.retentionperiod: 0
    credential.cache.ttl: 60

  azure:
    host.name.prefix.length: 255
    database.template.batchSize: 1
    distrox:
      enabled.instance.types: >
        Standard_D8_v3,
        Standard_D16_v3,
        Standard_D32_v3,
        Standard_E8_v3,
        Standard_E16_v3
        Standard_E32_v3,
        Standard_F8s_v2,
        Standard_F16s_v2,
        Standard_F32s_v2,
        Standard_L8s_v2,
        Standard_L16s_v2,
        Standard_L32s_v2,
        Standard_L8s,
        Standard_L16s,
        Standard_L32s,
        Standard_NC6,
        Standard_NC24r,
        Standard_L48s_v2

  os:
    enable.autoimport: true
    import:
      root.url.pattern: http://public-repo-1.hortonworks.com/HDP/cloudbreak/%s.img
      from.format: qcow2
      disk.format: qcow2
      container.format: bare



  yarn:
    domain: default.com
    defaultQueue: "default"
    defaultLifeTime: 604800

  blueprint:
    cm:
      defaults: >
        CDP 1.2 - Data Engineering: Apache Spark, Apache Hive, Apache Oozie=cdp-data-engineering-702;
        CDP 1.2 - Data Engineering: HA: Apache Spark, Apache Hive, Apache Oozie=cdp-data-engineering-ha-702;
        CDP 1.2 - Data Mart: Apache Impala, Hue=cdp-data-mart-702;
        CDP 1.2 - Real-time Data Mart: Apache Impala, Hue, Apache Kudu, Apache Spark=cdp-rt-data-mart-702;
        CDP 1.2 - Operational Database: Apache HBase=cdp-opdb-702;
        CDP 1.2 - SDX Light Duty: Apache Hive Metastore, Apache Ranger, Apache Atlas=cdp-sdx-702;
        CDP 1.2 - SDX Medium Duty: Apache Hive Metastore, Apache Ranger, Apache Atlas=cdp-sdx-medium-ha-702;
        CDP 1.2 - Streams Messaging Heavy Duty: Apache Kafka, Schema Registry, Streams Messaging Manager=cdp-streaming-702;
        CDP 1.2 - Streams Messaging Light Duty: Apache Kafka, Schema Registry, Streams Messaging Manager=cdp-streaming-small-702;
        7.1.0 - Data Engineering: Apache Spark, Apache Hive, Apache Oozie=cdp-data-engineering-710;
        7.1.0 - Data Engineering: HA: Apache Spark, Apache Hive, Apache Oozie=cdp-data-engineering-ha-710;
        7.1.0 - Data Engineering: Apache Spark3=cdp-data-engineering-spark3-710;
        7.1.0 - Data Mart: Apache Impala, Hue=cdp-data-mart-710;
        7.1.0 - Flow Management Light Duty with Apache NiFi, Apache NiFi Registry=cdp-flow-management-small-710;
        7.1.0 - Flow Management Heavy Duty with Apache NiFi, Apache NiFi Registry=cdp-flow-management-710;
        7.1.0 - Real-time Data Mart: Apache Impala, Hue, Apache Kudu, Apache Spark=cdp-rt-data-mart-710;
        7.1.0 - Operational Database: Apache HBase, Phoenix=cdp-opdb-710;
        7.1.0 - SDX Light Duty: Apache Hive Metastore, Apache Ranger, Apache Atlas=cdp-sdx-710;
        7.1.0 - SDX Medium Duty: Apache Hive Metastore, Apache Ranger, Apache Atlas=cdp-sdx-medium-ha-710;
        7.1.0 - Streams Messaging Heavy Duty: Apache Kafka, Schema Registry, Streams Messaging Manager=cdp-streaming-710;
        7.1.0 - Streams Messaging Light Duty: Apache Kafka, Schema Registry, Streams Messaging Manager=cdp-streaming-small-710;
        7.1.1 - Data Engineering: Apache Spark, Apache Hive, Apache Oozie=cdp-data-engineering-711;
        7.1.1 - Data Engineering: HA: Apache Spark, Apache Hive, Apache Oozie=cdp-data-engineering-ha-711;
        7.1.1 - Data Mart: Apache Impala, Hue=cdp-data-mart-711;
        7.1.1 - Real-time Data Mart: Apache Impala, Hue, Apache Kudu, Apache Spark=cdp-rt-data-mart-711;
        7.1.1 - Operational Database: Apache HBase, Phoenix=cdp-opdb-711;
        7.1.1 - SDX Light Duty: Apache Hive Metastore, Apache Ranger, Apache Atlas=cdp-sdx-711;
        7.1.1 - SDX Medium Duty: Apache Hive Metastore, Apache Ranger, Apache Atlas=cdp-sdx-medium-ha-711;
        7.1.1 - Streams Messaging Heavy Duty: Apache Kafka, Schema Registry, Streams Messaging Manager=cdp-streaming-711;
        7.1.1 - Streams Messaging Light Duty: Apache Kafka, Schema Registry, Streams Messaging Manager=cdp-streaming-small-711;
        7.2.0 - Data Engineering: Apache Spark, Apache Hive, Apache Oozie=cdp-data-engineering-720;
        7.2.0 - Data Engineering: HA: Apache Spark, Apache Hive, Apache Oozie=cdp-data-engineering-ha-720;
        7.2.0 - Data Engineering: Apache Spark3=cdp-data-engineering-spark3-720;
        7.2.0 - Data Mart: Apache Impala, Hue=cdp-data-mart-720;
        7.2.0 - Real-time Data Mart: Apache Impala, Hue, Apache Kudu, Apache Spark=cdp-rt-data-mart-720;
        7.2.0 - Operational Database: Apache HBase, Phoenix=cdp-opdb-720;
        7.2.0 - SDX Light Duty: Apache Hive Metastore, Apache Ranger, Apache Atlas=cdp-sdx-720;
        7.2.0 - SDX Medium Duty: Apache Hive Metastore, Apache Ranger, Apache Atlas=cdp-sdx-medium-ha-720;
        7.2.0 - Streams Messaging Heavy Duty: Apache Kafka, Schema Registry, Streams Messaging Manager=cdp-streaming-720;
        7.2.0 - Streams Messaging Light Duty: Apache Kafka, Schema Registry, Streams Messaging Manager=cdp-streaming-small-720;
        7.2.0 - Flow Management Light Duty with Apache NiFi, Apache NiFi Registry=cdp-flow-management-small-720;
        7.2.0 - Flow Management Heavy Duty with Apache NiFi, Apache NiFi Registry=cdp-flow-management-720;

  clustertemplate.defaults:
  template.defaults: minviable-gcp,minviable-azure-managed-disks,minviable-aws
  custom.user.data: |
    touch /tmp/custom-user-data
    date >> /tmp/custom-user-data

  mail:
    smtp:
      auth: true
      type: smtp
      starttls.enable: true
  success.cluster.installer.mail.template.path: templates/cluster-installer-mail-success.ftl
  failed.cluster.installer.mail.template.path: templates/cluster-installer-mail-fail.ftl

  arm:
    template.path: templates/arm-v2.ftl
    network.template.path: templates/arm-network.ftl
    parameter.path: templates/parameters.ftl
    database.template.path: templates/arm-database.ftl
    app.creation.template:
      command.path: templates/app-creation-command.ftl
      json.path: templates/app-creation.json
      resource:
        app.id: 797f4846-ba00-4fd7-ba43-dac1f8f63013
        access.scope.id: 41094075-9dad-400e-a0bd-54e686782033


  openstack:
    heat.template.path: templates/openstack-heat.ftl
    api.debug: false
    hostkey.verify: false

  max:
    azure.resource.name.length: 120
    gcp.resource.name.length: 63
    aws.resource.name.length: 50
    openstack.resource.name.length: 120
    yarn.resource.name.length: 63

    salt.new.service.retry: 180
    salt.new.service.leave.retry: 10
    salt.new.service.retry.onerror: 20
    salt.recipe.execution.retry: 180

  address.resolving.timeout: 60000

  cloud.api.executorservice.pool.size: 40
  reactor.executorservice.pool.size: 40

  platform.default:
    variants: OPENSTACK:HEAT
    regions: AWS:eu-west-1,AZURE:North Europe,GCP:europe-west1,YARN:default,MOCK:USA

  gcp:
    hostkey.verify: false
    disk.encryption.url: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem
    stopStart.batch.size: 10
    create.batch.size: 5

  nginx:
    port: 9443
  https:
    port: 443
  ssh:
    port: 22

  hive.database:
    user: hive
    db: hive
    port: 5432

  ranger.database:
    user: ranger
    db: ranger
    port: 5432

  profiler.admin.database:
    user: profiler_agent
    db: profiler_agent
    port: 5432

  profiler.metrics.database:
    user: profiler_metric
    db: profiler_metric
    port: 5432

  cm:
    admin.role: "ROLE_ADMIN"
    limited.admin.role: "ROLE_LIMITED_CLUSTER_ADMIN"
    user.role: "ROLE_USER"
    heartbeat.interval: 3
    missed.heartbeat.interval: 30

  clouderamanager:
    entries:
      6.1:
        version: 6.1.1
        repo:
          redhat7:
            baseurl: https://archive.cloudera.com/cm6/6.1.1/redhat7/yum/
            gpgkey: https://archive.cloudera.com/cm6/6.1.1/redhat7/yum/RPM-GPG-KEY-cloudera
      6.2:
        version: 6.2.0
        repo:
          redhat7:
            baseurl: https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/
            gpgkey: https://archive.cloudera.com/cm6/6.2.0/redhat7/yum/RPM-GPG-KEY-cloudera
      7.0:
        version: 7.0.2
        repo:
          redhat7:
            baseurl: http://cloudera-build-us-west-1.vpc.cloudera.com/s3/build/1717199/cm7/7.0.2/redhat7/yum/
          centos7:
            baseurl: http://cloudera-build-us-west-1.vpc.cloudera.com/s3/build/1717199/cm7/7.0.2/redhat7/yum/
      7.1:
        version: 7.1.0
        repo:
          redhat7:
            baseurl: http://cloudera-build-us-west-1.vpc.cloudera.com/s3/build/2365123/cm7/7.1.0/redhat7/yum/
          centos7:
            baseurl: http://cloudera-build-us-west-1.vpc.cloudera.com/s3/build/2365123/cm7/7.1.0/redhat7/yum/

  cdh:
    entries:
      "[6.1.0]":
        version: 6.1.0-1.cdh6.1.0.p0.770702
        minCM: 6.1
        repo:
          stack:
            repoid: CDH-6.1.0
            redhat7: https://archive.cloudera.com/cdh6/6.1.0/parcels/
      "[6.1.1]":
        version: 6.1.1-1.cdh6.1.1.p0.875250
        minCM: 6.1
        repo:
          stack:
            repoid: CDH-6.1.1
            redhat7: https://archive.cloudera.com/cdh6/6.1.1/parcels/
      "[6.2.0]":
        version: 6.2.0-1.cdh6.2.0.p0.967373
        minCM: 6.2
        repo:
          stack:
            repoid: CDH-6.2.0
            redhat7: https://archive.cloudera.com/cdh6/6.2.0/parcels/
      "[7.0.1]":
        version: 7.0.1-1.cdh7.0.1.p0.1454941
        minCM: 7.0
        repo:
          stack:
            repoid: CDH-7.0.1
            redhat7: http://cloudera-build-us-west-1.vpc.cloudera.com/s3/build/1454941/cdh/7.x/parcels/
            centos7: http://cloudera-build-us-west-1.vpc.cloudera.com/s3/build/1454941/cdh/7.x/parcels/
      "[7.0.2]":
        version: 7.0.2-1.cdh7.0.2.p2.1711788
        minCM: 7.0
        repo:
          stack:
            repoid: CDH-7.0.2
            redhat7: http://cloudera-build-us-west-1.vpc.cloudera.com/s3/build/1711788/cdh/7.x/parcels/
            centos7: http://cloudera-build-us-west-1.vpc.cloudera.com/s3/build/1711788/cdh/7.x/parcels/
      "[7.1.0]":
        version: 7.1.0-1.cdh7.1.0.p0.1922354
        minCM: 7.1
        repo:
          stack:
            repoid: CDH-7.1.0
            redhat7: http://cloudera-build-us-west-1.vpc.cloudera.com/s3/build/1922354/cdh/7.x/parcels/
            centos7: http://cloudera-build-us-west-1.vpc.cloudera.com/s3/build/1922354/cdh/7.x/parcels/

  workspace.service.cache.ttl: 15

  structuredevent:
    rest:
      enabled: true
      contentlogging: true

  image.catalog:
    url: https://cloudbreak-imagecatalog.s3.amazonaws.com/v3-dev-cb-image-catalog.json
    cache.ttl: 15
    legacy.enabled: true

  instance:
    packages:
      - name: salt
        prewarmed: false
        grain: saltversion
      - name: salt-bootstrap
        prewarmed: false
        command: "salt-bootstrap version"
        commandVersionPattern: "Version: (.*)"
      - name: stack
        command: "cat /var/lib/cloudera-scm-agent/active_parcels.json | jq -r '.CDH'"
        commandVersionPattern: "(.*)-.*"
        prewarmed: true
      - name: cm
        pkg:
          - name: cloudera-manager-agent
            pattern: "(.*)-.*"
        prewarmed: true

clusterProxy:
  url: http://localhost:10180/cluster-proxy
  enabled: true
  registerConfigPath: /rpc/forceRegisterConfig
  updateConfigPath: /rpc/updateConfig
  removeConfigPath: /rpc/removeConfig

gateway:
  cert:
    generation.enabled: false
    polling:
      attempt: 50
      intervall: 10
    base.domain.name: cloudera.com
