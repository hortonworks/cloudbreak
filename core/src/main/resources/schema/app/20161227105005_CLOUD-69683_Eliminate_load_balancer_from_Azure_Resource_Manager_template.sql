-- // CLOUD-69683 Eliminate load balancer from Azure Resource Manager template
-- Migration SQL that makes the change goes here.

INSERT INTO component (componenttype, name, stack_id, attributes) SELECT 'STACK_TEMPLATE', 'STACK_TEMPLATE', stack_id, '{ "cbVersion": "1.11", "template": "<#setting number_format=\"computer\">\nheat_template_version: 2014-10-16\n\ndescription: >\n  Heat template for Cloudbreak\n\nparameters:\n\n  key_name:\n    type: string\n    description : Name of a KeyPair to enable SSH access to the instance\n  image_id:\n    type: string\n    description: ID of the image\n  app_net_cidr:\n    type: string\n    description: app network address (CIDR notation)\n  <#if network.assignFloatingIp>\n  public_net_id:\n    type: string\n    description: The ID of the public network. You will need to replace it with your DevStack public network ID\n  </#if>\n  <#if existingNetwork>\n  app_net_id:\n    type: string\n    description: ID of the custom network\n  </#if>\n  <#if existingNetwork && !existingSubnet>\n  router_id:\n    type: string\n    description: ID of the custom router which belongs to the custom network\n  </#if>\n  <#if existingSubnet>\n  subnet_id:\n    type: string\n    description: ID of the custom subnet which belongs to the custom network\n  </#if>\n\nresources:\n\n  <#if !network.providerNetwork>\n  <#if !existingNetwork>\n  app_network:\n      type: OS::Neutron::Net\n      properties:\n        admin_state_up: true\n        name: app_network\n  </#if>\n\n  <#if !existingSubnet>\n  app_subnet:\n      type: OS::Neutron::Subnet\n      properties:\n        <#if existingNetwork>\n        network_id: { get_param: app_net_id }\n        <#else>\n        network_id: { get_resource: app_network }\n        </#if>\n        cidr: { get_param: app_net_cidr }\n  </#if>\n\n  <#if !existingNetwork>\n  router:\n      type: OS::Neutron::Router\n\n  router_gateway:\n      type: OS::Neutron::RouterGateway\n      properties:\n        router_id: { get_resource: router }\n        <#if network.assignFloatingIp>\n        network_id: { get_param: public_net_id }\n        </#if>\n  </#if>\n\n  <#if !existingSubnet>\n  router_interface:\n      type: OS::Neutron::RouterInterface\n      properties:\n        <#if existingNetwork>\n        router_id: { get_param: router_id }\n        <#else>\n        router_id: { get_resource: router }\n        </#if>\n        subnet_id: { get_resource: app_subnet }\n  </#if>\n  </#if>\n\n  gw_user_data_config:\n      type: OS::Heat::SoftwareConfig\n      properties:\n        config: |\n${gateway_user_data}\n\n  core_user_data_config:\n      type: OS::Heat::SoftwareConfig\n      properties:\n        config: |\n${core_user_data}\n\n  <#list agents as agent>\n\n  ambari_${agent.instanceId}:\n    type: OS::Nova::Server\n    properties:\n      image: { get_param: image_id }\n      name: ${agent.name}\n      flavor: ${agent.flavor}\n      <#if availability_zone?has_content>\n      availability_zone : ${availability_zone}\n      </#if>\n      key_name: { get_param: key_name }\n      metadata: ${agent.metadata}\n      networks:\n        - port: { get_resource: ambari_app_port_${agent.instanceId} }\n      <#if agent.volumesCount != 0>\n      block_device_mapping:\n      <#list agent.volumes as volume>\n        - device_name: ${volume.device}\n          volume_id: { get_resource: ambari_volume_${agent.instanceId}_${volume_index} }\n      </#list>\n      </#if>\n      user_data_format: SOFTWARE_CONFIG\n      <#if agent.type == \"GATEWAY\">\n      user_data:  { get_resource: gw_user_data_config }\n      <#elseif agent.type == \"CORE\">\n      user_data:  { get_resource: core_user_data_config }\n      </#if>\n\n  <#list agent.volumes as volume>\n\n  ambari_volume_${agent.instanceId}_${volume_index}:\n    type: OS::Cinder::Volume\n    properties:\n      name: hdfs-volume\n      size: ${volume.size}\n\n  </#list>\n\n  ambari_app_port_${agent.instanceId}:\n    type: OS::Neutron::Port\n    properties:\n      <#if existingNetwork>\n      network_id: { get_param: app_net_id }\n      <#else>\n      network_id: { get_resource: app_network }\n      </#if>\n      replacement_policy: AUTO\n      <#if !network.providerNetwork>\n      fixed_ips:\n      <#if existingSubnet>\n        - subnet_id: { get_param: subnet_id }\n      <#else>\n        - subnet_id: { get_resource: app_subnet }\n      </#if>\n      </#if>\n      security_groups: [ { get_resource: security_group_${agent.instance.groupName} } ]\n\n  <#if network.assignFloatingIp>\n  ambari_server_floatingip_${agent.instanceId}:\n    type: OS::Neutron::FloatingIP\n    properties:\n      floating_network_id: { get_param: public_net_id }\n      port_id: { get_resource: ambari_app_port_${agent.instanceId} }\n  </#if>\n  </#list>\n\n  <#list groups as group>\n\n  security_group_${group.name}:\n    type: OS::Neutron::SecurityGroup\n    properties:\n      description: Cloudbreak security group\n      name: cb-sec-group_${cb_stack_name}_${group.name}\n      rules: [\n        <#list group.security.rules as r>\n        <#list r.getPorts() as p>\n        {remote_ip_prefix: ${r.cidr},\n        protocol: ${r.protocol},\n        port_range_min: ${p},\n        port_range_max: ${p}},\n        </#list>\n        </#list>\n        {remote_ip_prefix: { get_param: app_net_cidr },\n        protocol: tcp,\n        port_range_min: 1,\n        port_range_max: 65535},\n        {remote_ip_prefix: { get_param: app_net_cidr },\n        protocol: udp,\n        port_range_min: 1,\n        port_range_max: 65535},\n        {remote_ip_prefix: 0.0.0.0/0,\n        protocol: icmp}]\n\n  </#list>\n\noutputs:\n  <#list agents as agent>\n  instance_uuid_${agent.instanceId}:\n    value: { get_attr: [ambari_${agent.instanceId}, show, id] }\n  </#list>"}' FROM stack INNER JOIN stackstatus ON stack.stackstatus_id = stackstatus.id WHERE stack.cloudplatform = 'OPENSTACK' AND stackstatus.status != 'DELETE_COMPLETED';

INSERT INTO component (componenttype, name, stack_id, attributes) SELECT 'STACK_TEMPLATE', 'STACK_TEMPLATE', stack_id, '{ "cbVersion": "1.11", "template": "<#setting number_format=\"computer\">\n{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n\n  \"Description\" : \"Deploys a Hortonworks Data Platform cluster on AWS.\",\n\n  \"Parameters\" : {\n\n    \"StackName\" : {\n      \"Description\" : \"Name of the CloudFormation stack that is used to tag instances\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"50\"\n    },\n\n    <#if enableInstanceProfile && existingRole>\n     \"InstanceProfile\" : {\n          \"Description\" : \"InstanceProfile name or ARN that is assigned to every virtual machine\",\n          \"Type\" : \"String\"\n     },\n    </#if>\n\n    <#if existingVPC>\n    \"VPCId\" : {\n      \"Description\" : \"Id of the VPC where to deploy the cluster\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"12\",\n      \"MaxLength\": \"12\",\n      \"AllowedPattern\" : \"vpc-[a-z0-9]{8}\"\n    },\n\n    <#if !existingSubnet>\n    \"SubnetCIDR\" : {\n      \"Description\" : \"IP address range in the securityRule specified as CIDR notation\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"9\",\n      \"MaxLength\": \"18\",\n      \"AllowedPattern\" : \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\"\n    },\n\n    <#else>\n    \"SubnetId\" : {\n      \"Description\" : \"Id of the Subnet within the existing VPC where to deploy the cluster\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"15\",\n      \"MaxLength\": \"255\",\n      \"AllowedPattern\" : \"subnet-[a-z0-9]{8}(?:,subnet-[a-z0-9]{8})*\"\n    },\n    </#if>\n\n    <#if existingIGW>\n    \"InternetGatewayId\" : {\n       \"Description\" : \"Id of the internet gateway used by the VPC\",\n       \"Type\" : \"String\",\n       \"MinLength\": \"12\",\n       \"MaxLength\": \"12\",\n       \"AllowedPattern\" : \"igw-[a-z0-9]{8}\"\n    },\n    </#if>\n\n    </#if>\n\n    <#if availabilitySetNeeded>\n    \"AvailabilitySet\" : {\n      \"Description\" : \"Availability set name\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"50\"\n    },\n    </#if>\n\n    \"StackOwner\" : {\n      \"Description\" : \"The instances will have this parameter as an Owner tag.\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"50\"\n    },\n\n    \"CBUserData\" : {\n      \"Description\" : \"User data to be executed\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"9\",\n      \"MaxLength\": \"50000\"\n    },\n\n    \"CBGateWayUserData\" : {\n      \"Description\" : \"Gateway user data to be executed\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"9\",\n      \"MaxLength\": \"50000\"\n    },\n\n    \"KeyName\": {\n      \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"255\",\n      \"AllowedPattern\" : \"[\\\\x20-\\\\x7E]*\",\n      \"ConstraintDescription\" : \"can contain only ASCII characters.\"\n    },\n\n    \"AMI\" : {\n      \"Description\" : \"AMI that''s used to start instances\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"12\",\n      \"MaxLength\": \"12\",\n      \"AllowedPattern\" : \"ami-[a-z0-9]{8}\",\n      \"ConstraintDescription\" : \"must follow pattern: ami-xxxxxxxx\"\n    },\n\n    \"RootDeviceName\" : {\n      \"Description\" : \"Name of the root device that comes with the AMI\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"8\",\n      \"MaxLength\": \"12\"\n    }\n\n  },\n\n  <#if !existingVPC>\n  \"Mappings\" : {\n    \"SubnetConfig\" : {\n      \"VPC\"     : { \"CIDR\" : \"${cbSubnet?first}\" },\n      \"Public\"  : { \"CIDR\" : \"${cbSubnet?first}\" }\n    }\n  },\n  </#if>\n\n  \"Resources\" : {\n\n  <#if enableInstanceProfile && !existingRole>\n        \"S3AccessRole\" : {\n            \"Type\"  : \"AWS::IAM::Role\",\n            \"Properties\" : {\n                \"AssumeRolePolicyDocument\" : {\n                    \"Statement\" : [ {\n                        \"Effect\" : \"Allow\",\n                        \"Principal\" : {\n                            \"Service\" : [ \"ec2.amazonaws.com\" ]\n                        },\n                        \"Action\" : [ \"sts:AssumeRole\" ]\n                    } ]\n                },\n                \"Path\" : \"/\"\n            }\n        },\n\n        \"S3RolePolicies\" : {\n            \"Type\" : \"AWS::IAM::Policy\",\n            \"Properties\" : {\n                \"PolicyName\" : \"s3access\",\n                \"PolicyDocument\" : {\n                    \"Statement\" : [ {\n                        \"Effect\" : \"Allow\",\n                        \"Action\" : \"s3:*\",\n                        \"Resource\" : \"*\"\n                    }]\n                },\n                \"Roles\" : [ { \"Ref\" : \"S3AccessRole\" } ]\n            }\n        },\n\n        \"S3InstanceProfile\" : {\n            \"Type\" : \"AWS::IAM::InstanceProfile\",\n            \"Properties\" : {\n                \"Path\" : \"/\",\n                \"Roles\" : [ { \"Ref\" : \"S3AccessRole\" } ]\n            }\n        },\n    </#if>\n\n    <#if mapPublicIpOnLaunch>\n    \"EIP\" : {\n       \"Type\" : \"AWS::EC2::EIP\",\n       \"Properties\" : {\n          \"Domain\" : \"vpc\"\n       }\n    },\n    </#if>\n\n    <#if !existingVPC>\n    \"VPC\" : {\n      \"Type\" : \"AWS::EC2::VPC\",\n      \"Properties\" : {\n        \"CidrBlock\" : { \"Fn::FindInMap\" : [ \"SubnetConfig\", \"VPC\", \"CIDR\" ]},\n        \"EnableDnsSupport\" : \"true\",\n        \"EnableDnsHostnames\" : \"true\",\n        <#if dedicatedInstances>\n        \"InstanceTenancy\": \"dedicated\",\n        </#if>\n        \"Tags\" : [\n          { \"Key\" : \"Application\", \"Value\" : { \"Ref\" : \"AWS::StackId\" } },\n          { \"Key\" : \"Network\", \"Value\" : \"Public\" }\n        ]\n      }\n    },\n    </#if>\n\n    <#if !existingSubnet>\n    \"PublicSubnet\" : {\n      \"Type\" : \"AWS::EC2::Subnet\",\n      \"Properties\" : {\n        \"MapPublicIpOnLaunch\" : true,\n        <#if existingVPC>\n        \"VpcId\" : { \"Ref\" : \"VPCId\" },\n        \"CidrBlock\" : { \"Ref\" : \"SubnetCIDR\" },\n        <#else>\n        <#if availabilitySetNeeded>\n        \"AvailabilityZone\" : {\"Fn::Join\" : [\"\",[ { \"Ref\" : \"AvailabilitySet\" } ] ]} ,\n        </#if>\n        \"VpcId\" : { \"Ref\" : \"VPC\" },\n        \"CidrBlock\" : { \"Fn::FindInMap\" : [ \"SubnetConfig\", \"Public\", \"CIDR\" ]},\n        </#if>\n        \"Tags\" : [\n          { \"Key\" : \"Application\", \"Value\" : { \"Ref\" : \"AWS::StackId\" } },\n          { \"Key\" : \"Network\", \"Value\" : \"Public\" }\n        ]\n      }\n    },\n    </#if>\n\n    <#if !existingVPC>\n    \"InternetGateway\" : {\n      \"Type\" : \"AWS::EC2::InternetGateway\",\n      \"Properties\" : {\n        \"Tags\" : [\n          { \"Key\" : \"Application\", \"Value\" : { \"Ref\" : \"AWS::StackId\" } },\n          { \"Key\" : \"Network\", \"Value\" : \"Public\" }\n        ]\n      }\n    },\n\n    <#if !existingIGW>\n    \"AttachGateway\" : {\n       \"Type\" : \"AWS::EC2::VPCGatewayAttachment\",\n       \"Properties\" : {\n         \"VpcId\" : { \"Ref\" : \"VPC\" },\n         \"InternetGatewayId\" : { \"Ref\" : \"InternetGateway\" }\n       }\n    },\n    </#if>\n\n    </#if>\n\n\t<#if !existingSubnet>\n    \"PublicRouteTable\" : {\n      \"Type\" : \"AWS::EC2::RouteTable\",\n      \"Properties\" : {\n        <#if existingVPC>\n        \"VpcId\" : { \"Ref\" : \"VPCId\" },\n        <#else>\n        \"VpcId\" : { \"Ref\" : \"VPC\" },\n        </#if>\n        \"Tags\" : [\n          { \"Key\" : \"Application\", \"Value\" : { \"Ref\" : \"AWS::StackId\" } },\n          { \"Key\" : \"Network\", \"Value\" : \"Public\" }\n        ]\n      }\n    },\n\n    \"PublicRoute\" : {\n          \"Type\" : \"AWS::EC2::Route\",\n          <#if existingVPC>\n          \"DependsOn\" : \"PublicRouteTable\",\n          <#else>\n          \"DependsOn\" : [ \"PublicRouteTable\", \"AttachGateway\" ],\n          </#if>\n          \"Properties\" : {\n            \"RouteTableId\" : { \"Ref\" : \"PublicRouteTable\" },\n            \"DestinationCidrBlock\" : \"0.0.0.0/0\",\n            <#if existingVPC>\n            \"GatewayId\" : { \"Ref\" : \"InternetGatewayId\" }\n            <#else>\n            \"GatewayId\" : { \"Ref\" : \"InternetGateway\" }\n            </#if>\n          }\n    },\n\n    \"PublicSubnetRouteTableAssociation\" : {\n      \"Type\" : \"AWS::EC2::SubnetRouteTableAssociation\",\n      \"Properties\" : {\n        \"SubnetId\" : { \"Ref\" : \"PublicSubnet\" },\n        \"RouteTableId\" : { \"Ref\" : \"PublicRouteTable\" }\n      }\n    },\n    </#if>\n\n    <#list instanceGroups as group>\n\t\"AmbariNodes${group.groupName?replace(''_'', '''')}\" : {\n      \"Type\" : \"AWS::AutoScaling::AutoScalingGroup\",\n      <#if !existingSubnet>\n      \"DependsOn\" : [ \"PublicSubnetRouteTableAssociation\", \"PublicRoute\" ],\n      </#if>\n      \"Properties\" : {\n        <#if !existingSubnet>\n        \"AvailabilityZones\" : [{ \"Fn::GetAtt\" : [ \"PublicSubnet\", \"AvailabilityZone\" ] }],\n        \"VPCZoneIdentifier\" : [{ \"Ref\" : \"PublicSubnet\" }],\n        <#else>\n        \"VPCZoneIdentifier\" : [{ \"Ref\" : \"SubnetId\" }],\n        </#if>\n        \"LaunchConfigurationName\" : { \"Ref\" : \"AmbariNodeLaunchConfig${group.groupName?replace(''_'', '''')}\" },\n        \"MinSize\" : 0,\n        \"MaxSize\" : ${group.instanceCount},\n        \"DesiredCapacity\" : ${group.instanceCount},\n        \"Tags\" : [ { \"Key\" : \"Name\", \"Value\" : { \"Fn::Join\" : [\"-\", [ { \"Ref\" : \"StackName\" }, \"${group.groupName}\"]] }, \"PropagateAtLaunch\" : \"true\" },\n        \t\t   { \"Key\" : \"owner\", \"Value\" : { \"Ref\" : \"StackOwner\" }, \"PropagateAtLaunch\" : \"true\" },\n        \t\t   { \"Key\" : \"instanceGroup\", \"Value\" : \"${group.groupName}\", \"PropagateAtLaunch\" : \"true\" }]\n      }\n    },\n\n    \"AmbariNodeLaunchConfig${group.groupName?replace(''_'', '''')}\"  : {\n      \"Type\" : \"AWS::AutoScaling::LaunchConfiguration\",\n      \"Properties\" : {\n        <#if group.ebsOptimized == true>\n        \"EbsOptimized\" : \"true\",\n        </#if>\n        <#if enableInstanceProfile && !existingRole>\n        \"IamInstanceProfile\" : { \"Ref\": \"S3InstanceProfile\" },\n        </#if>\n        <#if existingRole && enableInstanceProfile>\n        \"IamInstanceProfile\" : { \"Ref\": \"InstanceProfile\" },\n        </#if>\n      \t\"BlockDeviceMappings\" : [\n      \t  {\n            \"DeviceName\" : { \"Ref\" : \"RootDeviceName\" },\n            \"Ebs\" : {\n              \"VolumeSize\" : \"50\",\n              \"VolumeType\" : \"gp2\"\n            }\n          }\n\t\t  <#assign seq = [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]>\n\t\t\t<#list seq as x>\n\t\t\t<#if x_index = group.volumeCount><#break></#if>\n  \t\t  ,{\n          \t\"DeviceName\" : \"/dev/xvd${x}\",\n          \t<#if group.volumeType == \"ephemeral\">\n            \"VirtualName\" : \"ephemeral${x_index}\"\n            <#else>\n            \"Ebs\" : {\n            <#if group.ebsEncrypted == true>\n              \"SnapshotId\" : \"${snapshotId}\",\n            </#if>\n              \"VolumeSize\" : ${group.volumeSize},\n              \"VolumeType\" : \"${group.volumeType}\"\n            }\n            </#if>\n      \t  }\n\t\t\t</#list>\n      \t],\n        \"ImageId\"        : { \"Ref\" : \"AMI\" },\n        \"SecurityGroups\" : [ { \"Ref\" : \"ClusterNodeSecurityGroup${group.groupName?replace(''_'', '''')}\" } ],\n        \"InstanceType\"   : \"${group.flavor}\",\n        \"KeyName\"        : { \"Ref\" : \"KeyName\" },\n        <#if group.spotPrice??>\n        \"SpotPrice\"      : \"${group.spotPrice}\",\n        </#if>\n        <#if group.type == \"CORE\">\n        \"UserData\"       : { \"Fn::Base64\" : { \"Ref\" : \"CBUserData\"}}\n        </#if>\n        <#if group.type == \"GATEWAY\">\n        \"UserData\"       : { \"Fn::Base64\" : { \"Ref\" : \"CBGateWayUserData\"}}\n        </#if>\n      }\n    },\n\n    \"ClusterNodeSecurityGroup${group.groupName?replace(''_'', '''')}\" : {\n      \"Type\" : \"AWS::EC2::SecurityGroup\",\n      \"Properties\" : {\n        \"GroupDescription\" : \"Allow access from web and bastion as well as outbound HTTP and HTTPS traffic\",\n        <#if existingVPC>\n        \"VpcId\" : { \"Ref\" : \"VPCId\" },\n        <#else>\n        \"VpcId\" : { \"Ref\" : \"VPC\" },\n        </#if>\n        \"SecurityGroupIngress\" : [\n          <#if defaultInboundSecurityGroup??>\n              { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"SourceSecurityGroupId\" : \"${defaultInboundSecurityGroup}\"} ,\n              { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"${gatewayPort}\", \"ToPort\" : \"${gatewayPort}\", \"SourceSecurityGroupId\" : \"${defaultInboundSecurityGroup}\"},\n          </#if>\n          <#if cloudbreakPublicIp??>\n              { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : \"${cloudbreakPublicIp}/32\"} ,\n              { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"${gatewayPort}\", \"ToPort\" : \"${gatewayPort}\", \"CidrIp\" : \"${cloudbreakPublicIp}/32\"},\n          </#if>\n          <#list group.rules as r>\n            <#list r.ports as p>\n              { \"IpProtocol\" : \"${r.protocol}\", \"FromPort\" : \"${p}\", \"ToPort\" : \"${p}\", \"CidrIp\" : \"${r.cidr}\"} ,\n            </#list>\n\t\t  </#list>\n          <#list cbSubnet as s>\n              { \"IpProtocol\" : \"icmp\", \"FromPort\" : \"-1\", \"ToPort\" : \"-1\", \"CidrIp\" : \"${s}\"} ,\n              { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"0\", \"ToPort\" : \"65535\", \"CidrIp\" : \"${s}\"} ,\n              { \"IpProtocol\" : \"udp\", \"FromPort\" : \"0\", \"ToPort\" : \"65535\", \"CidrIp\" : \"${s}\"}<#if (s_index + 1) != cbSubnet?size> ,</#if>\n          </#list>\n        ]\n      }\n    }<#if (group_index + 1) != instanceGroups?size>,</#if>\n    </#list>\n  }\n\n  <#if mapPublicIpOnLaunch>\n  ,\n  \"Outputs\" : {\n    \"AmbariUrl\" : {\n        \"Value\" : { \"Fn::Join\" : [\"\", [\"https://\", { \"Ref\" : \"EIP\" }, \"/ambari/\"]] }\n    },\n    \"EIPAllocationID\" : {\n        \"Value\" : {\"Fn::GetAtt\" : [ \"EIP\" , \"AllocationId\" ]}\n    }\n  }\n  </#if>\n\n}"}' FROM stack INNER JOIN stackstatus ON stack.stackstatus_id = stackstatus.id WHERE stack.cloudplatform = 'AWS' AND stackstatus.status != 'DELETE_COMPLETED';

INSERT INTO component (componenttype, name, stack_id, attributes) SELECT 'STACK_TEMPLATE', 'STACK_TEMPLATE', stack_id, '{ "cbVersion": "1.11", "template": "<#setting number_format=\"computer\">\n{\n    \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\" : {\n        \"userImageStorageAccountName\": {\n            \"type\": \"string\",\n            \"defaultValue\" : \"${storage_account_name}\"\n        },\n        \"userImageStorageContainerName\" : {\n            \"type\" : \"string\",\n            \"defaultValue\" : \"${image_storage_container_name}\"\n        },\n        \"userDataStorageContainerName\" : {\n            \"type\" : \"string\",\n            \"defaultValue\" : \"${storage_container_name}\"\n        },\n        \"userImageVhdName\" : {\n            \"type\" : \"string\",\n            \"defaultValue\" : \"${storage_vhd_name}\"\n        },\n        \"adminUsername\" : {\n          \"type\" : \"string\",\n          \"defaultValue\" : \"${credential.loginUserName}\"\n        },\n        <#if existingVPC>\n        \"resourceGroupName\" : {\n          \"type\": \"string\",\n          \"defaultValue\" : \"${resourceGroupName}\"\n        },\n        \"existingVNETName\" : {\n          \"type\": \"string\",\n          \"defaultValue\" : \"${existingVNETName}\"\n        },\n        \"existingSubnetName\" : {\n          \"type\": \"string\",\n          \"defaultValue\" : \"${existingSubnetName}\"\n        },\n        <#else>\n        \"virtualNetworkNamePrefix\" : {\n            \"type\": \"string\",\n            \"defaultValue\" : \"${stackname}\"\n        },\n        </#if>\n        \"vmNamePrefix\" :{\n            \"type\": \"string\",\n            \"defaultValue\" : \"${stackname}\"\n        },\n        \"publicIPNamePrefix\" :{\n            \"type\": \"string\",\n            \"defaultValue\" : \"${stackname}\"\n        },\n        \"nicNamePrefix\" : {\n            \"type\": \"string\",\n            \"defaultValue\" : \"${stackname}\"\n        },\n        \"sshKeyData\" : {\n            \"type\" : \"string\",\n            \"defaultValue\" : \"${credential.publicKey}\"\n        },\n        \"loadBalancerName\" : {\n            \"type\" : \"string\",\n            \"defaultValue\" : \"${stackname}lb\"\n        },\n        \"region\" : {\n          \"type\" : \"string\",\n          \"defaultValue\" : \"${region}\"\n        },\n        \"subnet1Name\": {\n            \"type\": \"string\",\n            \"defaultValue\": \"${stackname}subnet\"\n        },\n        <#if !existingVPC>\n        \"subnet1Prefix\": {\n           \"type\": \"string\",\n           \"defaultValue\": \"${subnet1Prefix}\"\n        },\n        </#if>\n        <#list groups?keys as instanceGroup>\n        <#list groups[instanceGroup] as instance>\n        <#if instanceGroup == \"GATEWAY\">\n        \"gatewaystaticipname\": {\n            \"type\": \"string\",\n            \"defaultValue\": \"${stackname}${instance.instanceId}\"\n        },\n        </#if>\n        </#list>\n        </#list>\n        \"sshIPConfigName\": {\n            \"type\": \"string\",\n            \"defaultValue\": \"${stackname}ipcn\"\n        }\n    },\n  \t\"variables\" : {\n      \"userImageName\" : \"[concat(''https://'',parameters(''userImageStorageAccountName''),''.blob.core.windows.net/'',parameters(''userImageStorageContainerName''),''/'',parameters(''userImageVhdName''))]\",\n      \"osDiskVhdName\" : \"[concat(''https://'',parameters(''userImageStorageAccountName''),''.blob.core.windows.net/'',parameters(''userDataStorageContainerName''),''/'',parameters(''vmNamePrefix''),''osDisk'')]\",\n      <#if existingVPC>\n      \"vnetID\": \"[resourceId(parameters(''resourceGroupName''),''Microsoft.Network/virtualNetworks'',parameters(''existingVNETName''))]\",\n      \"subnet1Ref\": \"[concat(variables(''vnetID''),''/subnets/'',parameters(''existingSubnetName''))]\",\n      <#else>\n      \"vnetID\": \"[resourceId(''Microsoft.Network/virtualNetworks'',parameters(''virtualNetworkNamePrefix''))]\",\n      \"subnet1Ref\": \"[concat(variables(''vnetID''),''/subnets/'',parameters(''subnet1Name''))]\",\n      </#if>\n      <#if !noPublicIp>\n      \"staticIpRef\": \"[resourceId(''Microsoft.Network/publicIPAddresses'', parameters(''gatewaystaticipname''))]\",\n      \"ilbBackendAddressPoolName\": \"${stackname}bapn\",\n      \"lbID\": \"[resourceId(''Microsoft.Network/loadBalancers'', parameters(''loadBalancerName''))]\",\n      \"sshIPConfig\": \"[concat(variables(''lbID''),''/frontendIPConfigurations/'', parameters(''sshIPConfigName''))]\",\n      \"ilbBackendAddressPoolID\": \"[concat(variables(''lbID''),''/backendAddressPools/'', variables(''ilbBackendAddressPoolName''))]\",\n      </#if>\n      <#list igs as group>\n      \"${group?replace(''_'', '''')}secGroupName\": \"${group?replace(''_'', '''')}${stackname}sg\",\n      </#list>\n      \"sshKeyPath\" : \"[concat(''/home/'',parameters(''adminUsername''),''/.ssh/authorized_keys'')]\"\n  \t},\n    \"resources\": [\n            <#if !existingVPC>\n            {\n                 \"apiVersion\": \"2015-05-01-preview\",\n                 \"type\": \"Microsoft.Network/virtualNetworks\",\n                 <#if !noFirewallRules>\n                 \"dependsOn\": [\n                    <#list igs as group>\n                        \"[concat(''Microsoft.Network/networkSecurityGroups/'', variables(''${group?replace(''_'', '''')}secGroupName''))]\"<#if (group_index + 1) != igs?size>,</#if>\n                    </#list>\n                 ],\n                 </#if>\n                 \"name\": \"[parameters(''virtualNetworkNamePrefix'')]\",\n                 \"location\": \"[parameters(''region'')]\",\n                 \"properties\": {\n                     \"addressSpace\": {\n                         \"addressPrefixes\": [\n                             \"[parameters(''subnet1Prefix'')]\"\n                         ]\n                     },\n                     \"subnets\": [\n                         {\n                             \"name\": \"[parameters(''subnet1Name'')]\",\n                             \"properties\": {\n                                 \"addressPrefix\": \"[parameters(''subnet1Prefix'')]\"\n                             }\n                         }\n                     ]\n                 }\n             },\n             </#if>\n             <#if !noFirewallRules>\n             <#list igs as group>\n             {\n               \"apiVersion\": \"2015-05-01-preview\",\n               \"type\": \"Microsoft.Network/networkSecurityGroups\",\n               \"name\": \"[variables(''${group?replace(''_'', '''')}secGroupName'')]\",\n               \"location\": \"[parameters(''region'')]\",\n               \"properties\": {\n               \"securityRules\": [\n                   {\n                       \"name\": \"endpoint1outr\",\n                       \"properties\": {\n                           \"protocol\": \"*\",\n                           \"sourcePortRange\": \"*\",\n                           \"destinationPortRange\": \"*\",\n                           \"sourceAddressPrefix\": \"*\",\n                           \"destinationAddressPrefix\": \"*\",\n                           \"access\": \"Allow\",\n                           \"priority\": 101,\n                           \"direction\": \"Outbound\"\n                       }\n                   },\n                   <#list securities[group] as port>\n                   {\n                       \"name\": \"endpoint${port_index}inr\",\n                       \"properties\": {\n                           \"protocol\": \"${port.capitalProtocol}\",\n                           \"sourcePortRange\": \"*\",\n                           \"destinationPortRange\": \"${port.port}\",\n                           \"sourceAddressPrefix\": \"${port.cidr}\",\n                           \"destinationAddressPrefix\": \"*\",\n                           \"access\": \"Allow\",\n                           \"priority\": ${port_index + 102},\n                           \"direction\": \"Inbound\"\n                       }\n                   }<#if (port_index + 1) != securities[group]?size>,</#if>\n                   </#list>\n                   ]\n\n               }\n             },\n             </#list>\n             </#if>\n             <#list groups?keys as instanceGroup>\n             <#list groups[instanceGroup] as instance>\n                 <#if instanceGroup == \"GATEWAY\" && !noPublicIp>\n                 {\n                   \"apiVersion\": \"2015-05-01-preview\",\n                   \"type\": \"Microsoft.Network/publicIPAddresses\",\n                   \"name\": \"[concat(parameters(''publicIPNamePrefix''), ''${instance.instanceId}'')]\",\n                   \"location\": \"[parameters(''region'')]\",\n                   \"properties\": {\n                       \"publicIPAllocationMethod\": \"Static\"\n                   }\n                 },\n                 {\n                    \"apiVersion\": \"2015-05-01-preview\",\n                    \"type\": \"Microsoft.Network/loadBalancers\",\n                    \"name\": \"[parameters(''loadBalancerName'')]\",\n                    \"location\": \"[parameters(''region'')]\",\n                    \"dependsOn\": [\n                        \"[concat(''Microsoft.Network/publicIPAddresses/'', parameters(''publicIPNamePrefix''), ''${instance.instanceId}'')]\"\n                    ],\n                    \"properties\": {\n                        \"frontendIPConfigurations\": [\n                        {\n                            \"name\": \"[parameters(''sshIPConfigName'')]\",\n                            \"properties\": {\n                                \"publicIPAddress\": {\n                                    \"id\": \"[variables(''staticIpRef'')]\"\n                                }\n                            }\n                        }\n                        ],\n                        \"backendAddressPools\": [\n                        {\n                            \"name\": \"[variables(''ilbBackendAddressPoolName'')]\"\n                        }\n                        ]\n                        <#if !noFirewallRules>\n                        ,\"inboundNatRules\": [\n                        <#list securities[instance.groupName] as port>\n                        {\n                            \"name\": \"endpoint${port_index}inr\",\n                            \"properties\": {\n                                \"frontendIPConfiguration\": {\n                                    \"id\": \"[variables(''sshIPConfig'')]\"\n                                },\n                                \"protocol\": \"${port.protocol}\",\n                                \"frontendPort\": \"${port.port}\",\n                                \"backendPort\": \"${port.port}\",\n                                \"enableFloatingIP\": false\n                            }\n                        }<#if (port_index + 1) != securities[instance.groupName]?size>,</#if>\n                        </#list>\n                        ]\n                        </#if>\n                    }\n                 },\n                 </#if>\n                 <#if instanceGroup == \"CORE\" && !noPublicIp>\n                 {\n                   \"apiVersion\": \"2015-05-01-preview\",\n                   \"type\": \"Microsoft.Network/publicIPAddresses\",\n                   \"name\": \"[concat(parameters(''publicIPNamePrefix''), ''${instance.instanceId}'')]\",\n                   \"location\": \"[parameters(''region'')]\",\n                   \"properties\": {\n                       \"publicIPAllocationMethod\": \"Static\"\n                   }\n                 },\n                 </#if>\n                 {\n                   \"apiVersion\": \"2015-05-01-preview\",\n                   \"type\": \"Microsoft.Network/networkInterfaces\",\n                   \"name\": \"[concat(parameters(''nicNamePrefix''), ''${instance.instanceId}'')]\",\n                   \"location\": \"[parameters(''region'')]\",\n                   \"dependsOn\": [\n                       <#if !noFirewallRules>\n                       \"[concat(''Microsoft.Network/networkSecurityGroups/'', variables(''${instance.groupName?replace(''_'', '''')}secGroupName''))]\"\n                       </#if>\n                       <#if !noPublicIp>\n                       <#if !noFirewallRules>,</#if>\n                       <#if instanceGroup == \"CORE\">\n                       \"[concat(''Microsoft.Network/publicIPAddresses/'', parameters(''publicIPNamePrefix''), ''${instance.instanceId}'')]\"\n                       </#if>\n                       <#if instanceGroup == \"GATEWAY\">\n                       \"[concat(''Microsoft.Network/loadBalancers/'', parameters(''loadBalancerName''))]\"\n                       </#if>\n                       </#if>\n                       <#if !existingVPC>\n                       <#if !noFirewallRules || !noPublicIp>,</#if>\n                       \"[concat(''Microsoft.Network/virtualNetworks/'', parameters(''virtualNetworkNamePrefix''))]\"\n                       </#if>\n                   ],\n                   \"properties\": {\n                       <#if !noFirewallRules>\n                       \"networkSecurityGroup\":{\n                            \"id\": \"[resourceId(''Microsoft.Network/networkSecurityGroups/'', variables(''${instance.groupName?replace(''_'', '''')}secGroupName''))]\"\n                       },\n                       </#if>\n                       \"ipConfigurations\": [\n                           {\n                               \"name\": \"ipconfig1\",\n                               \"properties\": {\n                                   \"privateIPAllocationMethod\": \"Dynamic\",\n                                   <#if instanceGroup == \"CORE\" && !noPublicIp>\n                                   \"publicIPAddress\": {\n                                       \"id\": \"[resourceId(''Microsoft.Network/publicIPAddresses'',concat(parameters(''publicIPNamePrefix''), ''${instance.instanceId}''))]\"\n                                   },\n                                   </#if>\n                                   \"subnet\": {\n                                       \"id\": \"[variables(''subnet1Ref'')]\"\n                                   }\n                                   <#if instanceGroup == \"GATEWAY\" && !noPublicIp>\n                                   ,\"loadBalancerBackendAddressPools\": [\n                                       {\n                                           \"id\": \"[variables(''ilbBackendAddressPoolID'')]\"\n                                       }\n                                   ]\n                                   <#if !noFirewallRules>\n                                   ,\"loadBalancerInboundNatRules\": [\n                                   <#list securities[instance.groupName] as port>\n                                       {\n                                           \"id\": \"[concat(variables(''lbID''),''/inboundNatRules/'', ''endpoint${port_index}inr'')]\"\n                                       }<#if (port_index + 1) != securities[instance.groupName]?size>,</#if>\n                                   </#list>\n                                   ]\n                                   </#if>\n                                   </#if>\n                               }\n                           }\n                       ]\n                   }\n                 },\n                 {\n                   \"apiVersion\": \"2015-06-15\",\n                   \"type\": \"Microsoft.Compute/virtualMachines\",\n                   \"name\": \"[concat(parameters(''vmNamePrefix''), ''${instance.instanceId}'')]\",\n                   \"location\": \"[parameters(''region'')]\",\n                   \"dependsOn\": [\n                       \"[concat(''Microsoft.Network/networkInterfaces/'', parameters(''nicNamePrefix''), ''${instance.instanceId}'')]\"\n                   ],\n                   \"properties\": {\n                       \"hardwareProfile\": {\n                           \"vmSize\": \"${instance.flavor}\"\n                       },\n                       \"osProfile\": {\n                           \"computername\": \"${instance.hostName}\",\n                           \"adminUsername\": \"[parameters(''adminUsername'')]\",\n                           <#if disablePasswordAuthentication == false>\n                           \"adminPassword\": \"${credential.password}\",\n                           </#if>\n                           \"linuxConfiguration\": {\n                               \"disablePasswordAuthentication\": \"${disablePasswordAuthentication?c}\",\n                               \"ssh\": {\n                                   \"publicKeys\": [\n                                    <#if disablePasswordAuthentication == true>\n                                       {\n                                           \"path\": \"[variables(''sshKeyPath'')]\",\n                                           \"keyData\": \"[parameters(''sshKeyData'')]\"\n                                       }\n                                    </#if>\n                                   ]\n                               }\n                           },\n                           <#if instanceGroup == \"CORE\">\n                           \"customData\": \"${corecustomData}\"\n                           </#if>\n                           <#if instanceGroup == \"GATEWAY\">\n                           \"customData\": \"${gatewaycustomData}\"\n                           </#if>\n                       },\n                       \"storageProfile\": {\n                           \"osDisk\" : {\n                               \"name\" : \"[concat(parameters(''vmNamePrefix''),''-osDisk'', ''${instance.instanceId}'')]\",\n                               \"osType\" : \"linux\",\n                               \"image\" : {\n                                   \"uri\" : \"[variables(''userImageName'')]\"\n                               },\n                               \"vhd\" : {\n                                   \"uri\" : \"[concat(variables(''osDiskVhdName''), ''${instance.instanceId}'',''.vhd'')]\"\n                               },\n                               \"createOption\": \"FromImage\"\n                           },\n                           \"dataDisks\": [\n                           <#list instance.volumes as volume>\n                               {\n                                   \"name\": \"[concat(''datadisk'', ''${instance.instanceId}'', ''${volume_index}'')]\",\n                                   \"diskSizeGB\": ${volume.size},\n                                   \"lun\":  ${volume_index},\n                                   \"vhd\": {\n                                       \"Uri\": \"[concat(''${instance.attachedDiskStorageUrl}'',parameters(''userDataStorageContainerName''),''/'',parameters(''vmNamePrefix''),''datadisk'',''${instance.instanceId}'', ''${volume_index}'', ''.vhd'')]\"\n                                   },\n                                   \"caching\": \"None\",\n                                   \"createOption\": \"Empty\"\n                               } <#if (volume_index + 1) != instance.volumes?size>,</#if>\n                           </#list>\n                           ]\n                       },\n                       \"networkProfile\": {\n                           \"networkInterfaces\": [\n                               {\n                                   \"id\": \"[resourceId(''Microsoft.Network/networkInterfaces'',concat(parameters(''nicNamePrefix''), ''${instance.instanceId}''))]\"\n                               }\n                           ]\n                       }\n                       <#if instance.bootDiagnosticsEnabled>\n                       ,\"diagnosticsProfile\": {\n                         \"bootDiagnostics\": {\n                           \"enabled\": true,\n                           \"storageUri\": \"${instance.attachedDiskStorageUrl}\"\n                         }\n                       }\n                       </#if>\n                   }\n                 }<#if (instance_index + 1) != groups[instanceGroup]?size>,</#if>\n             </#list>\n             <#if (instanceGroup_index + 1) != groups?size>,</#if>\n             </#list>\n\n     \t]\n}"}' FROM stack INNER JOIN stackstatus ON stack.stackstatus_id = stackstatus.id WHERE stack.cloudplatform = 'AZURE_RM' AND stackstatus.status != 'DELETE_COMPLETED';

-- //@UNDO
-- SQL to undo the change goes here.

DELETE FROM component WHERE component.componenttype = 'STACK_TEMPLATE';
