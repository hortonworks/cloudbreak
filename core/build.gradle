import org.ajoberstar.grgit.Grgit

buildscript {
  repositories {
    maven { url 'http://repo.spring.io/libs-release' }
    mavenCentral()
    mavenLocal()
    jcenter()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath "com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2"
    classpath "gradle.plugin.com.palantir:jacoco-coverage:0.4.0"
    classpath "gradle.plugin.com.github.jk1:gradle-license-report:0.3.4"
  }
}

plugins {
    id "com.palantir.jacoco-full-report" version "0.4.0"
    id "com.github.jk1.dependency-license-report" version "0.3.4"
    id 'net.ltgt.apt' version '0.14'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'info.solidsoft.pitest'
apply plugin: "jacoco"

bootRun {
    systemProperty 'spring.profiles.active', System.properties['spring.profiles.active']
    systemProperty 'spring.config.location', System.properties['spring.config.location']
    systemProperty 'spring.config.additional-location', System.properties['spring.config.additional-location']
    if (project.hasProperty('jvmArgs')) {
        jvmArgs += project.jvmArgs.split("\\s+").toList()
    }
}

springBoot {
    mainClassName = 'com.sequenceiq.cloudbreak.CloudbreakApplication'
}

jar {
    baseName = 'cloudbreak'
    archiveName = 'cloudbreak.jar'
}

bootJar {
    baseName = 'cloudbreak'
    archiveName = 'cloudbreak.jar'
    manifest {
      def grgit = Grgit.open(currentDir: project.projectDir)
      attributes "Implementation-Version": grgit.describe()
    }
}

dependencyManagement {
  dependencies {
    dependencySet(group: 'org.springframework.boot', version: springBootVersion) {
      entry 'spring-boot-starter'
      entry 'spring-boot-starter-web'
      entry 'spring-boot-starter-actuator'
      entry 'spring-boot-starter-data-jpa'
      entry 'spring-boot-starter-websocket'
      entry 'spring-boot-starter-aop'
      entry 'spring-boot-starter-freemarker'
      entry 'spring-boot-starter-security'
      entry 'spring-boot-starter-jersey'
      entry 'spring-boot-starter-test'
      entry 'spring-boot-starter-freemarker'
    }

    dependencySet(group: 'io.projectreactor', version: eventBusVersion) {
      entry 'reactor-core'
      entry 'reactor-bus'
    }

    dependencySet(group: 'io.springfox', version: '2.5.0') {
      entry 'springfox-swagger2'
      entry 'springfox-core'
      entry 'springfox-swagger-ui'
    }

    dependencySet(group: 'org.bouncycastle',  version: bouncycastleVersion) {
      entry 'bcprov-jdk15on'
      entry 'bcpkix-jdk15on'
    }

    dependencySet(group: 'org.mapstruct', version: mapstructVersion) {
      entry 'mapstruct-jdk8'
      entry 'mapstruct-processor'
      entry 'mapstruct-processor'
    }

    dependencySet(group: 'com.jayway.restassured',  version: '2.3.4') {
      entry 'rest-assured'
      entry 'json-path'
    }

    dependencySet(group: 'org.powermock', version: powermockVersion) {
      entry 'powermock-module-junit4'
      entry('powermock-api-mockito2') {
        exclude group: 'org.hamcrest', name: '*'
      }
    }

    dependency (group: 'org.springframework.statemachine',  name: 'spring-statemachine-core',    version: '1.0.1.RELEASE') {
      exclude group: 'org.springframework', name: '*'
    }

    dependency (group: 'com.google.oauth-client',           name: 'google-oauth-client-jetty',   version: '1.22.0') {
      exclude group: '*', name: 'servlet-api'
    }

    dependencySet(group: 'org.junit.jupiter', version: '5.2.0') {
      entry 'junit-jupiter-api'
      entry 'junit-jupiter-engine'
    }
    
    dependency group: 'org.junit.vintage',                  name: 'junit-vintage-engine',        version: '5.2.0'

    dependency group: 'activation',                         name: 'activation',                  version: '1.0.2'

    dependency group: 'com.google.code.findbugs',           name: 'annotations',                 version: '3.0.1'
    dependency group: 'com.google.http-client',             name: 'google-http-client-jackson2', version: '1.22.0'
    dependency group: 'com.icegreen',                       name: 'greenmail',                   version: '1.4.1'
    dependency group: 'com.cedarsoftware',                  name: 'json-io',                     version: '4.9.12'
    dependency group: 'com.thoughtworks.xstream',           name: 'xstream',                     version: '1.4.7'
    dependency group: 'com.github.fommil',                  name: 'openssh',                     version: '1.0'

    dependency group: 'io.swagger',                         name: 'swagger-jersey2-jaxrs',       version: swaggerVersion
    dependency group: 'javax.mail',                         name: 'mail',                        version: '1.5.0-b01'
    dependency group: 'dnsjava',                            name: 'dnsjava',                     version: '2.1.7'

    dependency group: 'org.springframework.kafka',          name: 'spring-kafka',                version: '2.2.4.RELEASE'
    dependency group: 'org.springframework.retry',          name: 'spring-retry',                version: '1.2.0.RELEASE'
    dependency group: 'org.springframework.security.oauth', name: 'spring-security-oauth2',      version: springOauthVersion
    dependency group: 'org.springframework',                name: 'spring-context-support',      version: springFrameworkVersion

    dependency group: 'com.google.code.gson',               name: 'gson',                        version: '2.6.2'
    dependency group: 'org.codehaus.groovy',                name: 'groovy-all',                  version: '2.5.0'
    dependency group: 'org.freemarker',                     name: 'freemarker',                  version: freemarkerVersion
    dependency group: 'org.postgresql',                     name: 'postgresql',                  version: postgreSQLVersion
    dependency group: 'org.codehaus.jettison',              name: 'jettison',                    version: '1.3.5'
    dependency group: 'org.glassfish.jersey.media',         name: 'jersey-media-multipart',      version: jerseyCoreVersion
    dependency group: 'javax.xml.bind',                     name: 'jaxb-api',                    version: '2.3.0'
    dependency group: 'org.mybatis',                        name: 'mybatis-migrations',          version: '3.2.0'
    dependency group: 'org.mockito',                        name: 'mockito-core',                version: mockitoVersion
    dependency group: 'org.mockito',                        name: 'mockito-junit-jupiter',       version: '2.21.0'
    dependency group: 'org.apache.commons',                 name: 'commons-collections4',        version: '4.2'
  }
}

dependencies {
  compile group: 'com.google.code.gson',               name: 'gson'
  compile group: 'org.codehaus.groovy',                name: 'groovy-all'

  compile group: 'org.springframework.boot',           name: 'spring-boot-starter'
  compile group: 'org.springframework.boot',           name: 'spring-boot-starter-web'
  compile group: 'org.springframework.boot',           name: 'spring-boot-starter-actuator'
  compile group: 'org.springframework.boot',           name: 'spring-boot-starter-data-jpa'
  compile group: 'org.springframework.boot',           name: 'spring-boot-starter-websocket'
  compile group: 'org.springframework.boot',           name: 'spring-boot-starter-aop'
  compile group: 'org.springframework.boot',           name: 'spring-boot-starter-freemarker'
  compile group: 'org.springframework.boot',           name: 'spring-boot-starter-security'
  compile group: 'org.springframework.boot',           name: 'spring-boot-starter-jersey'

  compile group: 'org.springframework.kafka',          name: 'spring-kafka'
  compile group: 'org.springframework.retry',          name: 'spring-retry'
  compile group: 'org.springframework.statemachine',   name: 'spring-statemachine-core'
  compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2'

  compile group: 'io.projectreactor',                  name: 'reactor-core'
  compile group: 'io.projectreactor',                  name: 'reactor-bus'

  compile group: 'org.apache.commons',                 name: 'commons-collections4'
  compile group: 'org.freemarker',                     name: 'freemarker'
  compile group: 'org.postgresql',                     name: 'postgresql'
  compile group: 'org.codehaus.jettison',              name: 'jettison'
  compile group: 'org.bouncycastle',                   name: 'bcprov-jdk15on'
  compile group: 'org.bouncycastle',                   name: 'bcpkix-jdk15on'
  compile group: 'org.glassfish.jersey.media',         name: 'jersey-media-multipart'
  compile group: 'org.mybatis',                        name: 'mybatis-migrations'
  compile group: 'org.mapstruct',                      name: 'mapstruct-jdk8'

  compileOnly group: 'org.mapstruct',                  name: 'mapstruct-processor'

  compile group: 'com.google.oauth-client',            name: 'google-oauth-client-jetty'
  compile group: 'com.google.code.findbugs',           name: 'annotations'
  compile group: 'com.google.http-client',             name: 'google-http-client-jackson2'
  compile group: 'com.cedarsoftware',                  name: 'json-io'
  compile group: 'com.thoughtworks.xstream',           name: 'xstream'
  compile group: 'com.github.fommil',                  name: 'openssh'
  compile group: 'com.icegreen',                       name: 'greenmail'

  compile group: 'javax.mail',                         name: 'mail'
  compile group: 'javax.xml.bind',                     name: 'jaxb-api'
  compile group: 'dnsjava',                            name: 'dnsjava'

  compile group: 'io.springfox',                       name: 'springfox-swagger2'
  compile group: 'io.springfox',                       name: 'springfox-core'
  compile group: 'io.springfox',                       name: 'springfox-swagger-ui'

  compile group: 'io.swagger',                         name: 'swagger-jersey2-jaxrs'

  annotationProcessor group: 'org.mapstruct',          name: 'mapstruct-processor'

  compile project(':core-model')
  compile project(':orchestrator-api')
  compile project(':cloud-reactor-api')
  compile project(':cloud-reactor')
  compile project(':structuredevent-model')
  compile project(':template-manager-blueprint')
  compile project(':template-manager-recipe')

  runtime project(':orchestrator-salt')
  runtime project(':orchestrator-salt')
  runtime project(':orchestrator-yarn')
  runtime project(':cloud-reactor')
  runtime project(':cloud-openstack')
  runtime project(':cloud-gcp')
  runtime project(':cloud-aws')
  runtime project(':cloud-mock')
  runtime project(':cloud-azure')
  runtime project(':cloud-yarn')
  runtime project(':cloud-cumulus-yarn')

  runtime group: 'activation',                    name: 'activation'

  testCompile project(path: ':core-model', configuration: 'tests')

  testCompile group: 'org.powermock',            name: 'powermock-module-junit4'
  testCompile group: 'org.powermock',            name: 'powermock-api-mockito2'
  testCompile group: 'org.mockito',              name: 'mockito-core'
  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-freemarker'
  testCompile group: 'com.jayway.restassured',   name: 'rest-assured'
  testCompile group: 'com.jayway.restassured',   name: 'json-path'
  testCompile group: 'com.h2database',           name: 'h2'
  testCompile group: 'org.mockito',              name: 'mockito-junit-jupiter'
  testCompile group: 'org.junit.vintage',        name: 'junit-vintage-engine'
  testCompile group: 'org.junit.jupiter',        name: 'junit-jupiter-api'
  testRuntime group: 'org.junit.jupiter',        name: 'junit-jupiter-engine'
}

test{
  useJUnitPlatform {
    includeEngines 'junit-jupiter', 'junit-vintage'
  }
}

task buildInfo(type: BuildInfoTask, dependsOn: processResources) {
    destination = file("$buildDir")
    applicationPropertiesPath = "$buildDir"
    basename = jar.baseName
    buildVersion = version
}

task execute(type: JavaExec) {
    if (project.hasProperty('mainClass')) {
        main = mainClass
        classpath = sourceSets.main.runtimeClasspath
    }
}

sourceSets {
    main {
        java.srcDirs += "${projectDir}/src/main/generated"
    }
}

compileJava.dependsOn buildInfo
compileJava {
    options.compilerArgs = [
            '-Amapstruct.unmappedTargetPolicy=ERROR',
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true'
    ]

    options.annotationProcessorGeneratedSourcesDirectory = file("$projectDir/src/main/generated")
}

compileJava.doFirst {
    def path = "${projectDir}/src/main/generated"
    if (new File(path).exists()) {
        delete fileTree(path) {
            include '**/*.java'
        }
    }
}

class BuildInfoTask extends DefaultTask {
    File destination = new File("build.info")
    String applicationPropertiesPath
    String basename
    String buildVersion

    @TaskAction
    def writeBuildInfo() {
        List<File> applicationDestinations = []

        applicationDestinations += project.file("out/production/resources")
        applicationDestinations += new File(applicationPropertiesPath + "/resources/main")

        destination.mkdirs()

        // if using dev environment this condition is true
        if (buildVersion.contains("+") || buildVersion == "unspecified") {
            def grgit = Grgit.open(currentDir: project.projectDir)
            buildVersion = grgit.describe()
            println "buildVersion from git: " + buildVersion
        }
        String activeProfile = determineActiveProfile()
        new File(destination, "build.info").withWriter { out ->
            [
                    "ARTIFACT_BASENAME=" + basename,
                    "ARTIFACT_VERSION=" + buildVersion,
            ].each { out.println it }
        }
        applicationDestinations.each {
            it.mkdirs()
            new File(it, "application.properties").withWriter { out ->
                [
                        "info.app.name=" + basename,
                        "info.app.version=" + buildVersion,
                        "spring.profiles.active=" + activeProfile
                ].each { out.println it }
            }
        }
    }

    private String determineActiveProfile() {
        String activeProfile = "dev"
        if (buildVersion.contains("dev") || buildVersion.equals("unspecified")) {
            activeProfile = "dev"
        } else if (buildVersion.contains("rc")) {
            activeProfile = "rc"
        } else {
            activeProfile = "prod"
        }
        return activeProfile
    }
}
