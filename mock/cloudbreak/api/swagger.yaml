---
swagger: "2.0"
info:
  description: "Cloudbreak is a powerful left surf that breaks over a coral reef,\
    \ a mile off southwest the island of Tavarua, Fiji.\nCloudbreak is a cloud agnostic\
    \ Hadoop as a Service API. Abstracts the provisioning and ease management and\
    \ monitoring of on-demand clusters.\nSequenceIQ's Cloudbreak is a RESTful application\
    \ development platform with the goal of helping developers to build solutions\
    \ for deploying Hadoop YARN clusters in different environments.\nOnce it is deployed\
    \ in your favourite servlet container it exposes a REST API allowing to span up\
    \ Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has\
    \ never been easier.\nCloudbreak is built on the foundation of cloud providers\
    \ API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache\
    \ Ambari, Docker lightweight containers, Swarm and Consul.\nFor further product\
    \ documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\"\
    >http://hortonworks.com/apache/cloudbreak/</a>"
  version: "2.6.0-dev.112"
  title: "Cloudbreak API"
basePath: "/cb"
tags:
- name: "info"
- name: "health"
- name: "v1util"
- name: "v1stacks"
- name: "v1users"
- name: "v1templates"
- name: "v2connectors"
- name: "v1accountpreferences"
- name: "v1rdsconfigs"
- name: "v1topologies"
- name: "v1repositoryconfigs"
- name: "v1clustertemplates"
- name: "v1smartsensesubscriptions"
- name: "v1mpacks"
- name: "v1securityrules"
- name: "v1ldap"
- name: "v1flexsubscriptions"
- name: "v1networks"
- name: "v1blueprints"
- name: "v2stacks"
- name: "v1imagecatalogs"
- name: "v1subscriptions"
- name: "v1usages"
- name: "v1settings"
- name: "v1securitygroups"
- name: "v1constraints"
- name: "v1proxyconfigs"
- name: "v1events"
- name: "v1connectors"
- name: "v1credentials"
- name: "v1recipes"
schemes:
- "http"
- "https"
paths:
  /info:
    get:
      tags:
      - "info"
      summary: "retrieve Cloudbreak version for user"
      description: "Cloudbreak version information."
      operationId: "getCloudbreakInfo"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "Info"
  /health:
    get:
      tags:
      - "health"
      summary: "retrieve Cloudbreak server status for user"
      description: "Cloudbreak server status."
      operationId: "getCloudbreakHealth"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Info"
      x-swagger-router-controller: "Info"
  /api/v1/accountpreferences:
    get:
      tags:
      - "v1accountpreferences"
      summary: "retrieve account preferences for admin user"
      description: "Account related preferences that could be managed by the account\
        \ admins and different restrictions could be added to Cloudbreak resources."
      operationId: "getAccountPreferencesEndpoint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AccountPreferencesResponse"
      x-swagger-router-controller: "V1accountpreferences"
    post:
      tags:
      - "v1accountpreferences"
      summary: "post account preferences of admin user"
      description: "Account related preferences that could be managed by the account\
        \ admins and different restrictions could be added to Cloudbreak resources."
      operationId: "postAccountPreferencesEndpoint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AccountPreferencesRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AccountPreferencesResponse"
      x-swagger-router-controller: "V1accountpreferences"
    put:
      tags:
      - "v1accountpreferences"
      summary: "update account preferences of admin user"
      description: "Account related preferences that could be managed by the account\
        \ admins and different restrictions could be added to Cloudbreak resources."
      operationId: "putAccountPreferencesEndpoint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AccountPreferencesRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AccountPreferencesResponse"
      x-swagger-router-controller: "V1accountpreferences"
  /api/v1/accountpreferences/isplatformselectiondisabled:
    get:
      tags:
      - "v1accountpreferences"
      summary: "is platform selection disabled"
      description: "Account related preferences that could be managed by the account\
        \ admins and different restrictions could be added to Cloudbreak resources."
      operationId: "isPlatformSelectionDisabled"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "boolean"
      x-swagger-router-controller: "V1accountpreferences"
  /api/v1/accountpreferences/platformenabled:
    get:
      tags:
      - "v1accountpreferences"
      summary: "is platform selection enabled"
      description: "Account related preferences that could be managed by the account\
        \ admins and different restrictions could be added to Cloudbreak resources."
      operationId: "platformEnablement"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "boolean"
      x-swagger-router-controller: "V1accountpreferences"
  /api/v1/accountpreferences/validate:
    get:
      tags:
      - "v1accountpreferences"
      summary: "validate account preferences of all stacks"
      description: "Account related preferences that could be managed by the account\
        \ admins and different restrictions could be added to Cloudbreak resources."
      operationId: "validateAccountPreferencesEndpoint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1accountpreferences"
  /api/v1/blueprints/account:
    get:
      tags:
      - "v1blueprints"
      summary: "retrieve public and private (owned) blueprints"
      description: "Ambari Blueprints are a declarative definition of a Hadoop cluster.\
        \ With a Blueprint, you specify a stack, the component layout and the configurations\
        \ to materialize a Hadoop cluster instance. Hostgroups defined in blueprints\
        \ can be associated to different templates, thus you can spin up a highly\
        \ available cluster running on different instance types. This will give you\
        \ the option to group your Hadoop services based on resource needs (e.g. high\
        \ I/O, CPU or memory) and create an infrastructure which fits your workload\
        \ best."
      operationId: "getPublicsBlueprint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/BlueprintResponse"
      x-swagger-router-controller: "V1blueprints"
    post:
      tags:
      - "v1blueprints"
      summary: "create blueprint as public resource"
      description: "Ambari Blueprints are a declarative definition of a Hadoop cluster.\
        \ With a Blueprint, you specify a stack, the component layout and the configurations\
        \ to materialize a Hadoop cluster instance. Hostgroups defined in blueprints\
        \ can be associated to different templates, thus you can spin up a highly\
        \ available cluster running on different instance types. This will give you\
        \ the option to group your Hadoop services based on resource needs (e.g. high\
        \ I/O, CPU or memory) and create an infrastructure which fits your workload\
        \ best."
      operationId: "postPublicBlueprint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/BlueprintRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BlueprintResponse"
      x-swagger-router-controller: "V1blueprints"
  /api/v1/blueprints/account/{name}:
    get:
      tags:
      - "v1blueprints"
      summary: "retrieve a public or private (owned) blueprint by name"
      description: "Ambari Blueprints are a declarative definition of a Hadoop cluster.\
        \ With a Blueprint, you specify a stack, the component layout and the configurations\
        \ to materialize a Hadoop cluster instance. Hostgroups defined in blueprints\
        \ can be associated to different templates, thus you can spin up a highly\
        \ available cluster running on different instance types. This will give you\
        \ the option to group your Hadoop services based on resource needs (e.g. high\
        \ I/O, CPU or memory) and create an infrastructure which fits your workload\
        \ best."
      operationId: "getPublicBlueprint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BlueprintResponse"
      x-swagger-router-controller: "V1blueprints"
    delete:
      tags:
      - "v1blueprints"
      summary: "delete public (owned) or private blueprint by name"
      description: "Ambari Blueprints are a declarative definition of a Hadoop cluster.\
        \ With a Blueprint, you specify a stack, the component layout and the configurations\
        \ to materialize a Hadoop cluster instance. Hostgroups defined in blueprints\
        \ can be associated to different templates, thus you can spin up a highly\
        \ available cluster running on different instance types. This will give you\
        \ the option to group your Hadoop services based on resource needs (e.g. high\
        \ I/O, CPU or memory) and create an infrastructure which fits your workload\
        \ best."
      operationId: "deletePublicBlueprint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1blueprints"
  /api/v1/blueprints/user:
    get:
      tags:
      - "v1blueprints"
      summary: "retrieve private blueprints"
      description: "Ambari Blueprints are a declarative definition of a Hadoop cluster.\
        \ With a Blueprint, you specify a stack, the component layout and the configurations\
        \ to materialize a Hadoop cluster instance. Hostgroups defined in blueprints\
        \ can be associated to different templates, thus you can spin up a highly\
        \ available cluster running on different instance types. This will give you\
        \ the option to group your Hadoop services based on resource needs (e.g. high\
        \ I/O, CPU or memory) and create an infrastructure which fits your workload\
        \ best."
      operationId: "getPrivatesBlueprint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/BlueprintResponse"
      x-swagger-router-controller: "V1blueprints"
    post:
      tags:
      - "v1blueprints"
      summary: "create blueprint as private resource"
      description: "Ambari Blueprints are a declarative definition of a Hadoop cluster.\
        \ With a Blueprint, you specify a stack, the component layout and the configurations\
        \ to materialize a Hadoop cluster instance. Hostgroups defined in blueprints\
        \ can be associated to different templates, thus you can spin up a highly\
        \ available cluster running on different instance types. This will give you\
        \ the option to group your Hadoop services based on resource needs (e.g. high\
        \ I/O, CPU or memory) and create an infrastructure which fits your workload\
        \ best."
      operationId: "postPrivateBlueprint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/BlueprintRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BlueprintResponse"
      x-swagger-router-controller: "V1blueprints"
  /api/v1/blueprints/user/{name}:
    get:
      tags:
      - "v1blueprints"
      summary: "retrieve a private blueprint by name"
      description: "Ambari Blueprints are a declarative definition of a Hadoop cluster.\
        \ With a Blueprint, you specify a stack, the component layout and the configurations\
        \ to materialize a Hadoop cluster instance. Hostgroups defined in blueprints\
        \ can be associated to different templates, thus you can spin up a highly\
        \ available cluster running on different instance types. This will give you\
        \ the option to group your Hadoop services based on resource needs (e.g. high\
        \ I/O, CPU or memory) and create an infrastructure which fits your workload\
        \ best."
      operationId: "getPrivateBlueprint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BlueprintResponse"
      x-swagger-router-controller: "V1blueprints"
    delete:
      tags:
      - "v1blueprints"
      summary: "delete private blueprint by name"
      description: "Ambari Blueprints are a declarative definition of a Hadoop cluster.\
        \ With a Blueprint, you specify a stack, the component layout and the configurations\
        \ to materialize a Hadoop cluster instance. Hostgroups defined in blueprints\
        \ can be associated to different templates, thus you can spin up a highly\
        \ available cluster running on different instance types. This will give you\
        \ the option to group your Hadoop services based on resource needs (e.g. high\
        \ I/O, CPU or memory) and create an infrastructure which fits your workload\
        \ best."
      operationId: "deletePrivateBlueprint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1blueprints"
  /api/v1/blueprints/{id}:
    get:
      tags:
      - "v1blueprints"
      summary: "retrieve blueprint by id"
      description: "Ambari Blueprints are a declarative definition of a Hadoop cluster.\
        \ With a Blueprint, you specify a stack, the component layout and the configurations\
        \ to materialize a Hadoop cluster instance. Hostgroups defined in blueprints\
        \ can be associated to different templates, thus you can spin up a highly\
        \ available cluster running on different instance types. This will give you\
        \ the option to group your Hadoop services based on resource needs (e.g. high\
        \ I/O, CPU or memory) and create an infrastructure which fits your workload\
        \ best."
      operationId: "getBlueprint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BlueprintResponse"
      x-swagger-router-controller: "V1blueprints"
    delete:
      tags:
      - "v1blueprints"
      summary: "delete blueprint by id"
      description: "Ambari Blueprints are a declarative definition of a Hadoop cluster.\
        \ With a Blueprint, you specify a stack, the component layout and the configurations\
        \ to materialize a Hadoop cluster instance. Hostgroups defined in blueprints\
        \ can be associated to different templates, thus you can spin up a highly\
        \ available cluster running on different instance types. This will give you\
        \ the option to group your Hadoop services based on resource needs (e.g. high\
        \ I/O, CPU or memory) and create an infrastructure which fits your workload\
        \ best."
      operationId: "deleteBlueprint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1blueprints"
  /api/v1/blueprints/{id}/request:
    get:
      tags:
      - "v1blueprints"
      summary: "retrieve validation request by blueprint name"
      description: "Ambari Blueprints are a declarative definition of a Hadoop cluster.\
        \ With a Blueprint, you specify a stack, the component layout and the configurations\
        \ to materialize a Hadoop cluster instance. Hostgroups defined in blueprints\
        \ can be associated to different templates, thus you can spin up a highly\
        \ available cluster running on different instance types. This will give you\
        \ the option to group your Hadoop services based on resource needs (e.g. high\
        \ I/O, CPU or memory) and create an infrastructure which fits your workload\
        \ best."
      operationId: "getBlueprintRequestFromId"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BlueprintRequest"
      x-swagger-router-controller: "V1blueprints"
  /api/v1/clustertemplates/account:
    get:
      tags:
      - "v1clustertemplates"
      summary: "retrieve public and private (owned) cluster template"
      description: "Cluster templates are stored cluster configurations, which configurations\
        \ are reusable any time"
      operationId: "getPublicsClusterTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/ClusterTemplateResponse"
      x-swagger-router-controller: "V1clustertemplates"
    post:
      tags:
      - "v1clustertemplates"
      summary: "create cluster template as public resource"
      description: "Cluster templates are stored cluster configurations, which configurations\
        \ are reusable any time"
      operationId: "postPublicClusterTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ClusterTemplateRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClusterTemplateResponse"
      x-swagger-router-controller: "V1clustertemplates"
  /api/v1/clustertemplates/account/{name}:
    get:
      tags:
      - "v1clustertemplates"
      summary: "retrieve a public or private (owned) cluster template by name"
      description: "Cluster templates are stored cluster configurations, which configurations\
        \ are reusable any time"
      operationId: "getPublicClusterTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClusterTemplateResponse"
      x-swagger-router-controller: "V1clustertemplates"
    delete:
      tags:
      - "v1clustertemplates"
      summary: "delete public (owned) or private cluster template by name"
      description: "Cluster templates are stored cluster configurations, which configurations\
        \ are reusable any time"
      operationId: "deletePublicClusterTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1clustertemplates"
  /api/v1/clustertemplates/user:
    get:
      tags:
      - "v1clustertemplates"
      summary: "retrieve private cluster templates"
      description: "Cluster templates are stored cluster configurations, which configurations\
        \ are reusable any time"
      operationId: "getPrivatesClusterTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/ClusterTemplateResponse"
      x-swagger-router-controller: "V1clustertemplates"
    post:
      tags:
      - "v1clustertemplates"
      summary: "create cluster template as private resource"
      description: "Cluster templates are stored cluster configurations, which configurations\
        \ are reusable any time"
      operationId: "postPrivateClusterTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ClusterTemplateRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClusterTemplateResponse"
      x-swagger-router-controller: "V1clustertemplates"
  /api/v1/clustertemplates/user/{name}:
    get:
      tags:
      - "v1clustertemplates"
      summary: "retrieve a private cluster template by name"
      description: "Cluster templates are stored cluster configurations, which configurations\
        \ are reusable any time"
      operationId: "getPrivateClusterTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClusterTemplateResponse"
      x-swagger-router-controller: "V1clustertemplates"
    delete:
      tags:
      - "v1clustertemplates"
      summary: "delete private cluster template by name"
      description: "Cluster templates are stored cluster configurations, which configurations\
        \ are reusable any time"
      operationId: "deletePrivateClusterTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1clustertemplates"
  /api/v1/clustertemplates/{id}:
    get:
      tags:
      - "v1clustertemplates"
      summary: "retrieve cluster template by id"
      description: "Cluster templates are stored cluster configurations, which configurations\
        \ are reusable any time"
      operationId: "getClusterTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClusterTemplateResponse"
      x-swagger-router-controller: "V1clustertemplates"
    delete:
      tags:
      - "v1clustertemplates"
      summary: "delete cluster template by id"
      description: "Cluster templates are stored cluster configurations, which configurations\
        \ are reusable any time"
      operationId: "deleteClusterTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1clustertemplates"
  /api/v1/connectors:
    get:
      tags:
      - "v1connectors"
      summary: "retrive available platforms"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getPlatforms"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "extended"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
              properties: {}
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/accessconfigs:
    post:
      tags:
      - "v1connectors"
      summary: "retrive access configs with properties"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getAccessConfigs"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PlatformResourceRequestJson"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformAccessConfigsResponse"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/custom:
    post:
      tags:
      - "v1connectors"
      summary: "retrive special properties"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getSpecialProperties"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SpecialParametersJson"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/disktypes:
    get:
      tags:
      - "v1connectors"
      summary: "retrive available disk types"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getDisktypes"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformDisksJson"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/disktypes/{type}:
    get:
      tags:
      - "v1connectors"
      summary: "retrive disks by type"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getDisktypeByType"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/gateways:
    post:
      tags:
      - "v1connectors"
      summary: "retrive gateways with properties"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getGatewaysCredentialId"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PlatformResourceRequestJson"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformGatewaysResponse"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/ippools:
    post:
      tags:
      - "v1connectors"
      summary: "retrive ip pools with properties"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getIpPoolsCredentialId"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PlatformResourceRequestJson"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformIpPoolsResponse"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/networks:
    post:
      tags:
      - "v1connectors"
      summary: "retrive network properties"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getPlatformNetworks"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PlatformResourceRequestJson"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformNetworksResponse"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/ochestrators:
    get:
      tags:
      - "v1connectors"
      summary: "retrive available orchestrator types"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getOrchestratortypes"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformOrchestratorsJson"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/ochestrators/{type}:
    get:
      tags:
      - "v1connectors"
      summary: "retrive orchestrators by type"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getOchestratorsByType"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/recommendation:
    post:
      tags:
      - "v1connectors"
      summary: "creates a recommendation that advises cloud resources for the given\
        \ blueprint"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "createRecommendation"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RecommendationRequestJson"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RecommendationResponse"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/regions:
    get:
      tags:
      - "v1connectors"
      summary: "retrive available regions"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getRegions"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformRegionsJson"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/regions/av/{type}:
    get:
      tags:
      - "v1connectors"
      summary: "retrive availability zones by type"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getRegionAvByType"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "array"
              items:
                type: "string"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/regions/r/{type}:
    get:
      tags:
      - "v1connectors"
      summary: "retrive regions by type"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getRegionRByType"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/securitygroups:
    post:
      tags:
      - "v1connectors"
      summary: "retrive securitygroups properties"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getPlatformSecurityGroups"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PlatformResourceRequestJson"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformSecurityGroupsResponse"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/sshkeys:
    post:
      tags:
      - "v1connectors"
      summary: "retrive sshkeys properties"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getPlatformSShKeys"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PlatformResourceRequestJson"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformSshKeysResponse"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/tagspecifications:
    get:
      tags:
      - "v1connectors"
      summary: "retrive tag specifications"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getTagSpecifications"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TagSpecificationsJson"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/variants:
    get:
      tags:
      - "v1connectors"
      summary: "retrive available platform variants"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getPlatformVariants"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformVariantsJson"
      x-swagger-router-controller: "V1connectors"
  /api/v1/connectors/variants/{type}:
    get:
      tags:
      - "v1connectors"
      summary: "retrive a platform variant by type"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getPlatformVariantByType"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
      x-swagger-router-controller: "V1connectors"
  /api/v1/constraints/account:
    get:
      tags:
      - "v1constraints"
      summary: "retrieve public and private (owned) constraint templates"
      description: "A constraint template tells Cloudbreak the resource constraints\
        \ (cpu, memory, disk) of the Ambari containers that will be deployed to the\
        \ cluster. A constraint template must be created onenvironments where there\
        \ is no one-to-one mapping between containers and nodes, like YARN."
      operationId: "getPublicsConstraint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/ConstraintTemplateResponse"
      x-swagger-router-controller: "V1constraints"
    post:
      tags:
      - "v1constraints"
      summary: "create constraint template as public resource"
      description: "A constraint template tells Cloudbreak the resource constraints\
        \ (cpu, memory, disk) of the Ambari containers that will be deployed to the\
        \ cluster. A constraint template must be created onenvironments where there\
        \ is no one-to-one mapping between containers and nodes, like YARN."
      operationId: "postPublicConstraint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ConstraintTemplateRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConstraintTemplateResponse"
      x-swagger-router-controller: "V1constraints"
  /api/v1/constraints/account/{name}:
    get:
      tags:
      - "v1constraints"
      summary: "retrieve a public or private (owned) constraint template by name"
      description: "A constraint template tells Cloudbreak the resource constraints\
        \ (cpu, memory, disk) of the Ambari containers that will be deployed to the\
        \ cluster. A constraint template must be created onenvironments where there\
        \ is no one-to-one mapping between containers and nodes, like YARN."
      operationId: "getPublicConstraint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConstraintTemplateResponse"
      x-swagger-router-controller: "V1constraints"
    delete:
      tags:
      - "v1constraints"
      summary: "delete public (owned) or private constraint template by name"
      description: "A constraint template tells Cloudbreak the resource constraints\
        \ (cpu, memory, disk) of the Ambari containers that will be deployed to the\
        \ cluster. A constraint template must be created onenvironments where there\
        \ is no one-to-one mapping between containers and nodes, like YARN."
      operationId: "deletePublicConstraint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1constraints"
  /api/v1/constraints/user:
    get:
      tags:
      - "v1constraints"
      summary: "retrieve private constraint templates"
      description: "A constraint template tells Cloudbreak the resource constraints\
        \ (cpu, memory, disk) of the Ambari containers that will be deployed to the\
        \ cluster. A constraint template must be created onenvironments where there\
        \ is no one-to-one mapping between containers and nodes, like YARN."
      operationId: "getPrivatesConstraint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/ConstraintTemplateResponse"
      x-swagger-router-controller: "V1constraints"
    post:
      tags:
      - "v1constraints"
      summary: "create constraint template as private resource"
      description: "A constraint template tells Cloudbreak the resource constraints\
        \ (cpu, memory, disk) of the Ambari containers that will be deployed to the\
        \ cluster. A constraint template must be created onenvironments where there\
        \ is no one-to-one mapping between containers and nodes, like YARN."
      operationId: "postPrivateConstraint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ConstraintTemplateRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConstraintTemplateResponse"
      x-swagger-router-controller: "V1constraints"
  /api/v1/constraints/user/{name}:
    get:
      tags:
      - "v1constraints"
      summary: "retrieve a private constraint template by name"
      description: "A constraint template tells Cloudbreak the resource constraints\
        \ (cpu, memory, disk) of the Ambari containers that will be deployed to the\
        \ cluster. A constraint template must be created onenvironments where there\
        \ is no one-to-one mapping between containers and nodes, like YARN."
      operationId: "getPrivateConstraint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConstraintTemplateResponse"
      x-swagger-router-controller: "V1constraints"
    delete:
      tags:
      - "v1constraints"
      summary: "delete private constraint template by name"
      description: "A constraint template tells Cloudbreak the resource constraints\
        \ (cpu, memory, disk) of the Ambari containers that will be deployed to the\
        \ cluster. A constraint template must be created onenvironments where there\
        \ is no one-to-one mapping between containers and nodes, like YARN."
      operationId: "deletePrivateConstraint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1constraints"
  /api/v1/constraints/{id}:
    get:
      tags:
      - "v1constraints"
      summary: "retrieve constraint template by id"
      description: "A constraint template tells Cloudbreak the resource constraints\
        \ (cpu, memory, disk) of the Ambari containers that will be deployed to the\
        \ cluster. A constraint template must be created onenvironments where there\
        \ is no one-to-one mapping between containers and nodes, like YARN."
      operationId: "getConstraint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConstraintTemplateResponse"
      x-swagger-router-controller: "V1constraints"
    delete:
      tags:
      - "v1constraints"
      summary: "delete constraint template by id"
      description: "A constraint template tells Cloudbreak the resource constraints\
        \ (cpu, memory, disk) of the Ambari containers that will be deployed to the\
        \ cluster. A constraint template must be created onenvironments where there\
        \ is no one-to-one mapping between containers and nodes, like YARN."
      operationId: "deleteConstraint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1constraints"
  /api/v1/credentials/account:
    get:
      tags:
      - "v1credentials"
      summary: "retrieve public and private (owned) credentials"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "getPublicsCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/CredentialResponse"
      x-swagger-router-controller: "V1credentials"
    post:
      tags:
      - "v1credentials"
      summary: "create credential as public resource"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "postPublicCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CredentialRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CredentialResponse"
      x-swagger-router-controller: "V1credentials"
    put:
      tags:
      - "v1credentials"
      summary: "modify public credential resource"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "putPublicCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CredentialRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CredentialResponse"
      x-swagger-router-controller: "V1credentials"
  /api/v1/credentials/account/{name}:
    get:
      tags:
      - "v1credentials"
      summary: "retrieve a public or private (owned) credential by name"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "getPublicCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CredentialResponse"
      x-swagger-router-controller: "V1credentials"
    delete:
      tags:
      - "v1credentials"
      summary: "delete public (owned) or private credential by name"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "deletePublicCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1credentials"
  /api/v1/credentials/accountinteractivelogin:
    post:
      tags:
      - "v1credentials"
      summary: "interactive login"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "publicInteractiveLoginCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CredentialRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
      x-swagger-router-controller: "V1credentials"
  /api/v1/credentials/user:
    get:
      tags:
      - "v1credentials"
      summary: "retrieve private credentials"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "getPrivatesCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/CredentialResponse"
      x-swagger-router-controller: "V1credentials"
    post:
      tags:
      - "v1credentials"
      summary: "create credential as private resource"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "postPrivateCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CredentialRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CredentialResponse"
      x-swagger-router-controller: "V1credentials"
    put:
      tags:
      - "v1credentials"
      summary: "modify private credential resource"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "putPrivateCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CredentialRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CredentialResponse"
      x-swagger-router-controller: "V1credentials"
  /api/v1/credentials/user/{name}:
    get:
      tags:
      - "v1credentials"
      summary: "retrieve a private credential by name"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "getPrivateCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CredentialResponse"
      x-swagger-router-controller: "V1credentials"
    delete:
      tags:
      - "v1credentials"
      summary: "delete private credential by name"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "deletePrivateCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1credentials"
  /api/v1/credentials/userinteractivelogin:
    post:
      tags:
      - "v1credentials"
      summary: "interactive login"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "privateInteractiveLoginCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CredentialRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
      x-swagger-router-controller: "V1credentials"
  /api/v1/credentials/{id}:
    get:
      tags:
      - "v1credentials"
      summary: "retrieve credential by id"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "getCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CredentialResponse"
      x-swagger-router-controller: "V1credentials"
    delete:
      tags:
      - "v1credentials"
      summary: "delete credential by id"
      description: "Cloudbreak is launching Hadoop clusters on the user's behalf -\
        \ on different cloud providers. One key point is that Cloudbreak does not\
        \ store your Cloud provider account details (such as username, password, keys,\
        \ private SSL certificates, etc). We work around the concept that Identity\
        \ and Access Management is fully controlled by you - the end user. The Cloudbreak\
        \ deployer is purely acting on behalf of the end user - without having access\
        \ to the user's account."
      operationId: "deleteCredential"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1credentials"
  /api/v1/events:
    get:
      tags:
      - "v1events"
      summary: "retrieve events by timestamp (long)"
      description: "Events are used to track stack creation initiated by cloudbreak\
        \ users. Events are generated by the backend when resources requested by the\
        \ user become available or unavailable"
      operationId: "getEvents"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "since"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CloudbreakEvent"
      x-swagger-router-controller: "V1events"
  /api/v1/events/struct/zip/{stackId}:
    get:
      tags:
      - "v1events"
      operationId: "getStructuredEventsZip"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "stackId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1events"
  /api/v1/events/struct/{stackId}:
    get:
      tags:
      - "v1events"
      operationId: "getStructuredEvents"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "stackId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StructuredEvent"
          headers: {}
      x-swagger-router-controller: "V1events"
  /api/v1/events/{stackId}:
    get:
      tags:
      - "v1events"
      summary: "retrieve events by stackid (long)"
      description: "Events are used to track stack creation initiated by cloudbreak\
        \ users. Events are generated by the backend when resources requested by the\
        \ user become available or unavailable"
      operationId: "getEventsBySTackId"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "stackId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CloudbreakEvent"
      x-swagger-router-controller: "V1events"
  /api/v1/flexsubscriptions/account:
    get:
      tags:
      - "v1flexsubscriptions"
      summary: "retrieve public and private (owned) Flex subscriptions"
      description: "Flex subscriptions could be configured."
      operationId: "getPublicFlexSubscriptions"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FlexSubscriptionResponse"
      x-swagger-router-controller: "V1flexsubscriptions"
    post:
      tags:
      - "v1flexsubscriptions"
      summary: "create Flex subscription as public resource"
      description: "Flex subscriptions could be configured."
      operationId: "postPublicFlexSubscription"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FlexSubscriptionRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FlexSubscriptionResponse"
      x-swagger-router-controller: "V1flexsubscriptions"
  /api/v1/flexsubscriptions/account/setdefault/{name}:
    put:
      tags:
      - "v1flexsubscriptions"
      summary: "sets the account default flag on the Flex subscription"
      description: "Flex subscriptions could be configured."
      operationId: "putPublicDefaultFlexSubscriptionByName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1flexsubscriptions"
  /api/v1/flexsubscriptions/account/setusedforcontroller/{name}:
    put:
      tags:
      - "v1flexsubscriptions"
      summary: "sets the account 'used for controller' flag on the Flex subscription"
      description: "Flex subscriptions could be configured."
      operationId: "putPublicUsedForControllerFlexSubscriptionByName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1flexsubscriptions"
  /api/v1/flexsubscriptions/account/{name}:
    get:
      tags:
      - "v1flexsubscriptions"
      summary: "retrieve a public or private (owned) Flex subscription by name"
      description: "Flex subscriptions could be configured."
      operationId: "getPublicFlexSubscriptionByName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FlexSubscriptionResponse"
      x-swagger-router-controller: "V1flexsubscriptions"
    delete:
      tags:
      - "v1flexsubscriptions"
      summary: "delete public (owned) or private Flex subscription by name"
      description: "Flex subscriptions could be configured."
      operationId: "deletePublicFlexSubscriptionByName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1flexsubscriptions"
  /api/v1/flexsubscriptions/setdefault/{id}:
    put:
      tags:
      - "v1flexsubscriptions"
      summary: "sets the account default flag on the Flex subscription"
      description: "Flex subscriptions could be configured."
      operationId: "putDefaultFlexSubscriptionById"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1flexsubscriptions"
  /api/v1/flexsubscriptions/setusedforcontroller/{id}:
    put:
      tags:
      - "v1flexsubscriptions"
      summary: "sets the account 'used for controller' flag on the Flex subscription"
      description: "Flex subscriptions could be configured."
      operationId: "putUsedForControllerFlexSubscriptionById"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1flexsubscriptions"
  /api/v1/flexsubscriptions/user:
    get:
      tags:
      - "v1flexsubscriptions"
      summary: "retrieve private Flex subscriptions"
      description: "Flex subscriptions could be configured."
      operationId: "getPrivateFlexSubscriptions"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FlexSubscriptionResponse"
      x-swagger-router-controller: "V1flexsubscriptions"
    post:
      tags:
      - "v1flexsubscriptions"
      summary: "create Flex subscription as private resource"
      description: "Flex subscriptions could be configured."
      operationId: "postPrivateFlexSubscription"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FlexSubscriptionRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FlexSubscriptionResponse"
      x-swagger-router-controller: "V1flexsubscriptions"
  /api/v1/flexsubscriptions/user/{name}:
    get:
      tags:
      - "v1flexsubscriptions"
      summary: "retrieve a private Flex subscription by name"
      description: "Flex subscriptions could be configured."
      operationId: "getPrivateFlexSubscriptionByName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FlexSubscriptionResponse"
      x-swagger-router-controller: "V1flexsubscriptions"
    delete:
      tags:
      - "v1flexsubscriptions"
      summary: "delete private Flex subscription by name"
      description: "Flex subscriptions could be configured."
      operationId: "deletePrivateFlexSubscriptionByName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1flexsubscriptions"
  /api/v1/flexsubscriptions/{id}:
    get:
      tags:
      - "v1flexsubscriptions"
      summary: "retrieve Flex subscription by id"
      description: "Flex subscriptions could be configured."
      operationId: "getFlexSubscriptionById"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FlexSubscriptionResponse"
      x-swagger-router-controller: "V1flexsubscriptions"
    delete:
      tags:
      - "v1flexsubscriptions"
      summary: "delete Flex subscription by id"
      description: "Flex subscriptions could be configured."
      operationId: "deleteFlexSubscriptionById"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1flexsubscriptions"
  /api/v1/imagecatalogs/account:
    get:
      tags:
      - "v1imagecatalogs"
      summary: "list available custom image catalogs as public resources"
      description: "Provides an interface to determine available Virtual Machine images\
        \ for the given version of Cloudbreak."
      operationId: "getPublicsImageCatalogs"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImageCatalogResponse"
      x-swagger-router-controller: "V1imagecatalogs"
    post:
      tags:
      - "v1imagecatalogs"
      summary: "create Image Catalog as public resources"
      description: "Provides an interface to determine available Virtual Machine images\
        \ for the given version of Cloudbreak."
      operationId: "postPublicImageCatalog"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImageCatalogRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImageCatalogResponse"
      x-swagger-router-controller: "V1imagecatalogs"
    put:
      tags:
      - "v1imagecatalogs"
      summary: "update public (owned) or private Image Catalog by id"
      description: "Provides an interface to determine available Virtual Machine images\
        \ for the given version of Cloudbreak."
      operationId: "putPublicImageCatalog"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateImageCatalogRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImageCatalogResponse"
      x-swagger-router-controller: "V1imagecatalogs"
  /api/v1/imagecatalogs/account/{name}:
    get:
      tags:
      - "v1imagecatalogs"
      summary: "get custom image catalog by name"
      description: "Provides an interface to determine available Virtual Machine images\
        \ for the given version of Cloudbreak."
      operationId: "getPublicImageCatalogsByName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "withImages"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImageCatalogResponse"
      x-swagger-router-controller: "V1imagecatalogs"
    delete:
      tags:
      - "v1imagecatalogs"
      summary: "delete public (owned) or private Image Catalog by id"
      description: "Provides an interface to determine available Virtual Machine images\
        \ for the given version of Cloudbreak."
      operationId: "deletePublicImageCatalogByName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1imagecatalogs"
  /api/v1/imagecatalogs/account/{name}/{platform}:
    get:
      tags:
      - "v1imagecatalogs"
      summary: "determines available images for the Cloudbreak version by the given\
        \ provider and given image catalog url"
      description: "Provides an interface to determine available Virtual Machine images\
        \ for the given version of Cloudbreak."
      operationId: "getPublicImagesByProviderAndCustomImageCatalog"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "platform"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImagesResponse"
      x-swagger-router-controller: "V1imagecatalogs"
  /api/v1/imagecatalogs/setdefault/{name}:
    put:
      tags:
      - "v1imagecatalogs"
      summary: "update public (owned) or private Image Catalog by id"
      description: "Provides an interface to determine available Virtual Machine images\
        \ for the given version of Cloudbreak."
      operationId: "putSetDefaultImageCatalogByName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImageCatalogResponse"
      x-swagger-router-controller: "V1imagecatalogs"
  /api/v1/imagecatalogs/user:
    post:
      tags:
      - "v1imagecatalogs"
      summary: "create Image Catalog as private resources"
      description: "Provides an interface to determine available Virtual Machine images\
        \ for the given version of Cloudbreak."
      operationId: "postPrivateImageCatalog"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImageCatalogRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImageCatalogResponse"
      x-swagger-router-controller: "V1imagecatalogs"
  /api/v1/imagecatalogs/{name}/request:
    get:
      tags:
      - "v1imagecatalogs"
      summary: "retrieve imagecatalog request by imagecatalog name"
      description: "Provides an interface to determine available Virtual Machine images\
        \ for the given version of Cloudbreak."
      operationId: "getImageCatalogRequestFromName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImageCatalogRequest"
      x-swagger-router-controller: "V1imagecatalogs"
  /api/v1/imagecatalogs/{platform}:
    get:
      tags:
      - "v1imagecatalogs"
      summary: "determines available images for the Cloudbreak version by the given\
        \ provider and default image catalog url"
      description: "Provides an interface to determine available Virtual Machine images\
        \ for the given version of Cloudbreak."
      operationId: "getImagesByProvider"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "platform"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImagesResponse"
      x-swagger-router-controller: "V1imagecatalogs"
  /api/v1/ldap/account:
    get:
      tags:
      - "v1ldap"
      summary: "retrieve public and private (owned) LDAP configs"
      description: "LDAP server integration enables the user to provide a central\
        \ place to store usernames and passwords for the users of his/her clusters."
      operationId: "getPublicsLdap"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/LdapConfigResponse"
      x-swagger-router-controller: "V1ldap"
    post:
      tags:
      - "v1ldap"
      summary: "create LDAP config as public resource"
      description: "LDAP server integration enables the user to provide a central\
        \ place to store usernames and passwords for the users of his/her clusters."
      operationId: "postPublicLdap"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LdapConfigRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LdapConfigResponse"
      x-swagger-router-controller: "V1ldap"
  /api/v1/ldap/account/{name}:
    get:
      tags:
      - "v1ldap"
      summary: "retrieve a public or private (owned) LDAP config by name"
      description: "LDAP server integration enables the user to provide a central\
        \ place to store usernames and passwords for the users of his/her clusters."
      operationId: "getPublicLdap"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LdapConfigResponse"
      x-swagger-router-controller: "V1ldap"
    delete:
      tags:
      - "v1ldap"
      summary: "delete public (owned) or private LDAP config by name"
      description: "LDAP server integration enables the user to provide a central\
        \ place to store usernames and passwords for the users of his/her clusters."
      operationId: "deletePublicLdap"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1ldap"
  /api/v1/ldap/testconnect:
    post:
      tags:
      - "v1ldap"
      summary: "test that the connection could be established of an existing or new\
        \ LDAP config"
      description: ""
      operationId: "postLdapConnectionTest"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LDAPTestRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LdapTestResult"
      x-swagger-router-controller: "V1ldap"
  /api/v1/ldap/user:
    get:
      tags:
      - "v1ldap"
      summary: "retrieve private LDAP configs"
      description: "LDAP server integration enables the user to provide a central\
        \ place to store usernames and passwords for the users of his/her clusters."
      operationId: "getPrivatesLdap"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/LdapConfigResponse"
      x-swagger-router-controller: "V1ldap"
    post:
      tags:
      - "v1ldap"
      summary: "create LDAP config as private resource"
      description: "LDAP server integration enables the user to provide a central\
        \ place to store usernames and passwords for the users of his/her clusters."
      operationId: "postPrivateLdap"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LdapConfigRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LdapConfigResponse"
      x-swagger-router-controller: "V1ldap"
  /api/v1/ldap/user/{name}:
    get:
      tags:
      - "v1ldap"
      summary: "retrieve a private LDAP config by name"
      description: "LDAP server integration enables the user to provide a central\
        \ place to store usernames and passwords for the users of his/her clusters."
      operationId: "getPrivateLdap"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LdapConfigResponse"
      x-swagger-router-controller: "V1ldap"
    delete:
      tags:
      - "v1ldap"
      summary: "delete private LDAP config by name"
      description: "LDAP server integration enables the user to provide a central\
        \ place to store usernames and passwords for the users of his/her clusters."
      operationId: "deletePrivateLdap"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1ldap"
  /api/v1/ldap/{id}:
    get:
      tags:
      - "v1ldap"
      summary: "retrieve LDAP config by id"
      description: "LDAP server integration enables the user to provide a central\
        \ place to store usernames and passwords for the users of his/her clusters."
      operationId: "getLdap"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LdapConfigResponse"
      x-swagger-router-controller: "V1ldap"
    delete:
      tags:
      - "v1ldap"
      summary: "delete LDAP config by id"
      description: "LDAP server integration enables the user to provide a central\
        \ place to store usernames and passwords for the users of his/her clusters."
      operationId: "deleteLdap"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1ldap"
  /api/v1/mpacks/account:
    get:
      tags:
      - "v1mpacks"
      summary: "retrieve public and private (owned) management packs"
      description: "An Apache Ambari Management Pack (Mpack) can bundle multiple service\
        \ definitions, stack definitions, stack add-on service definitions, view definitions\
        \ services so that releasing these artifacts don’t enforce an Apache Ambari\
        \ release."
      operationId: "getPublicManagementPacks"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/ManagementPackResponse"
      x-swagger-router-controller: "V1mpacks"
    post:
      tags:
      - "v1mpacks"
      summary: "create management pack as public resource"
      description: "An Apache Ambari Management Pack (Mpack) can bundle multiple service\
        \ definitions, stack definitions, stack add-on service definitions, view definitions\
        \ services so that releasing these artifacts don’t enforce an Apache Ambari\
        \ release."
      operationId: "postPublicManagementPack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ManagementPackRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ManagementPackResponse"
      x-swagger-router-controller: "V1mpacks"
  /api/v1/mpacks/account/{name}:
    get:
      tags:
      - "v1mpacks"
      summary: "retrieve a public or private (owned) management pack by name"
      description: "An Apache Ambari Management Pack (Mpack) can bundle multiple service\
        \ definitions, stack definitions, stack add-on service definitions, view definitions\
        \ services so that releasing these artifacts don’t enforce an Apache Ambari\
        \ release."
      operationId: "getPublicManagementPack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ManagementPackResponse"
      x-swagger-router-controller: "V1mpacks"
    delete:
      tags:
      - "v1mpacks"
      summary: "delete public (owned) or private management pack by name"
      description: "An Apache Ambari Management Pack (Mpack) can bundle multiple service\
        \ definitions, stack definitions, stack add-on service definitions, view definitions\
        \ services so that releasing these artifacts don’t enforce an Apache Ambari\
        \ release."
      operationId: "deletePublicManagementPack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1mpacks"
  /api/v1/mpacks/user:
    get:
      tags:
      - "v1mpacks"
      summary: "retrieve private management packs"
      description: "An Apache Ambari Management Pack (Mpack) can bundle multiple service\
        \ definitions, stack definitions, stack add-on service definitions, view definitions\
        \ services so that releasing these artifacts don’t enforce an Apache Ambari\
        \ release."
      operationId: "getPrivateManagementPacks"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/ManagementPackResponse"
      x-swagger-router-controller: "V1mpacks"
    post:
      tags:
      - "v1mpacks"
      summary: "create management pack as private resource"
      description: "An Apache Ambari Management Pack (Mpack) can bundle multiple service\
        \ definitions, stack definitions, stack add-on service definitions, view definitions\
        \ services so that releasing these artifacts don’t enforce an Apache Ambari\
        \ release."
      operationId: "postPrivateManagementPack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ManagementPackRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ManagementPackResponse"
      x-swagger-router-controller: "V1mpacks"
  /api/v1/mpacks/user/{name}:
    get:
      tags:
      - "v1mpacks"
      summary: "retrieve a private management pack by name"
      description: "An Apache Ambari Management Pack (Mpack) can bundle multiple service\
        \ definitions, stack definitions, stack add-on service definitions, view definitions\
        \ services so that releasing these artifacts don’t enforce an Apache Ambari\
        \ release."
      operationId: "getPrivateManagementPack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ManagementPackResponse"
      x-swagger-router-controller: "V1mpacks"
    delete:
      tags:
      - "v1mpacks"
      summary: "delete private management pack by name"
      description: "An Apache Ambari Management Pack (Mpack) can bundle multiple service\
        \ definitions, stack definitions, stack add-on service definitions, view definitions\
        \ services so that releasing these artifacts don’t enforce an Apache Ambari\
        \ release."
      operationId: "deletePrivateManagementPack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1mpacks"
  /api/v1/mpacks/{id}:
    get:
      tags:
      - "v1mpacks"
      summary: "retrieve management pack by id"
      description: "An Apache Ambari Management Pack (Mpack) can bundle multiple service\
        \ definitions, stack definitions, stack add-on service definitions, view definitions\
        \ services so that releasing these artifacts don’t enforce an Apache Ambari\
        \ release."
      operationId: "getManagementPack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ManagementPackResponse"
      x-swagger-router-controller: "V1mpacks"
    delete:
      tags:
      - "v1mpacks"
      summary: "delete management pack by id"
      description: "An Apache Ambari Management Pack (Mpack) can bundle multiple service\
        \ definitions, stack definitions, stack add-on service definitions, view definitions\
        \ services so that releasing these artifacts don’t enforce an Apache Ambari\
        \ release."
      operationId: "deleteManagementPack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1mpacks"
  /api/v1/networks/account:
    get:
      tags:
      - "v1networks"
      summary: "retrieve public and private (owned) networks"
      description: "Provider specific network settings could be configured by using\
        \ Network resources."
      operationId: "getPublicsNetwork"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/NetworkResponse"
      x-swagger-router-controller: "V1networks"
    post:
      tags:
      - "v1networks"
      summary: "create network as public resource"
      description: "Provider specific network settings could be configured by using\
        \ Network resources."
      operationId: "postPublicNetwork"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/NetworkRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetworkResponse"
      x-swagger-router-controller: "V1networks"
  /api/v1/networks/account/{name}:
    get:
      tags:
      - "v1networks"
      summary: "retrieve a public or private (owned) network by name"
      description: "Provider specific network settings could be configured by using\
        \ Network resources."
      operationId: "getPublicNetwork"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetworkResponse"
      x-swagger-router-controller: "V1networks"
    delete:
      tags:
      - "v1networks"
      summary: "delete public (owned) or private network by name"
      description: "Provider specific network settings could be configured by using\
        \ Network resources."
      operationId: "deletePublicNetwork"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1networks"
  /api/v1/networks/user:
    get:
      tags:
      - "v1networks"
      summary: "retrieve private networks"
      description: "Provider specific network settings could be configured by using\
        \ Network resources."
      operationId: "getPrivatesNetwork"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/NetworkResponse"
      x-swagger-router-controller: "V1networks"
    post:
      tags:
      - "v1networks"
      summary: "create network as private resource"
      description: "Provider specific network settings could be configured by using\
        \ Network resources."
      operationId: "postPrivateNetwork"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/NetworkRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetworkResponse"
      x-swagger-router-controller: "V1networks"
  /api/v1/networks/user/{name}:
    get:
      tags:
      - "v1networks"
      summary: "retrieve a private network by name"
      description: "Provider specific network settings could be configured by using\
        \ Network resources."
      operationId: "getPrivateNetwork"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetworkResponse"
      x-swagger-router-controller: "V1networks"
    delete:
      tags:
      - "v1networks"
      summary: "delete private network by name"
      description: "Provider specific network settings could be configured by using\
        \ Network resources."
      operationId: "deletePrivateNetwork"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1networks"
  /api/v1/networks/{id}:
    get:
      tags:
      - "v1networks"
      summary: "retrieve network by id"
      description: "Provider specific network settings could be configured by using\
        \ Network resources."
      operationId: "getNetwork"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetworkResponse"
      x-swagger-router-controller: "V1networks"
    delete:
      tags:
      - "v1networks"
      summary: "delete network by id"
      description: "Provider specific network settings could be configured by using\
        \ Network resources."
      operationId: "deleteNetwork"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1networks"
  /api/v1/proxyconfigs/account:
    get:
      tags:
      - "v1proxyconfigs"
      summary: "retrieve public and private (owned) proxy configurations"
      description: "An proxy Configuration describe a connection to an external proxy\
        \ server which provides internet access cluster members. It's applied for\
        \ package manager and Ambari too"
      operationId: "getPublicsProxyConfig"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/ProxyConfigResponse"
      x-swagger-router-controller: "V1proxyconfigs"
    post:
      tags:
      - "v1proxyconfigs"
      summary: "create proxy configuration as public resource"
      description: "An proxy Configuration describe a connection to an external proxy\
        \ server which provides internet access cluster members. It's applied for\
        \ package manager and Ambari too"
      operationId: "postPublicProxyConfig"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ProxyConfigRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProxyConfigResponse"
      x-swagger-router-controller: "V1proxyconfigs"
  /api/v1/proxyconfigs/account/{name}:
    get:
      tags:
      - "v1proxyconfigs"
      summary: "retrieve a public or private (owned) proxy configuration by name"
      description: "An proxy Configuration describe a connection to an external proxy\
        \ server which provides internet access cluster members. It's applied for\
        \ package manager and Ambari too"
      operationId: "getPublicProxyConfig"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProxyConfigResponse"
      x-swagger-router-controller: "V1proxyconfigs"
    delete:
      tags:
      - "v1proxyconfigs"
      summary: "delete public (owned) or private proxy configuration by name"
      description: "An proxy Configuration describe a connection to an external proxy\
        \ server which provides internet access cluster members. It's applied for\
        \ package manager and Ambari too"
      operationId: "deletePublicProxyConfig"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1proxyconfigs"
  /api/v1/proxyconfigs/user:
    get:
      tags:
      - "v1proxyconfigs"
      summary: "retrieve private proxy configurations"
      description: "An proxy Configuration describe a connection to an external proxy\
        \ server which provides internet access cluster members. It's applied for\
        \ package manager and Ambari too"
      operationId: "getPrivatesProxyConfig"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/ProxyConfigResponse"
      x-swagger-router-controller: "V1proxyconfigs"
    post:
      tags:
      - "v1proxyconfigs"
      summary: "create proxy configuration as private resource"
      description: "An proxy Configuration describe a connection to an external proxy\
        \ server which provides internet access cluster members. It's applied for\
        \ package manager and Ambari too"
      operationId: "postPrivateProxyConfig"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ProxyConfigRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProxyConfigResponse"
      x-swagger-router-controller: "V1proxyconfigs"
  /api/v1/proxyconfigs/user/{name}:
    get:
      tags:
      - "v1proxyconfigs"
      summary: "retrieve a private proxy configuration by name"
      description: "An proxy Configuration describe a connection to an external proxy\
        \ server which provides internet access cluster members. It's applied for\
        \ package manager and Ambari too"
      operationId: "getPrivateProxyConfig"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProxyConfigResponse"
      x-swagger-router-controller: "V1proxyconfigs"
    delete:
      tags:
      - "v1proxyconfigs"
      summary: "delete private proxy configuration by name"
      description: "An proxy Configuration describe a connection to an external proxy\
        \ server which provides internet access cluster members. It's applied for\
        \ package manager and Ambari too"
      operationId: "deletePrivateProxyConfig"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1proxyconfigs"
  /api/v1/proxyconfigs/{id}:
    get:
      tags:
      - "v1proxyconfigs"
      summary: "retrieve proxy configuration by id"
      description: "An proxy Configuration describe a connection to an external proxy\
        \ server which provides internet access cluster members. It's applied for\
        \ package manager and Ambari too"
      operationId: "getProxyConfig"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProxyConfigResponse"
      x-swagger-router-controller: "V1proxyconfigs"
    delete:
      tags:
      - "v1proxyconfigs"
      summary: "delete proxy configuration by id"
      description: "An proxy Configuration describe a connection to an external proxy\
        \ server which provides internet access cluster members. It's applied for\
        \ package manager and Ambari too"
      operationId: "deleteProxyConfig"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1proxyconfigs"
  /api/v1/rdsconfigs/account:
    get:
      tags:
      - "v1rdsconfigs"
      summary: "retrieve public and private (owned) RDS configurations"
      description: "An RDS Configuration describe a connection to an external Relational\
        \ Database Service that can be used as the Hive Metastore."
      operationId: "getPublicsRds"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/RDSConfigResponse"
      x-swagger-router-controller: "V1rdsconfigs"
    post:
      tags:
      - "v1rdsconfigs"
      summary: "create RDS configuration as public resource"
      description: "An RDS Configuration describe a connection to an external Relational\
        \ Database Service that can be used as the Hive Metastore."
      operationId: "postPublicRds"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RdsConfig"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RDSConfigResponse"
      x-swagger-router-controller: "V1rdsconfigs"
  /api/v1/rdsconfigs/account/{name}:
    get:
      tags:
      - "v1rdsconfigs"
      summary: "retrieve a public or private (owned) RDS configuration by name"
      description: "An RDS Configuration describe a connection to an external Relational\
        \ Database Service that can be used as the Hive Metastore."
      operationId: "getPublicRds"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RDSConfigResponse"
      x-swagger-router-controller: "V1rdsconfigs"
    delete:
      tags:
      - "v1rdsconfigs"
      summary: "delete public (owned) or private RDS configuration by name"
      description: "An RDS Configuration describe a connection to an external Relational\
        \ Database Service that can be used as the Hive Metastore."
      operationId: "deletePublicRds"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1rdsconfigs"
  /api/v1/rdsconfigs/testconnect:
    post:
      tags:
      - "v1rdsconfigs"
      summary: "test RDS connectivity"
      description: "An RDS Configuration describe a connection to an external Relational\
        \ Database Service that can be used as the Hive Metastore."
      operationId: "testRdsConnection"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RdsTestRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RdsTestResult"
      x-swagger-router-controller: "V1rdsconfigs"
  /api/v1/rdsconfigs/user:
    get:
      tags:
      - "v1rdsconfigs"
      summary: "retrieve private RDS configurations"
      description: "An RDS Configuration describe a connection to an external Relational\
        \ Database Service that can be used as the Hive Metastore."
      operationId: "getPrivatesRds"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/RDSConfigResponse"
      x-swagger-router-controller: "V1rdsconfigs"
    post:
      tags:
      - "v1rdsconfigs"
      summary: "create RDS configuration as private resource"
      description: "An RDS Configuration describe a connection to an external Relational\
        \ Database Service that can be used as the Hive Metastore."
      operationId: "postPrivateRds"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RdsConfig"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RDSConfigResponse"
      x-swagger-router-controller: "V1rdsconfigs"
  /api/v1/rdsconfigs/user/{name}:
    get:
      tags:
      - "v1rdsconfigs"
      summary: "retrieve a private RDS configuration by name"
      description: "An RDS Configuration describe a connection to an external Relational\
        \ Database Service that can be used as the Hive Metastore."
      operationId: "getPrivateRds"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RDSConfigResponse"
      x-swagger-router-controller: "V1rdsconfigs"
    delete:
      tags:
      - "v1rdsconfigs"
      summary: "delete private RDS configuration by name"
      description: "An RDS Configuration describe a connection to an external Relational\
        \ Database Service that can be used as the Hive Metastore."
      operationId: "deletePrivateRds"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1rdsconfigs"
  /api/v1/rdsconfigs/{id}:
    get:
      tags:
      - "v1rdsconfigs"
      summary: "retrieve RDS configuration by id"
      description: "An RDS Configuration describe a connection to an external Relational\
        \ Database Service that can be used as the Hive Metastore."
      operationId: "getRds"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RDSConfigResponse"
      x-swagger-router-controller: "V1rdsconfigs"
    delete:
      tags:
      - "v1rdsconfigs"
      summary: "delete RDS configuration by id"
      description: "An RDS Configuration describe a connection to an external Relational\
        \ Database Service that can be used as the Hive Metastore."
      operationId: "deleteRds"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1rdsconfigs"
  /api/v1/recipes/account:
    get:
      tags:
      - "v1recipes"
      summary: "retrieve public and private (owned) recipes"
      description: "Recipes are basically script extensions to a cluster that run\
        \ on a set of nodes before or after the Ambari cluster installation."
      operationId: "getPublicsRecipe"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/RecipeResponse"
      x-swagger-router-controller: "V1recipes"
    post:
      tags:
      - "v1recipes"
      summary: "create recipe as public resource"
      description: "Recipes are basically script extensions to a cluster that run\
        \ on a set of nodes before or after the Ambari cluster installation."
      operationId: "postPublicRecipe"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RecipeRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RecipeResponse"
      x-swagger-router-controller: "V1recipes"
  /api/v1/recipes/account/{name}:
    get:
      tags:
      - "v1recipes"
      summary: "retrieve a public or private (owned) recipe by name"
      description: "Recipes are basically script extensions to a cluster that run\
        \ on a set of nodes before or after the Ambari cluster installation."
      operationId: "getPublicRecipe"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RecipeResponse"
      x-swagger-router-controller: "V1recipes"
    delete:
      tags:
      - "v1recipes"
      summary: "delete public (owned) or private recipe by name"
      description: "Recipes are basically script extensions to a cluster that run\
        \ on a set of nodes before or after the Ambari cluster installation."
      operationId: "deletePublicRecipe"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1recipes"
  /api/v1/recipes/user:
    get:
      tags:
      - "v1recipes"
      summary: "retrieve private recipes"
      description: "Recipes are basically script extensions to a cluster that run\
        \ on a set of nodes before or after the Ambari cluster installation."
      operationId: "getPrivatesRecipe"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/RecipeResponse"
      x-swagger-router-controller: "V1recipes"
    post:
      tags:
      - "v1recipes"
      summary: "create recipe as private resource"
      description: "Recipes are basically script extensions to a cluster that run\
        \ on a set of nodes before or after the Ambari cluster installation."
      operationId: "postPrivateRecipe"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RecipeRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RecipeResponse"
      x-swagger-router-controller: "V1recipes"
  /api/v1/recipes/user/{name}:
    get:
      tags:
      - "v1recipes"
      summary: "retrieve a private recipe by name"
      description: "Recipes are basically script extensions to a cluster that run\
        \ on a set of nodes before or after the Ambari cluster installation."
      operationId: "getPrivateRecipe"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RecipeResponse"
      x-swagger-router-controller: "V1recipes"
    delete:
      tags:
      - "v1recipes"
      summary: "delete private recipe by name"
      description: "Recipes are basically script extensions to a cluster that run\
        \ on a set of nodes before or after the Ambari cluster installation."
      operationId: "deletePrivateRecipe"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1recipes"
  /api/v1/recipes/{id}:
    get:
      tags:
      - "v1recipes"
      summary: "retrieve recipe by id"
      description: "Recipes are basically script extensions to a cluster that run\
        \ on a set of nodes before or after the Ambari cluster installation."
      operationId: "getRecipe"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RecipeResponse"
      x-swagger-router-controller: "V1recipes"
    delete:
      tags:
      - "v1recipes"
      summary: "delete recipe by id"
      description: "Recipes are basically script extensions to a cluster that run\
        \ on a set of nodes before or after the Ambari cluster installation."
      operationId: "deleteRecipe"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1recipes"
  /api/v1/recipes/{name}/request:
    get:
      tags:
      - "v1recipes"
      summary: "retrieve recipe request by recipe name"
      description: "Recipes are basically script extensions to a cluster that run\
        \ on a set of nodes before or after the Ambari cluster installation."
      operationId: "getRecipeRequestFromName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RecipeRequest"
      x-swagger-router-controller: "V1recipes"
  /api/v1/repositoryconfigs/validate:
    post:
      tags:
      - "v1repositoryconfigs"
      summary: "validate repository configs fields, check their availability"
      description: "Repository configs validation related operations"
      operationId: "postRepositoryConfigsValidation"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RepoConfigValidationRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RepoConfigValidationResponse"
      x-swagger-router-controller: "V1repositoryconfigs"
  /api/v1/securitygroups/account:
    get:
      tags:
      - "v1securitygroups"
      summary: "retrieve public and private (owned) security groups"
      description: "Different inbound security rules(group) could be configured by\
        \ using SecurityGroup resources and a group could be assigned to any Stack(cluster)."
      operationId: "getPublicsSecurityGroup"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/SecurityGroupResponse"
      x-swagger-router-controller: "V1securitygroups"
    post:
      tags:
      - "v1securitygroups"
      summary: "create security group as public resource"
      description: "Different inbound security rules(group) could be configured by\
        \ using SecurityGroup resources and a group could be assigned to any Stack(cluster)."
      operationId: "postPublicSecurityGroup"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SecurityGroupRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SecurityGroupResponse"
      x-swagger-router-controller: "V1securitygroups"
  /api/v1/securitygroups/account/{name}:
    get:
      tags:
      - "v1securitygroups"
      summary: "retrieve a public or private (owned) security group by name"
      description: "Different inbound security rules(group) could be configured by\
        \ using SecurityGroup resources and a group could be assigned to any Stack(cluster)."
      operationId: "getPublicSecurityGroup"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SecurityGroupResponse"
      x-swagger-router-controller: "V1securitygroups"
    delete:
      tags:
      - "v1securitygroups"
      summary: "delete public (owned) or private security group by name"
      description: "Different inbound security rules(group) could be configured by\
        \ using SecurityGroup resources and a group could be assigned to any Stack(cluster)."
      operationId: "deletePublicSecurityGroup"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1securitygroups"
  /api/v1/securitygroups/user:
    get:
      tags:
      - "v1securitygroups"
      summary: "retrieve private security groups"
      description: "Different inbound security rules(group) could be configured by\
        \ using SecurityGroup resources and a group could be assigned to any Stack(cluster)."
      operationId: "getPrivatesSecurityGroup"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/SecurityGroupResponse"
      x-swagger-router-controller: "V1securitygroups"
    post:
      tags:
      - "v1securitygroups"
      summary: "create security group as private resource"
      description: "Different inbound security rules(group) could be configured by\
        \ using SecurityGroup resources and a group could be assigned to any Stack(cluster)."
      operationId: "postPrivateSecurityGroup"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SecurityGroupRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SecurityGroupResponse"
      x-swagger-router-controller: "V1securitygroups"
  /api/v1/securitygroups/user/{name}:
    get:
      tags:
      - "v1securitygroups"
      summary: "retrieve a private security group by name"
      description: "Different inbound security rules(group) could be configured by\
        \ using SecurityGroup resources and a group could be assigned to any Stack(cluster)."
      operationId: "getPrivateSecurityGroup"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SecurityGroupResponse"
      x-swagger-router-controller: "V1securitygroups"
    delete:
      tags:
      - "v1securitygroups"
      summary: "delete private security group by name"
      description: "Different inbound security rules(group) could be configured by\
        \ using SecurityGroup resources and a group could be assigned to any Stack(cluster)."
      operationId: "deletePrivateSecurityGroup"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1securitygroups"
  /api/v1/securitygroups/{id}:
    get:
      tags:
      - "v1securitygroups"
      summary: "retrieve security group by id"
      description: "Different inbound security rules(group) could be configured by\
        \ using SecurityGroup resources and a group could be assigned to any Stack(cluster)."
      operationId: "getSecurityGroup"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SecurityGroupResponse"
      x-swagger-router-controller: "V1securitygroups"
    delete:
      tags:
      - "v1securitygroups"
      summary: "delete security group by id"
      description: "Different inbound security rules(group) could be configured by\
        \ using SecurityGroup resources and a group could be assigned to any Stack(cluster)."
      operationId: "deleteSecurityGroup"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1securitygroups"
  /api/v1/securityrules/defaultsecurityrules:
    get:
      tags:
      - "v1securityrules"
      summary: "get default security rules"
      description: "Security Rules operations"
      operationId: "getDefaultSecurityRules"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SecurityRulesResponse"
      x-swagger-router-controller: "V1securityrules"
  /api/v1/settings/all:
    get:
      tags:
      - "v1settings"
      summary: "retrive all available settings"
      description: "Collecting Cloudbreak specific resource settings."
      operationId: "getAllSettings"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
              additionalProperties:
                type: "object"
                properties: {}
      x-swagger-router-controller: "V1settings"
  /api/v1/settings/database:
    get:
      tags:
      - "v1settings"
      summary: "retrive available Ambari database settings"
      description: "Collecting Cloudbreak specific resource settings."
      operationId: "getDatabaseConfigSettings"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
              properties: {}
      x-swagger-router-controller: "V1settings"
  /api/v1/settings/recipe:
    get:
      tags:
      - "v1settings"
      summary: "retrive available recipe settings"
      description: "Collecting Cloudbreak specific resource settings."
      operationId: "getRecipeSettings"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
              properties: {}
      x-swagger-router-controller: "V1settings"
  /api/v1/smartsensesubscriptions:
    get:
      tags:
      - "v1smartsensesubscriptions"
      summary: "retrieve default SmartSense subscription"
      description: "SmartSense subscriptions could be configured."
      operationId: "getSmartSenseSubscription"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SmartSenseSubscriptionJson"
      x-swagger-router-controller: "V1smartsensesubscriptions"
  /api/v1/smartsensesubscriptions/account:
    get:
      tags:
      - "v1smartsensesubscriptions"
      summary: "retrieve public and private (owned) SmartSense subscriptions"
      description: "SmartSense subscriptions could be configured."
      operationId: "getPublicSmartSenseSubscriptions"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SmartSenseSubscriptionJson"
      x-swagger-router-controller: "V1smartsensesubscriptions"
    post:
      tags:
      - "v1smartsensesubscriptions"
      summary: "create SmartSense subscription as public resource"
      description: "SmartSense subscriptions could be configured."
      operationId: "postPublicSmartSenseSubscription"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SmartSenseSubscriptionJson"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SmartSenseSubscriptionJson"
      x-swagger-router-controller: "V1smartsensesubscriptions"
  /api/v1/smartsensesubscriptions/account/{subscriptionId}:
    delete:
      tags:
      - "v1smartsensesubscriptions"
      summary: "delete public (owned) or private SmartSense subscription by subscription\
        \ ID"
      description: "SmartSense subscriptions could be configured."
      operationId: "deletePublicSmartSenseSubscriptionBySubscriptionId"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1smartsensesubscriptions"
  /api/v1/smartsensesubscriptions/user:
    get:
      tags:
      - "v1smartsensesubscriptions"
      summary: "retrieve private SmartSense subscriptions"
      description: "SmartSense subscriptions could be configured."
      operationId: "getPrivateSmartSenseSubscriptions"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SmartSenseSubscriptionJson"
      x-swagger-router-controller: "V1smartsensesubscriptions"
    post:
      tags:
      - "v1smartsensesubscriptions"
      summary: "create SmartSense subscription as private resource"
      description: "SmartSense subscriptions could be configured."
      operationId: "postPrivateSmartSenseSubscription"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SmartSenseSubscriptionJson"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SmartSenseSubscriptionJson"
      x-swagger-router-controller: "V1smartsensesubscriptions"
  /api/v1/smartsensesubscriptions/user/{subscriptionId}:
    delete:
      tags:
      - "v1smartsensesubscriptions"
      summary: "delete private SmartSense subscription by subscription ID"
      description: "SmartSense subscriptions could be configured."
      operationId: "deletePrivateSmartSenseSubscriptionBySubscriptionId"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1smartsensesubscriptions"
  /api/v1/smartsensesubscriptions/{id}:
    get:
      tags:
      - "v1smartsensesubscriptions"
      summary: "retrieve SmartSense subscription by id"
      description: "SmartSense subscriptions could be configured."
      operationId: "getSmartSenseSubscriptionById"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SmartSenseSubscriptionJson"
      x-swagger-router-controller: "V1smartsensesubscriptions"
    delete:
      tags:
      - "v1smartsensesubscriptions"
      summary: "delete SmartSense subscription by id"
      description: "SmartSense subscriptions could be configured."
      operationId: "deleteSmartSenseSubscriptionById"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1smartsensesubscriptions"
  /api/v1/stacks/account:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve public and private (owned) stacks"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getPublicsStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/account/{name}:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve a public or private (owned) stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getPublicStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "entry"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V1stacks"
    delete:
      tags:
      - "v1stacks"
      summary: "delete public (owned) or private stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "deletePublicStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "forced"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "deleteDependencies"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/account/{name}/cluster:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve cluster by stack name (public)"
      description: "Clusters are materialised Hadoop services on a given infrastructure.\
        \ They are built based on a Blueprint (running the components and services\
        \ specified) and on a configured infrastructure Stack. Once a cluster is created\
        \ and launched, it can be used the usual way as any Hadoop cluster. We suggest\
        \ to start with the Cluster's Ambari UI for an overview of your cluster."
      operationId: "getPublicCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClusterResponse"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/all:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve all stacks"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getAllStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/AutoscaleStackResponse"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/ambari:
    post:
      tags:
      - "v1stacks"
      summary: "retrieve stack by ambari address"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getStackForAmbari"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AmbariAddress"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/platformVariants:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve available platform variants"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "variantsStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformVariantsJson"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/user:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve private stack"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getPrivatesStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/user/{name}:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve a private stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getPrivateStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "entry"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V1stacks"
    delete:
      tags:
      - "v1stacks"
      summary: "delete private stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "deletePrivateStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "forced"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "deleteDependencies"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/user/{name}/cluster:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve cluster by stack name (private)"
      description: "Clusters are materialised Hadoop services on a given infrastructure.\
        \ They are built based on a Blueprint (running the components and services\
        \ specified) and on a configured infrastructure Stack. Once a cluster is created\
        \ and launched, it can be used the usual way as any Hadoop cluster. We suggest\
        \ to start with the Cluster's Ambari UI for an overview of your cluster."
      operationId: "getPrivateCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClusterResponse"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/validate:
    post:
      tags:
      - "v1stacks"
      summary: "validate stack"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "validateStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/StackValidationRequest"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/{id}:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve stack by id"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "entry"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V1stacks"
    put:
      tags:
      - "v1stacks"
      summary: "update stack by id"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "putStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateStack"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1stacks"
    delete:
      tags:
      - "v1stacks"
      summary: "delete stack by id"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "deleteStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "forced"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "deleteDependencies"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/{id}/certificate:
    get:
      tags:
      - "v1stacks"
      summary: "retrieves the TLS certificate used by the gateway"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getCertificateStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CertificateResponse"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/{id}/cluster:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve cluster by stack id"
      description: "Clusters are materialised Hadoop services on a given infrastructure.\
        \ They are built based on a Blueprint (running the components and services\
        \ specified) and on a configured infrastructure Stack. Once a cluster is created\
        \ and launched, it can be used the usual way as any Hadoop cluster. We suggest\
        \ to start with the Cluster's Ambari UI for an overview of your cluster."
      operationId: "getCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClusterResponse"
      x-swagger-router-controller: "V1stacks"
    post:
      tags:
      - "v1stacks"
      summary: "create cluster for stack"
      description: "Clusters are materialised Hadoop services on a given infrastructure.\
        \ They are built based on a Blueprint (running the components and services\
        \ specified) and on a configured infrastructure Stack. Once a cluster is created\
        \ and launched, it can be used the usual way as any Hadoop cluster. We suggest\
        \ to start with the Cluster's Ambari UI for an overview of your cluster."
      operationId: "postCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ClusterRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClusterResponse"
      x-swagger-router-controller: "V1stacks"
    put:
      tags:
      - "v1stacks"
      summary: "update cluster by stack id"
      description: "Clusters are materialised Hadoop services on a given infrastructure.\
        \ They are built based on a Blueprint (running the components and services\
        \ specified) and on a configured infrastructure Stack. Once a cluster is created\
        \ and launched, it can be used the usual way as any Hadoop cluster. We suggest\
        \ to start with the Cluster's Ambari UI for an overview of your cluster."
      operationId: "putCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateCluster"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1stacks"
    delete:
      tags:
      - "v1stacks"
      summary: "delete cluster on a specific stack"
      description: "Clusters are materialised Hadoop services on a given infrastructure.\
        \ They are built based on a Blueprint (running the components and services\
        \ specified) and on a configured infrastructure Stack. Once a cluster is created\
        \ and launched, it can be used the usual way as any Hadoop cluster. We suggest\
        \ to start with the Cluster's Ambari UI for an overview of your cluster."
      operationId: "deleteCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "withStackDelete"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "deleteDependencies"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/{id}/cluster/config:
    post:
      tags:
      - "v1stacks"
      summary: "get cluster properties with blueprint outputs"
      description: "Clusters are materialised Hadoop services on a given infrastructure.\
        \ They are built based on a Blueprint (running the components and services\
        \ specified) and on a configured infrastructure Stack. Once a cluster is created\
        \ and launched, it can be used the usual way as any Hadoop cluster. We suggest\
        \ to start with the Cluster's Ambari UI for an overview of your cluster."
      operationId: "getConfigsCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ConfigsRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConfigsResponse"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/{id}/cluster/failurereport:
    post:
      tags:
      - "v1stacks"
      summary: "failure report"
      description: "Endpoint to report the failed nodes in the given cluster. If recovery\
        \ mode for the node's hostgroup is AUTO then autorecovery would be started.\
        \ If recovery mode for the node's hostgroup is MANUAL, the nodes will be marked\
        \ as unhealthy."
      operationId: "failureReportCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FailureReport"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/{id}/cluster/full:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve cluster by stack id"
      description: "Clusters are materialised Hadoop services on a given infrastructure.\
        \ They are built based on a Blueprint (running the components and services\
        \ specified) and on a configured infrastructure Stack. Once a cluster is created\
        \ and launched, it can be used the usual way as any Hadoop cluster. We suggest\
        \ to start with the Cluster's Ambari UI for an overview of your cluster."
      operationId: "getFullCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/{id}/cluster/manualrepair:
    post:
      tags:
      - "v1stacks"
      summary: "repair the cluster"
      description: "Removing the failed nodes and starting new nodes to substitute\
        \ them."
      operationId: "repairCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ClusterRepairRequest"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/{id}/cluster/upgrade:
    post:
      tags:
      - "v1stacks"
      summary: "upgrade the Ambari version"
      description: "Ambari is used to provision the Hadoop clusters."
      operationId: "upgradeCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AmbariRepoDetails"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/{id}/status:
    get:
      tags:
      - "v1stacks"
      summary: "retrieve stack status by stack id"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "statusStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
              properties: {}
      x-swagger-router-controller: "V1stacks"
  /api/v1/stacks/{stackId}/{instanceId}:
    delete:
      tags:
      - "v1stacks"
      summary: "delete instance resource from stack"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "deleteInstanceStack"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "stackId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "instanceId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1stacks"
  /api/v1/subscriptions:
    post:
      tags:
      - "v1subscriptions"
      summary: "retrive subscribe identifier"
      description: "Accepting client subscriptions to notification events."
      operationId: "subscribeSubscription"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SubscriptionRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Id"
      x-swagger-router-controller: "V1subscriptions"
  /api/v1/templates/account:
    get:
      tags:
      - "v1templates"
      summary: "retrieve public and private (owned) templates"
      description: "A template gives developers and systems administrators an easy\
        \ way to create and manage a collection of cloud infrastructure related resources,\
        \ maintaining and updating them in an orderly and predictable fashion. Templates\
        \ are cloud specific - and on top of the infrastructural setup they collect\
        \ the information such as the used machine images, the datacenter location,\
        \ instance types, and can capture and control region-specific infrastructure\
        \ variations. We support heterogenous clusters - this one Hadoop cluster can\
        \ be built by combining different templates."
      operationId: "getPublicsTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/TemplateResponse"
      x-swagger-router-controller: "V1templates"
  /api/v1/templates/account/{name}:
    get:
      tags:
      - "v1templates"
      summary: "retrieve a public or private (owned) template by name"
      description: "A template gives developers and systems administrators an easy\
        \ way to create and manage a collection of cloud infrastructure related resources,\
        \ maintaining and updating them in an orderly and predictable fashion. Templates\
        \ are cloud specific - and on top of the infrastructural setup they collect\
        \ the information such as the used machine images, the datacenter location,\
        \ instance types, and can capture and control region-specific infrastructure\
        \ variations. We support heterogenous clusters - this one Hadoop cluster can\
        \ be built by combining different templates."
      operationId: "getPublicTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TemplateResponse"
      x-swagger-router-controller: "V1templates"
    delete:
      tags:
      - "v1templates"
      summary: "delete public (owned) or private template by name"
      description: "A template gives developers and systems administrators an easy\
        \ way to create and manage a collection of cloud infrastructure related resources,\
        \ maintaining and updating them in an orderly and predictable fashion. Templates\
        \ are cloud specific - and on top of the infrastructural setup they collect\
        \ the information such as the used machine images, the datacenter location,\
        \ instance types, and can capture and control region-specific infrastructure\
        \ variations. We support heterogenous clusters - this one Hadoop cluster can\
        \ be built by combining different templates."
      operationId: "deletePublicTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1templates"
  /api/v1/templates/user:
    get:
      tags:
      - "v1templates"
      summary: "retrieve private templates"
      description: "A template gives developers and systems administrators an easy\
        \ way to create and manage a collection of cloud infrastructure related resources,\
        \ maintaining and updating them in an orderly and predictable fashion. Templates\
        \ are cloud specific - and on top of the infrastructural setup they collect\
        \ the information such as the used machine images, the datacenter location,\
        \ instance types, and can capture and control region-specific infrastructure\
        \ variations. We support heterogenous clusters - this one Hadoop cluster can\
        \ be built by combining different templates."
      operationId: "getPrivatesTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/TemplateResponse"
      x-swagger-router-controller: "V1templates"
  /api/v1/templates/user/{name}:
    get:
      tags:
      - "v1templates"
      summary: "retrieve a private template by name"
      description: "A template gives developers and systems administrators an easy\
        \ way to create and manage a collection of cloud infrastructure related resources,\
        \ maintaining and updating them in an orderly and predictable fashion. Templates\
        \ are cloud specific - and on top of the infrastructural setup they collect\
        \ the information such as the used machine images, the datacenter location,\
        \ instance types, and can capture and control region-specific infrastructure\
        \ variations. We support heterogenous clusters - this one Hadoop cluster can\
        \ be built by combining different templates."
      operationId: "getPrivateTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TemplateResponse"
      x-swagger-router-controller: "V1templates"
    delete:
      tags:
      - "v1templates"
      summary: "delete private template by name"
      description: "A template gives developers and systems administrators an easy\
        \ way to create and manage a collection of cloud infrastructure related resources,\
        \ maintaining and updating them in an orderly and predictable fashion. Templates\
        \ are cloud specific - and on top of the infrastructural setup they collect\
        \ the information such as the used machine images, the datacenter location,\
        \ instance types, and can capture and control region-specific infrastructure\
        \ variations. We support heterogenous clusters - this one Hadoop cluster can\
        \ be built by combining different templates."
      operationId: "deletePrivateTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1templates"
  /api/v1/templates/{id}:
    get:
      tags:
      - "v1templates"
      summary: "retrieve template by id"
      description: "A template gives developers and systems administrators an easy\
        \ way to create and manage a collection of cloud infrastructure related resources,\
        \ maintaining and updating them in an orderly and predictable fashion. Templates\
        \ are cloud specific - and on top of the infrastructural setup they collect\
        \ the information such as the used machine images, the datacenter location,\
        \ instance types, and can capture and control region-specific infrastructure\
        \ variations. We support heterogenous clusters - this one Hadoop cluster can\
        \ be built by combining different templates."
      operationId: "getTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TemplateResponse"
      x-swagger-router-controller: "V1templates"
    delete:
      tags:
      - "v1templates"
      summary: "delete template by id"
      description: "A template gives developers and systems administrators an easy\
        \ way to create and manage a collection of cloud infrastructure related resources,\
        \ maintaining and updating them in an orderly and predictable fashion. Templates\
        \ are cloud specific - and on top of the infrastructural setup they collect\
        \ the information such as the used machine images, the datacenter location,\
        \ instance types, and can capture and control region-specific infrastructure\
        \ variations. We support heterogenous clusters - this one Hadoop cluster can\
        \ be built by combining different templates."
      operationId: "deleteTemplate"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1templates"
  /api/v1/topologies/account:
    get:
      tags:
      - "v1topologies"
      summary: "retrieve topoligies"
      description: "A topology gives system administrators an easy way to associate\
        \ compute nodes with data centers and racks."
      operationId: "getPublicsTopology"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/TopologyResponse"
      x-swagger-router-controller: "V1topologies"
    post:
      tags:
      - "v1topologies"
      summary: "create topology as public resource"
      description: "A topology gives system administrators an easy way to associate\
        \ compute nodes with data centers and racks."
      operationId: "postPublicTopology"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TopologyRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TopologyResponse"
      x-swagger-router-controller: "V1topologies"
  /api/v1/topologies/account/{id}:
    get:
      tags:
      - "v1topologies"
      summary: "retrieve topology by id"
      description: "A template gives developers and systems administrators an easy\
        \ way to create and manage a collection of cloud infrastructure related resources,\
        \ maintaining and updating them in an orderly and predictable fashion. Templates\
        \ are cloud specific - and on top of the infrastructural setup they collect\
        \ the information such as the used machine images, the datacenter location,\
        \ instance types, and can capture and control region-specific infrastructure\
        \ variations. We support heterogenous clusters - this one Hadoop cluster can\
        \ be built by combining different templates."
      operationId: "getTopology"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TopologyResponse"
      x-swagger-router-controller: "V1topologies"
    delete:
      tags:
      - "v1topologies"
      summary: "delete topology by id"
      description: "A topology gives system administrators an easy way to associate\
        \ compute nodes with data centers and racks."
      operationId: "deleteTopology"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "forced"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1topologies"
  /api/v1/usages:
    get:
      tags:
      - "v1usages"
      summary: "retrieve usages by filter parameters"
      description: "Cloudbreak gives you an up to date overview of cluster usage based\
        \ on different filtering criteria (start/end date, users, providers, region,\
        \ etc)"
      operationId: "getDeployerUsage"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "since"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "filterenddate"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "user"
        in: "query"
        required: false
        type: "string"
      - name: "account"
        in: "query"
        required: false
        type: "string"
      - name: "cloud"
        in: "query"
        required: false
        type: "string"
      - name: "zone"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CloudbreakUsage"
      x-swagger-router-controller: "V1usages"
  /api/v1/usages/account:
    get:
      tags:
      - "v1usages"
      summary: "retrieve public and private (owned) usages by filter parameters"
      description: "Cloudbreak gives you an up to date overview of cluster usage based\
        \ on different filtering criteria (start/end date, users, providers, region,\
        \ etc)"
      operationId: "getAccountUsage"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "since"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "filterenddate"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "user"
        in: "query"
        required: false
        type: "string"
      - name: "cloud"
        in: "query"
        required: false
        type: "string"
      - name: "zone"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CloudbreakUsage"
      x-swagger-router-controller: "V1usages"
  /api/v1/usages/flex/daily:
    get:
      tags:
      - "v1usages"
      summary: "retrieve Flex related daily usages"
      description: "Cloudbreak gives you an up to date overview of cluster usage based\
        \ on different filtering criteria (start/end date, users, providers, region,\
        \ etc)"
      operationId: "getDailyFlexUsage"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CloudbreakFlexUsage"
      x-swagger-router-controller: "V1usages"
  /api/v1/usages/flex/latest:
    get:
      tags:
      - "v1usages"
      summary: "retrieve Flex related latest usages, usages for the given day"
      description: "Cloudbreak gives you an up to date overview of cluster usage based\
        \ on different filtering criteria (start/end date, users, providers, region,\
        \ etc)"
      operationId: "getLatestFlexUsage"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CloudbreakFlexUsage"
      x-swagger-router-controller: "V1usages"
  /api/v1/usages/user:
    get:
      tags:
      - "v1usages"
      summary: "retrieve private usages by filter parameters"
      description: "Cloudbreak gives you an up to date overview of cluster usage based\
        \ on different filtering criteria (start/end date, users, providers, region,\
        \ etc)"
      operationId: "getUserUsage"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "since"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "filterenddate"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "cloud"
        in: "query"
        required: false
        type: "string"
      - name: "zone"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CloudbreakUsage"
      x-swagger-router-controller: "V1usages"
  /api/v1/users/evict:
    delete:
      tags:
      - "v1users"
      summary: "remove current user from cache"
      description: "Users can be invited under an account by the administrator, and\
        \ all resources (e.g. resources, networks, blueprints, credentials, clusters)\
        \ can be shared across account users"
      operationId: "evictCurrentUserDetails"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
      x-swagger-router-controller: "V1users"
  /api/v1/users/profile:
    get:
      tags:
      - "v1users"
      summary: "user related profile"
      description: "Users can be invited under an account by the administrator, and\
        \ all resources (e.g. resources, networks, blueprints, credentials, clusters)\
        \ can be shared across account users"
      operationId: "getUserProfile"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfileResponse"
      x-swagger-router-controller: "V1users"
    put:
      tags:
      - "v1users"
      summary: "modify user related profile"
      description: "Users can be invited under an account by the administrator, and\
        \ all resources (e.g. resources, networks, blueprints, credentials, clusters)\
        \ can be shared across account users"
      operationId: "modifyProfile"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserProfileRequest"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1users"
  /api/v1/users/{id}:
    put:
      tags:
      - "v1users"
      summary: "remove user from cache (by username)"
      description: "Users can be invited under an account by the administrator, and\
        \ all resources (e.g. resources, networks, blueprints, credentials, clusters)\
        \ can be shared across account users"
      operationId: "evictUserDetails"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      x-swagger-router-controller: "V1users"
  /api/v1/users/{id}/resources:
    get:
      tags:
      - "v1users"
      summary: "check that account user has any resources"
      description: "Users can be invited under an account by the administrator, and\
        \ all resources (e.g. resources, networks, blueprints, credentials, clusters)\
        \ can be shared across account users"
      operationId: "hasResourcesUser"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
      x-swagger-router-controller: "V1users"
  /api/v1/util/ambari-database:
    post:
      tags:
      - "v1util"
      summary: "tests a database connection parameters"
      description: ""
      operationId: "testAmbariDatabaseUtil"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AmbariDatabaseDetails"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AmbariDatabaseTestResult"
      x-swagger-router-controller: "V1util"
  /api/v1/util/client/{version}:
    get:
      tags:
      - "v1util"
      summary: "checks the client version"
      description: ""
      operationId: "checkClientVersion"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionCheckResult"
      x-swagger-router-controller: "V1util"
  /api/v1/util/rds-database:
    post:
      tags:
      - "v1util"
      summary: "create a database for the service in the RDS if the connection could\
        \ be created"
      description: ""
      operationId: "createRDSDatabaseUtil"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RDSBuildRequest"
      - name: "target"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RdsBuildResult"
      x-swagger-router-controller: "V1util"
  /api/v1/util/stackmatrix:
    get:
      tags:
      - "v1util"
      summary: "returns default ambari details for distinct HDP and HDF"
      description: ""
      operationId: "getStackMatrixUtil"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackMatrix"
      x-swagger-router-controller: "V1util"
  /api/v2/connectors/regions:
    post:
      tags:
      - "v2connectors"
      summary: "retrive regions by type"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getRegionsByCredentialId"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PlatformResourceRequestJson"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RegionResponse"
      x-swagger-router-controller: "V2connectors"
  /api/v2/connectors/vmtypes:
    post:
      tags:
      - "v2connectors"
      summary: "retrive vmtype properties by credential"
      description: "Each cloud provider has it's own specific resources like instance\
        \ types and disk types. These endpoints are collecting them."
      operationId: "getVmTypesByCredentialId"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PlatformResourceRequestJson"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformVmtypesResponse"
      x-swagger-router-controller: "V2connectors"
  /api/v2/stacks/account:
    get:
      tags:
      - "v2stacks"
      summary: "retrieve public and private (owned) stacks"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getPublicsStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V2stacks"
    post:
      tags:
      - "v2stacks"
      summary: "create stack as public resource"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "postPublicStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/StackV2Request"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/account/{name}:
    get:
      tags:
      - "v2stacks"
      summary: "retrieve a public or private (owned) stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getPublicStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "entry"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V2stacks"
    delete:
      tags:
      - "v2stacks"
      summary: "delete public (owned) or private stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "deletePublicStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "forced"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "deleteDependencies"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/all:
    get:
      tags:
      - "v2stacks"
      summary: "retrieve all stacks"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getAllStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/AutoscaleStackResponse"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/ambari:
    post:
      tags:
      - "v2stacks"
      summary: "retrieve stack by ambari address"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getStackForAmbariV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AmbariAddress"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/ambari_password/{name}:
    put:
      tags:
      - "v2stacks"
      summary: "update stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "putpasswordStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserNamePassword"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/blueprint:
    post:
      tags:
      - "v2stacks"
      summary: "create stack as public resource for blueprint"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "postPublicStackV2ForBlueprint"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/StackV2Request"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GeneratedBlueprintResponse"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/platformVariants:
    get:
      tags:
      - "v2stacks"
      summary: "retrieve available platform variants"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "variantsStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlatformVariantsJson"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/reinstall/{name}:
    put:
      tags:
      - "v2stacks"
      summary: "update stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "putreinstallStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ReinstallRequestV2"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/repair/{name}:
    put:
      tags:
      - "v2stacks"
      summary: "update stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "putrepairStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/scaling/{name}:
    put:
      tags:
      - "v2stacks"
      summary: "update stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "putscalingStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/StackScaleRequestV2"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/start/{name}:
    put:
      tags:
      - "v2stacks"
      summary: "update stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "putstartStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/stop/{name}:
    put:
      tags:
      - "v2stacks"
      summary: "update stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "putstopStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/sync/{name}:
    put:
      tags:
      - "v2stacks"
      summary: "update stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "putsyncStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/user:
    get:
      tags:
      - "v2stacks"
      summary: "retrieve private stack"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getPrivatesStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            uniqueItems: true
            items:
              $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V2stacks"
    post:
      tags:
      - "v2stacks"
      summary: "create stack as private resource"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "postPrivateStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/StackV2Request"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/user/{name}:
    get:
      tags:
      - "v2stacks"
      summary: "retrieve a private stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getPrivateStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "entry"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V2stacks"
    delete:
      tags:
      - "v2stacks"
      summary: "delete private stack by name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "deletePrivateStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "forced"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "deleteDependencies"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/validate:
    post:
      tags:
      - "v2stacks"
      summary: "validate stack"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "validateStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/StackValidationRequest"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/{id}:
    get:
      tags:
      - "v2stacks"
      summary: "retrieve stack by id"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "entry"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackResponse"
      x-swagger-router-controller: "V2stacks"
    delete:
      tags:
      - "v2stacks"
      summary: "delete stack by id"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "deleteStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "forced"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "deleteDependencies"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/{id}/certificate:
    get:
      tags:
      - "v2stacks"
      summary: "retrieves the TLS certificate used by the gateway"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getCertificateStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CertificateResponse"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/{id}/status:
    get:
      tags:
      - "v2stacks"
      summary: "retrieve stack status by stack id"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "statusStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
              properties: {}
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/{name}/request:
    get:
      tags:
      - "v2stacks"
      summary: "retrieve stack request by stack name"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "getClusterRequestFromName"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StackV2Request"
      x-swagger-router-controller: "V2stacks"
  /api/v2/stacks/{stackId}/{instanceId}:
    delete:
      tags:
      - "v2stacks"
      summary: "delete instance resource from stack"
      description: "Stacks are template instances - a running cloud infrastructure\
        \ created based on a template. Stacks are always launched on behalf of a cloud\
        \ user account. Stacks support a wide range of resources, allowing you to\
        \ build a highly available, reliable, and scalable infrastructure for your\
        \ application needs."
      operationId: "deleteInstanceStackV2"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "stackId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "instanceId"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2stacks"
definitions:
  ConstraintTemplateResponse:
    type: "object"
    required:
    - "cpu"
    - "disk"
    - "memory"
    - "name"
    - "orchestratorType"
    - "publicInAccount"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      cpu:
        type: "number"
        format: "double"
        description: "number of CPU cores needed for the Ambari node"
      memory:
        type: "number"
        format: "double"
        description: "memory needed for the Ambari container (GB)"
      disk:
        type: "number"
        format: "double"
        description: "disk size needed for an Ambari node (GB)"
      orchestratorType:
        type: "string"
        description: "type of orchestrator"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      publicInAccount:
        type: "boolean"
        description: "resource is visible in account"
        default: false
    example:
      orchestratorType: "orchestratorType"
      disk: 1.46581298050294517310021547018550336360931396484375
      memory: 6.02745618307040320615897144307382404804229736328125
      publicInAccount: false
      name: "name"
      description: "description"
      cpu: 0.80082819046101150206595775671303272247314453125
      id: 5
  SharedService:
    type: "object"
    properties:
      sharedCluster:
        type: "string"
    example:
      sharedCluster: "sharedCluster"
  ManagementPackRequest:
    type: "object"
    required:
    - "mpackUrl"
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      mpackUrl:
        type: "string"
        description: "url of the ambari management pack"
      purge:
        type: "boolean"
        description: "if true, management pack will be installed with '--purge' flag"
        default: false
      purgeList:
        type: "array"
        description: "if provided, management pack will be installed with '--purgeList'\
          \ option with this values"
        items:
          type: "string"
      force:
        type: "boolean"
        description: "if true, management pack will be installed with '--force' flag"
        default: false
    example:
      name: "name"
      description: "description"
      purge: false
      force: false
      mpackUrl: "mpackUrl"
      purgeList:
      - "purgeList"
      - "purgeList"
  instanceGroupsV2:
    type: "object"
    required:
    - "group"
    - "nodeCount"
    - "template"
    properties:
      nodeCount:
        type: "integer"
        format: "int32"
        description: "number of nodes"
        minimum: 0.0
        maximum: 100000.0
      group:
        type: "string"
        description: "name of the instance group"
      type:
        type: "string"
        description: "type of the instance group"
        enum:
        - "GATEWAY"
        - "CORE"
      parameters:
        type: "object"
        description: "cloud specific parameters for instance group"
        additionalProperties:
          type: "object"
          properties: {}
      template:
        description: "instancegroup related template"
        $ref: "#/definitions/TemplateV2Request"
      securityGroup:
        description: "instancegroup related securitygroup"
        $ref: "#/definitions/SecurityGroupV2Request"
      recipeNames:
        type: "array"
        description: "referenced recipe names"
        uniqueItems: true
        items:
          type: "string"
      recoveryMode:
        type: "string"
        description: "recovery mode of the hostgroup's nodes"
        enum:
        - "MANUAL"
        - "AUTO"
    example:
      template:
        volumeType: "volumeType"
        instanceType: "instanceType"
        customInstanceType:
          memory: 5
          cpus: 9
        volumeCount: 6
        parameters:
          key: "{}"
        volumeSize: 1
      recipeNames:
      - "recipeNames"
      - "recipeNames"
      recoveryMode: "MANUAL"
      nodeCount: 8008
      securityGroup:
        securityGroupId: "securityGroupId"
        securityRules:
        - subnet: "subnet"
          protocol: "protocol"
          ports: "ports"
          modifiable: false
        - subnet: "subnet"
          protocol: "protocol"
          ports: "ports"
          modifiable: false
      type: "GATEWAY"
      parameters:
        key: "{}"
      group: "group"
  ClusterRequest:
    type: "object"
    required:
    - "name"
    - "password"
    - "userName"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 40
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      blueprintId:
        type: "integer"
        format: "int64"
        description: "blueprint id for the cluster"
      blueprintName:
        type: "string"
        description: "blueprint name for the cluster"
      blueprint:
        description: "blueprint for the cluster"
        $ref: "#/definitions/BlueprintRequest"
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      hostGroups:
        type: "array"
        description: "collection of hostgroups"
        uniqueItems: true
        items:
          $ref: "#/definitions/HostGroupRequest"
      emailNeeded:
        type: "boolean"
        description: "send email about the result of the cluster installation"
        default: false
      emailTo:
        type: "string"
        description: "send email to the requested address"
      gateway:
        $ref: "#/definitions/GatewayJson"
      enableSecurity:
        type: "boolean"
        description: "enable Kerberos security"
        default: false
      userName:
        type: "string"
        description: "ambari username"
        minLength: 5
        maxLength: 15
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      password:
        type: "string"
        description: "ambari password"
        minLength: 5
        maxLength: 100
      kerberos:
        $ref: "#/definitions/KerberosRequest"
      ldapConfigId:
        type: "integer"
        format: "int64"
        description: "LDAP config id for the cluster"
      ldapConfigName:
        type: "string"
        description: "LDAP config name for the cluster"
      ldapConfig:
        description: "LDAP config for the cluster"
        $ref: "#/definitions/LdapConfigRequest"
      validateBlueprint:
        type: "boolean"
        description: "blueprint validation"
        default: false
      ambariStackDetails:
        description: "details of the Ambari stack"
        $ref: "#/definitions/AmbariStackDetails"
      ambariRepoDetailsJson:
        description: "details of the Ambari package repository"
        $ref: "#/definitions/AmbariRepoDetails"
      rdsConfigIds:
        type: "array"
        description: "RDS configuration ids for the cluster"
        uniqueItems: true
        items:
          type: "integer"
          format: "int64"
      rdsConfigNames:
        type: "array"
        description: "RDS configuration names for the cluster"
        uniqueItems: true
        items:
          type: "string"
      ambariDatabaseDetails:
        description: "[DEPRECATED] use RdsConfig instead! details of the external\
          \ Ambari database"
        $ref: "#/definitions/AmbariDatabaseDetails"
      rdsConfigJsons:
        type: "array"
        description: "details of the external database for Hadoop components"
        uniqueItems: true
        items:
          $ref: "#/definitions/RdsConfig"
      fileSystem:
        description: "external file system configuration"
        $ref: "#/definitions/FileSystem"
      configStrategy:
        type: "string"
        description: "config recommendation strategy"
        enum:
        - "NEVER_APPLY"
        - "ONLY_STACK_DEFAULTS_APPLY"
        - "ALWAYS_APPLY"
        - "ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"
      blueprintInputs:
        type: "array"
        description: "blueprint inputs in the cluster"
        uniqueItems: true
        items:
          $ref: "#/definitions/BlueprintInput"
      blueprintCustomProperties:
        type: "string"
        description: "blueprint custom properties"
      customContainer:
        description: "custom containers"
        $ref: "#/definitions/CustomContainerRequest"
      customQueue:
        type: "string"
        description: "custom queue for yarn orchestrator"
      executorType:
        type: "string"
        description: "executor type of cluster"
        enum:
        - "CONTAINER"
        - "DEFAULT"
      connectedCluster:
        description: "cluster can connect to a datalake you can define the parameters\
          \ here"
        $ref: "#/definitions/ConnectedClusterRequest"
      ambariSecurityMasterKey:
        type: "string"
        description: "a master key for encrypting the passwords in Ambari"
        minLength: 5
        maxLength: 100
      proxyName:
        type: "string"
        description: "proxy configuration name for the cluster"
    example:
      ambariRepoDetailsJson:
        baseUrl: "baseUrl"
        version: "version"
        gpgKeyUrl: "gpgKeyUrl"
      hostGroups:
      - recipes:
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        recipeIds:
        - 0
        - 0
        recipeNames:
        - "recipeNames"
        - "recipeNames"
        recoveryMode: "MANUAL"
        name: "name"
        constraint:
          hostCount: 9
          constraintTemplateName: "constraintTemplateName"
          instanceGroupName: "instanceGroupName"
      - recipes:
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        recipeIds:
        - 0
        - 0
        recipeNames:
        - "recipeNames"
        - "recipeNames"
        recoveryMode: "MANUAL"
        name: "name"
        constraint:
          hostCount: 9
          constraintTemplateName: "constraintTemplateName"
          instanceGroupName: "instanceGroupName"
      ambariSecurityMasterKey: "ambariSecurityMasterKey"
      proxyName: "proxyName"
      blueprintName: "blueprintName"
      ldapConfigName: "ldapConfigName"
      description: "description"
      kerberos:
        principal: "principal"
        password: "password"
        krb5Conf: "krb5Conf"
        masterKey: "masterKey"
        ldapUrl: "ldapUrl"
        admin: "admin"
        realm: "realm"
        containerDn: "containerDn"
        descriptor: "descriptor"
        adminUrl: "adminUrl"
        url: "url"
        tcpAllowed: false
      configStrategy: "NEVER_APPLY"
      password: "password"
      validateBlueprint: false
      ambariStackDetails:
        enableGplRepo: false
        stack: "stack"
        os: "os"
        stackRepoId: "stackRepoId"
        utilsRepoId: "utilsRepoId"
        mpackUrl: "mpackUrl"
        version: "version"
        stackBaseURL: "stackBaseURL"
        versionDefinitionFileUrl: "versionDefinitionFileUrl"
        repositoryVersion: "repositoryVersion"
        utilsBaseURL: "utilsBaseURL"
        mpacks:
        - name: "name"
        - name: "name"
        verify: false
      ldapConfigId: 6
      blueprintInputs:
      - name: "name"
        propertyValue: "propertyValue"
      - name: "name"
        propertyValue: "propertyValue"
      rdsConfigNames:
      - "rdsConfigNames"
      - "rdsConfigNames"
      ambariDatabaseDetails:
        password: "password"
        port: 1
        vendor: "POSTGRES"
        name: "name"
        host: "host"
        userName: "userName"
      fileSystem:
        name: "name"
        defaultFs: false
        type: "WASB_INTEGRATED"
        properties:
          key: "properties"
      blueprintCustomProperties: "blueprintCustomProperties"
      executorType: "CONTAINER"
      rdsConfigJsons:
      - connectionUserName: "connectionUserName"
        connectorJarUrl: "connectorJarUrl"
        oracleParameters:
          version: "version"
        name: "name"
        connectionURL: "connectionURL"
        connectionPassword: "connectionPassword"
        type: "type"
      - connectionUserName: "connectionUserName"
        connectorJarUrl: "connectorJarUrl"
        oracleParameters:
          version: "version"
        name: "name"
        connectionURL: "connectionURL"
        connectionPassword: "connectionPassword"
        type: "type"
      customContainer:
        definitions:
          key: "definitions"
      customQueue: "customQueue"
      emailTo: "emailTo"
      userName: "userName"
      blueprintId: 0
      connectedCluster:
        sourceClusterName: "sourceClusterName"
        sourceClusterId: 5
      ldapConfig:
        adminGroup: "adminGroup"
        bindPassword: "bindPassword"
        groupNameAttribute: "groupNameAttribute"
        groupMemberAttribute: "groupMemberAttribute"
        description: "description"
        userNameAttribute: "userNameAttribute"
        serverPort: 5249
        serverHost: "serverHost"
        directoryType: "LDAP"
        bindDn: "bindDn"
        protocol: "protocol"
        groupSearchBase: "groupSearchBase"
        userSearchBase: "userSearchBase"
        domain: "domain"
        name: "name"
        userObjectClass: "userObjectClass"
        groupObjectClass: "groupObjectClass"
      blueprint:
        ambariBlueprint: "ambariBlueprint"
        inputs:
        - referenceConfiguration: "referenceConfiguration"
          name: "name"
          description: "description"
        - referenceConfiguration: "referenceConfiguration"
          name: "name"
          description: "description"
        name: "name"
        description: "description"
        url: "url"
        properties:
        - key:
            key: "properties"
        - key:
            key: "properties"
        tags:
          key: "{}"
      enableSecurity: false
      emailNeeded: false
      name: "name"
      rdsConfigIds:
      - 1
      - 1
      gateway:
        path: "path"
        topologyName: "topologyName"
        gatewayType: "CENTRAL"
        ssoProvider: "ssoProvider"
        enableGateway: false
        ssoType: "SSO_PROVIDER"
        tokenCert: "tokenCert"
        exposedServices:
        - "exposedServices"
        - "exposedServices"
  PlatformRegionsJson:
    type: "object"
    properties:
      regions:
        type: "object"
        description: "regions"
        additionalProperties:
          type: "array"
          items:
            type: "string"
      displayNames:
        type: "object"
        description: "regions with displayNames"
        additionalProperties:
          type: "object"
          additionalProperties:
            type: "string"
      availabilityZones:
        type: "object"
        description: "availability zones"
        additionalProperties:
          type: "object"
          additionalProperties:
            type: "array"
            items:
              type: "string"
      defaultRegions:
        type: "object"
        description: "default regions"
        additionalProperties:
          type: "string"
    example:
      regions:
        key:
        - "regions"
        - "regions"
      displayNames:
        key:
          key: "displayNames"
      availabilityZones:
        key:
          key:
          - "availabilityZones"
          - "availabilityZones"
      defaultRegions:
        key: "defaultRegions"
  SecurityGroupResponse:
    type: "object"
    required:
    - "cloudPlatform"
    - "publicInAccount"
    properties:
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      securityGroupId:
        type: "string"
        description: "Exisiting security group id"
      cloudPlatform:
        type: "string"
        description: "type of cloud provider"
      name:
        type: "string"
        description: "name of the resource"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      owner:
        type: "string"
        description: "id of the resource owner that is provided by OAuth provider"
      account:
        type: "string"
        description: "account id of the resource owner that is provided by OAuth provider"
      securityRules:
        type: "array"
        description: "list of security rules that relates to the security group"
        items:
          $ref: "#/definitions/SecurityRuleResponse"
      publicInAccount:
        type: "boolean"
        description: "resource is visible in account"
        default: false
    example:
      securityGroupId: "securityGroupId"
      owner: "owner"
      cloudPlatform: "cloudPlatform"
      publicInAccount: false
      securityRules:
      - subnet: "subnet"
        protocol: "protocol"
        id: 6
        ports: "ports"
        modifiable: false
      - subnet: "subnet"
        protocol: "protocol"
        id: 6
        ports: "ports"
        modifiable: false
      name: "name"
      description: "description"
      id: 0
      account: "account"
  ProxyConfigRequest:
    type: "object"
    required:
    - "name"
    - "protocol"
    - "serverHost"
    - "serverPort"
    properties:
      name:
        type: "string"
        description: "Name of the proxy configuration resource"
        minLength: 4
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      description:
        type: "string"
        description: "description of the resource"
      serverHost:
        type: "string"
        description: "host or IP address of proxy server"
        minLength: 1
        maxLength: 255
        pattern: "(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\
          -]*[A-Za-z0-9])$)"
      serverPort:
        type: "integer"
        format: "int32"
        description: "port of proxy server (typically: 3128 or 8080)"
        minimum: 1.0
        maximum: 65535.0
      protocol:
        type: "string"
        description: "determines the protocol (http or https)"
        pattern: "^http(s)?$"
      userName:
        type: "string"
        description: "Username to use for basic authentication"
      password:
        type: "string"
        description: "Password to use for basic authentication"
    example:
      protocol: "protocol"
      password: "password"
      name: "name"
      description: "description"
      serverPort: 5249
      userName: "userName"
      serverHost: "serverHost"
  PlacementSettings:
    type: "object"
    required:
    - "region"
    properties:
      availabilityZone:
        type: "string"
        description: "availability zone of the stack"
      region:
        type: "string"
        description: "region of the stack"
    example:
      region: "region"
      availabilityZone: "availabilityZone"
  PlatformNetworkResponse:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      subnets:
        type: "object"
        additionalProperties:
          type: "string"
      properties:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
    example:
      name: "name"
      subnets:
        key: "subnets"
      id: "id"
      properties:
        key: "{}"
  StackRepoDetailsJson:
    type: "object"
    properties:
      stack:
        type: "object"
        additionalProperties:
          type: "string"
      util:
        type: "object"
        additionalProperties:
          type: "string"
    example:
      stack:
        key: "stack"
      util:
        key: "util"
  OrchestratorResponse:
    type: "object"
    required:
    - "type"
    properties:
      parameters:
        type: "object"
        description: "orchestrator specific parameters, like authentication details"
        additionalProperties:
          type: "object"
          properties: {}
      apiEndpoint:
        type: "string"
        description: "endpoint for the container orchestration api"
      type:
        type: "string"
        description: "type of the orchestrator"
    example:
      apiEndpoint: "apiEndpoint"
      type: "type"
      parameters:
        key: "{}"
  HardwareInfoResponse:
    type: "object"
    properties:
      instanceMetaData:
        description: "metadata of instances"
        $ref: "#/definitions/InstanceMetaData"
      hostMetadata:
        description: "metadata of hosts"
        $ref: "#/definitions/HostMetadata"
    example:
      instanceMetaData:
        sshPort: 3
        instanceId: "instanceId"
        ambariServer: false
        privateIp: "privateIp"
        instanceType: "GATEWAY"
        discoveryFQDN: "discoveryFQDN"
        publicIp: "publicIp"
        instanceGroup: "instanceGroup"
        instanceStatus: "REQUESTED"
      hostMetadata:
        groupName: "groupName"
        name: "name"
        id: 4
        state: "state"
  PlatformSshKeysResponse:
    type: "object"
    properties:
      sshKeys:
        type: "object"
        additionalProperties:
          type: "array"
          uniqueItems: true
          items:
            $ref: "#/definitions/PlatformSshKeyResponse"
    example:
      sshKeys:
        key:
        - name: "name"
          properties:
            key: "{}"
        - name: "name"
          properties:
            key: "{}"
  ConnectedClusterRequest:
    type: "object"
    properties:
      sourceClusterId:
        type: "integer"
        format: "int64"
      sourceClusterName:
        type: "string"
    example:
      sourceClusterName: "sourceClusterName"
      sourceClusterId: 5
  ReinstallRequestV2:
    type: "object"
    required:
    - "blueprintName"
    properties:
      instanceGroups:
        type: "array"
        description: "collection of instance groupst"
        uniqueItems: true
        items:
          $ref: "#/definitions/instanceGroupsV2"
      ambariStackDetails:
        description: "details of the Ambari stack"
        $ref: "#/definitions/AmbariStackDetails"
      blueprintName:
        type: "string"
        description: "blueprint name for the cluster"
      kerberosPassword:
        type: "string"
        description: "kerberos admin password"
        minLength: 5
        maxLength: 50
      kerberosPrincipal:
        type: "string"
        description: "kerberos principal"
    example:
      instanceGroups:
      - template:
          volumeType: "volumeType"
          instanceType: "instanceType"
          customInstanceType:
            memory: 5
            cpus: 9
          volumeCount: 6
          parameters:
            key: "{}"
          volumeSize: 1
        recipeNames:
        - "recipeNames"
        - "recipeNames"
        recoveryMode: "MANUAL"
        nodeCount: 8008
        securityGroup:
          securityGroupId: "securityGroupId"
          securityRules:
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
        type: "GATEWAY"
        parameters:
          key: "{}"
        group: "group"
      - template:
          volumeType: "volumeType"
          instanceType: "instanceType"
          customInstanceType:
            memory: 5
            cpus: 9
          volumeCount: 6
          parameters:
            key: "{}"
          volumeSize: 1
        recipeNames:
        - "recipeNames"
        - "recipeNames"
        recoveryMode: "MANUAL"
        nodeCount: 8008
        securityGroup:
          securityGroupId: "securityGroupId"
          securityRules:
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
        type: "GATEWAY"
        parameters:
          key: "{}"
        group: "group"
      ambariStackDetails:
        enableGplRepo: false
        stack: "stack"
        os: "os"
        stackRepoId: "stackRepoId"
        utilsRepoId: "utilsRepoId"
        mpackUrl: "mpackUrl"
        version: "version"
        stackBaseURL: "stackBaseURL"
        versionDefinitionFileUrl: "versionDefinitionFileUrl"
        repositoryVersion: "repositoryVersion"
        utilsBaseURL: "utilsBaseURL"
        mpacks:
        - name: "name"
        - name: "name"
        verify: false
      blueprintName: "blueprintName"
      kerberosPassword: "kerberosPassword"
      kerberosPrincipal: "kerberosPrincipal"
  UpdateImageCatalogRequest:
    type: "object"
    required:
    - "id"
    - "name"
    - "url"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      url:
        type: "string"
        description: "custom image catalog's URL"
        pattern: "^http[s]?://.*"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
    example:
      name: "name"
      id: 0
      url: "url"
  AutoscaleStackResponse:
    type: "object"
    required:
    - "name"
    properties:
      stackId:
        type: "integer"
        format: "int64"
        description: "id of the stack"
      name:
        type: "string"
        description: "name of the stack"
        minLength: 5
        maxLength: 40
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      owner:
        type: "string"
        description: "id of the resource owner that is provided by OAuth provider"
      account:
        type: "string"
        description: "account id of the resource owner that is provided by OAuth provider"
      gatewayPort:
        type: "integer"
        format: "int32"
        description: "port of the gateway secured proxy"
      ambariServerIp:
        type: "string"
        description: "public ambari ip of the stack"
      userName:
        type: "string"
        description: "ambari username"
      password:
        type: "string"
        description: "ambari password"
      status:
        type: "string"
        description: "status of the stack"
        enum:
        - "REQUESTED"
        - "CREATE_IN_PROGRESS"
        - "AVAILABLE"
        - "UPDATE_IN_PROGRESS"
        - "UPDATE_REQUESTED"
        - "UPDATE_FAILED"
        - "CREATE_FAILED"
        - "ENABLE_SECURITY_FAILED"
        - "PRE_DELETE_IN_PROGRESS"
        - "DELETE_IN_PROGRESS"
        - "DELETE_FAILED"
        - "DELETE_COMPLETED"
        - "STOPPED"
        - "STOP_REQUESTED"
        - "START_REQUESTED"
        - "STOP_IN_PROGRESS"
        - "START_IN_PROGRESS"
        - "START_FAILED"
        - "STOP_FAILED"
        - "WAIT_FOR_SYNC"
      clusterStatus:
        type: "string"
        description: "status of the cluster"
        enum:
        - "REQUESTED"
        - "CREATE_IN_PROGRESS"
        - "AVAILABLE"
        - "UPDATE_IN_PROGRESS"
        - "UPDATE_REQUESTED"
        - "UPDATE_FAILED"
        - "CREATE_FAILED"
        - "ENABLE_SECURITY_FAILED"
        - "PRE_DELETE_IN_PROGRESS"
        - "DELETE_IN_PROGRESS"
        - "DELETE_FAILED"
        - "DELETE_COMPLETED"
        - "STOPPED"
        - "STOP_REQUESTED"
        - "START_REQUESTED"
        - "STOP_IN_PROGRESS"
        - "START_IN_PROGRESS"
        - "START_FAILED"
        - "STOP_FAILED"
        - "WAIT_FOR_SYNC"
      created:
        type: "integer"
        format: "int64"
        description: "creation time of the stack in long"
    example:
      owner: "owner"
      password: "password"
      ambariServerIp: "ambariServerIp"
      created: 1
      stackId: 0
      name: "name"
      userName: "userName"
      account: "account"
      gatewayPort: 6
      clusterStatus: "REQUESTED"
      status: "REQUESTED"
  IpPoolJson:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      properties:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
    example:
      name: "name"
      id: "id"
      properties:
        key: "{}"
  AmbariDatabaseTestResult:
    type: "object"
    required:
    - "error"
    properties:
      error:
        type: "string"
        description: "result of Ambari database test"
    example:
      error: "error"
  Tags:
    type: "object"
    properties:
      applicationTags:
        type: "object"
        description: "stack related application tags"
        additionalProperties:
          type: "string"
      userDefinedTags:
        type: "object"
        description: "stack related userdefined tags"
        additionalProperties:
          type: "string"
      defaultTags:
        type: "object"
        description: "stack related default tags"
        additionalProperties:
          type: "string"
    example:
      applicationTags:
        key: "applicationTags"
      userDefinedTags:
        key: "userDefinedTags"
      defaultTags:
        key: "defaultTags"
  PlatformSecurityGroupResponse:
    type: "object"
    properties:
      groupName:
        type: "string"
      groupId:
        type: "string"
      properties:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
    example:
      groupName: "groupName"
      groupId: "groupId"
      properties:
        key: "{}"
  PlatformIpPoolsResponse:
    type: "object"
    properties:
      ippools:
        type: "object"
        additionalProperties:
          type: "array"
          uniqueItems: true
          items:
            $ref: "#/definitions/IpPoolJson"
    example:
      ippools:
        key:
        - name: "name"
          id: "id"
          properties:
            key: "{}"
        - name: "name"
          id: "id"
          properties:
            key: "{}"
  AmbariInfoJson:
    type: "object"
    properties:
      version:
        type: "string"
      repo:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/AmbariRepoDetails"
    example:
      repo:
        key:
          baseUrl: "baseUrl"
          version: "version"
          gpgKeyUrl: "gpgKeyUrl"
      version: "version"
  TemplateRequest:
    type: "object"
    required:
    - "cloudPlatform"
    - "name"
    properties:
      cloudPlatform:
        type: "string"
        description: "type of cloud provider"
      parameters:
        type: "object"
        description: "cloud specific parameters for template"
        additionalProperties:
          type: "object"
          properties: {}
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      volumeType:
        type: "string"
        description: "type of the volumes"
      instanceType:
        type: "string"
        description: "type of the instance"
      customInstanceType:
        description: "custom instancetype definition"
        $ref: "#/definitions/CustomInstanceType"
      topologyId:
        type: "integer"
        format: "int64"
        description: "id of the topology the resource belongs to"
      name:
        type: "string"
        description: "name of the resource"
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      volumeCount:
        type: "integer"
        format: "int32"
        description: "number of volumes"
      volumeSize:
        type: "integer"
        format: "int32"
        description: "size of volumes"
    example:
      volumeType: "volumeType"
      cloudPlatform: "cloudPlatform"
      instanceType: "instanceType"
      customInstanceType:
        memory: 5
        cpus: 9
      topologyId: 5
      name: "name"
      description: "description"
      volumeCount: 2
      parameters:
        key: "{}"
      volumeSize: 7
  RdsTestRequest:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the RDS configuration resource"
      rdsConfig:
        description: "unsaved RDS config to be tested by connectivity"
        $ref: "#/definitions/RdsConfig"
    example:
      rdsConfig:
        connectionUserName: "connectionUserName"
        connectorJarUrl: "connectorJarUrl"
        oracleParameters:
          version: "version"
        name: "name"
        connectionURL: "connectionURL"
        connectionPassword: "connectionPassword"
        type: "type"
      name: "name"
  CloudbreakEvent:
    type: "object"
    properties:
      eventType:
        type: "string"
        description: "type of the event"
      eventTimestamp:
        type: "integer"
        format: "int64"
        description: "timestamp of the event"
      eventMessage:
        type: "string"
        description: "message of the event"
      owner:
        type: "string"
        description: "id of the resource owner that is provided by OAuth provider"
      account:
        type: "string"
        description: "account id of the resource owner that is provided by OAuth provider"
      cloud:
        type: "string"
        description: "type of cloud provider"
      region:
        type: "string"
        description: "region of the stack"
      availabilityZone:
        type: "string"
        description: "availability zone of the stack"
      blueprintId:
        type: "integer"
        format: "int64"
        description: "blueprint id for the cluster"
      blueprintName:
        type: "string"
        description: "gathered from blueprintName field from the blueprint JSON"
      clusterId:
        type: "integer"
        format: "int64"
        description: "id of the cluster"
      clusterName:
        type: "string"
        description: "name of the cluster"
      stackId:
        type: "integer"
        format: "int64"
        description: "id of the stack"
      stackName:
        type: "string"
        description: "name of the stack"
      stackStatus:
        type: "string"
        description: "status of the stack"
        enum:
        - "REQUESTED"
        - "CREATE_IN_PROGRESS"
        - "AVAILABLE"
        - "UPDATE_IN_PROGRESS"
        - "UPDATE_REQUESTED"
        - "UPDATE_FAILED"
        - "CREATE_FAILED"
        - "ENABLE_SECURITY_FAILED"
        - "PRE_DELETE_IN_PROGRESS"
        - "DELETE_IN_PROGRESS"
        - "DELETE_FAILED"
        - "DELETE_COMPLETED"
        - "STOPPED"
        - "STOP_REQUESTED"
        - "START_REQUESTED"
        - "STOP_IN_PROGRESS"
        - "START_IN_PROGRESS"
        - "START_FAILED"
        - "STOP_FAILED"
        - "WAIT_FOR_SYNC"
      nodeCount:
        type: "integer"
        format: "int32"
        description: "number of nodes"
      instanceGroup:
        type: "string"
        description: "name of the instance group"
      clusterStatus:
        type: "string"
        description: "status of the cluster"
        enum:
        - "REQUESTED"
        - "CREATE_IN_PROGRESS"
        - "AVAILABLE"
        - "UPDATE_IN_PROGRESS"
        - "UPDATE_REQUESTED"
        - "UPDATE_FAILED"
        - "CREATE_FAILED"
        - "ENABLE_SECURITY_FAILED"
        - "PRE_DELETE_IN_PROGRESS"
        - "DELETE_IN_PROGRESS"
        - "DELETE_FAILED"
        - "DELETE_COMPLETED"
        - "STOPPED"
        - "STOP_REQUESTED"
        - "START_REQUESTED"
        - "STOP_IN_PROGRESS"
        - "START_IN_PROGRESS"
        - "START_FAILED"
        - "STOP_FAILED"
        - "WAIT_FOR_SYNC"
    example:
      eventMessage: "eventMessage"
      owner: "owner"
      blueprintName: "blueprintName"
      stackId: 5
      stackName: "stackName"
      stackStatus: "REQUESTED"
      eventType: "eventType"
      clusterId: 1
      instanceGroup: "instanceGroup"
      availabilityZone: "availabilityZone"
      blueprintId: 6
      cloud: "cloud"
      clusterName: "clusterName"
      nodeCount: 5
      region: "region"
      account: "account"
      clusterStatus: "REQUESTED"
      eventTimestamp: 0
  StackDetailsJson:
    type: "object"
    properties:
      mpacks:
        type: "array"
        items:
          $ref: "#/definitions/ManagementPackEntry"
      version:
        type: "string"
      repo:
        $ref: "#/definitions/StackRepoDetailsJson"
    example:
      mpacks:
      - mpackUrl: "mpackUrl"
      - mpackUrl: "mpackUrl"
      repo:
        stack:
          key: "stack"
        util:
          key: "util"
      version: "version"
  CustomInstanceType:
    type: "object"
    properties:
      memory:
        type: "integer"
        format: "int32"
      cpus:
        type: "integer"
        format: "int32"
    example:
      memory: 5
      cpus: 9
  CloudbreakFlexUsage:
    type: "object"
    properties:
      controller:
        $ref: "#/definitions/FlexUsageControllerJson"
      products:
        type: "array"
        items:
          $ref: "#/definitions/FlexUsageProductJson"
    example:
      controller:
        instanceId: "instanceId"
        provider: "provider"
        smartSenseId: "smartSenseId"
        guid: "guid"
        region: "region"
        userName: "userName"
      products:
      - components:
        - componentId: "componentId"
          instances:
          - usageDate: "usageDate"
            creationTime: "creationTime"
            provider: "provider"
            guid: "guid"
            flexSubscriptionId: "flexSubscriptionId"
            region: "region"
            peakUsage: 0
          - usageDate: "usageDate"
            creationTime: "creationTime"
            provider: "provider"
            guid: "guid"
            flexSubscriptionId: "flexSubscriptionId"
            region: "region"
            peakUsage: 0
        - componentId: "componentId"
          instances:
          - usageDate: "usageDate"
            creationTime: "creationTime"
            provider: "provider"
            guid: "guid"
            flexSubscriptionId: "flexSubscriptionId"
            region: "region"
            peakUsage: 0
          - usageDate: "usageDate"
            creationTime: "creationTime"
            provider: "provider"
            guid: "guid"
            flexSubscriptionId: "flexSubscriptionId"
            region: "region"
            peakUsage: 0
        productId: "productId"
      - components:
        - componentId: "componentId"
          instances:
          - usageDate: "usageDate"
            creationTime: "creationTime"
            provider: "provider"
            guid: "guid"
            flexSubscriptionId: "flexSubscriptionId"
            region: "region"
            peakUsage: 0
          - usageDate: "usageDate"
            creationTime: "creationTime"
            provider: "provider"
            guid: "guid"
            flexSubscriptionId: "flexSubscriptionId"
            region: "region"
            peakUsage: 0
        - componentId: "componentId"
          instances:
          - usageDate: "usageDate"
            creationTime: "creationTime"
            provider: "provider"
            guid: "guid"
            flexSubscriptionId: "flexSubscriptionId"
            region: "region"
            peakUsage: 0
          - usageDate: "usageDate"
            creationTime: "creationTime"
            provider: "provider"
            guid: "guid"
            flexSubscriptionId: "flexSubscriptionId"
            region: "region"
            peakUsage: 0
        productId: "productId"
  AmbariStackDetails:
    type: "object"
    properties:
      stack:
        type: "string"
        description: "name of the stack, like HDP"
      version:
        type: "string"
        description: "version of the stack"
      os:
        type: "string"
        description: "operating system for the stack, like redhat6"
      stackRepoId:
        type: "string"
        description: "id of the stack repository"
      stackBaseURL:
        type: "string"
        description: "url of the stack repository"
      utilsRepoId:
        type: "string"
        description: "id of the stack utils repository"
      utilsBaseURL:
        type: "string"
        description: "url of the stack utils repository"
      enableGplRepo:
        type: "boolean"
        description: "enable gpl repository"
        default: false
      verify:
        type: "boolean"
        description: "whether to verify or not the repo url"
        default: false
      repositoryVersion:
        type: "string"
        description: "version of the repository for VDF file creation in Ambari"
      versionDefinitionFileUrl:
        type: "string"
        description: "local path on the Ambari server or URL that point to the desired\
          \ VDF file"
      mpackUrl:
        type: "string"
        description: "url the MPACK that needs to be installed before HDF installation"
      mpacks:
        type: "array"
        description: "Management packs which are needed for the HDP / HDF clusters"
        items:
          $ref: "#/definitions/ManagementPackDetails"
    example:
      enableGplRepo: false
      stack: "stack"
      os: "os"
      stackRepoId: "stackRepoId"
      utilsRepoId: "utilsRepoId"
      mpackUrl: "mpackUrl"
      version: "version"
      stackBaseURL: "stackBaseURL"
      versionDefinitionFileUrl: "versionDefinitionFileUrl"
      repositoryVersion: "repositoryVersion"
      utilsBaseURL: "utilsBaseURL"
      mpacks:
      - name: "name"
      - name: "name"
      verify: false
  FlexUsageControllerJson:
    type: "object"
    properties:
      guid:
        type: "string"
      instanceId:
        type: "string"
      region:
        type: "string"
      provider:
        type: "string"
      smartSenseId:
        type: "string"
      userName:
        type: "string"
    example:
      instanceId: "instanceId"
      provider: "provider"
      smartSenseId: "smartSenseId"
      guid: "guid"
      region: "region"
      userName: "userName"
  TagSpecificationsJson:
    type: "object"
    properties:
      specifications:
        type: "object"
        description: "tag specifications"
        additionalProperties:
          type: "object"
          additionalProperties:
            type: "object"
            properties: {}
    example:
      specifications:
        key:
          key: "{}"
  StackScaleRequestV2:
    type: "object"
    required:
    - "desiredCount"
    - "group"
    properties:
      group:
        type: "string"
        description: "name of the instance group"
      desiredCount:
        type: "integer"
        format: "int32"
        description: "scaling adjustment of the instance groups"
    example:
      desiredCount: 0
      group: "group"
  RdsBuildResult:
    type: "object"
    required:
    - "results"
    properties:
      results:
        type: "object"
        description: "name of the created dbs"
        additionalProperties:
          type: "string"
    example:
      results:
        key: "results"
  RecommendationRequestJson:
    type: "object"
    properties:
      credentialId:
        type: "integer"
        format: "int64"
        description: "credential resource id for the request"
      credentialName:
        type: "string"
        description: "credential resource name for the request"
      region:
        type: "string"
        description: "Related region"
      platformVariant:
        type: "string"
        description: "cloud provider api variant"
      filters:
        type: "object"
        description: "filter for resources"
        additionalProperties:
          type: "string"
      availabilityZone:
        type: "string"
        description: "related availability zone"
      blueprintName:
        type: "string"
        description: "name that could indentify an existing blueprint"
      blueprintId:
        type: "integer"
        format: "int64"
        description: "id that could indentify an existing blueprint"
    example:
      blueprintName: "blueprintName"
      platformVariant: "platformVariant"
      credentialId: 0
      filters:
        key: "filters"
      credentialName: "credentialName"
      region: "region"
      availabilityZone: "availabilityZone"
      blueprintId: 6
  VersionCheckResult:
    type: "object"
    properties:
      versionCheckOk:
        type: "boolean"
        default: false
      message:
        type: "string"
    example:
      versionCheckOk: false
      message: "message"
  RDSBuildRequest:
    type: "object"
    required:
    - "clusterName"
    - "rdsConfigRequest"
    properties:
      rdsConfigRequest:
        description: "rds config request"
        $ref: "#/definitions/RdsConfig"
      clusterName:
        type: "string"
        description: "requested cluster name"
    example:
      clusterName: "clusterName"
      rdsConfigRequest:
        connectionUserName: "connectionUserName"
        connectorJarUrl: "connectorJarUrl"
        oracleParameters:
          version: "version"
        name: "name"
        connectionURL: "connectionURL"
        connectionPassword: "connectionPassword"
        type: "type"
  CustomContainerResponse:
    type: "object"
    properties:
      definitions:
        type: "object"
        additionalProperties:
          type: "string"
    example:
      definitions:
        key: "definitions"
  NetworkResponse:
    type: "object"
    required:
    - "cloudPlatform"
    - "name"
    properties:
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      subnetCIDR:
        type: "string"
        description: "the subnet definition of the network in CIDR format"
      cloudPlatform:
        type: "string"
        description: "type of cloud provider"
      parameters:
        type: "object"
        description: "provider specific parameters of the specified network"
        additionalProperties:
          type: "object"
          properties: {}
      topologyId:
        type: "integer"
        format: "int64"
        description: "id of the topology the resource belongs to"
      name:
        type: "string"
        description: "name of the resource"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
        readOnly: true
      publicInAccount:
        type: "boolean"
        description: "resource is visible in account"
        readOnly: true
        default: false
    example:
      subnetCIDR: "subnetCIDR"
      cloudPlatform: "cloudPlatform"
      publicInAccount: false
      topologyId: 0
      name: "name"
      description: "description"
      id: 6
      parameters:
        key: "{}"
  DiskResponse:
    type: "object"
    properties:
      type:
        type: "string"
      name:
        type: "string"
      displayName:
        type: "string"
    example:
      displayName: "displayName"
      name: "name"
      type: "type"
  Id:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
    example:
      id: 0
  HostGroupResponse:
    type: "object"
    required:
    - "constraint"
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the resource"
      constraint:
        description: "instance group or resource constraint for a hostgroup"
        $ref: "#/definitions/Constraint"
      recipeIds:
        type: "array"
        description: "referenced recipe ids"
        uniqueItems: true
        items:
          type: "integer"
          format: "int64"
      recoveryMode:
        type: "string"
        description: "recovery mode of the hostgroup's nodes"
        enum:
        - "MANUAL"
        - "AUTO"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      recipes:
        type: "array"
        description: "referenced recipes"
        uniqueItems: true
        items:
          $ref: "#/definitions/RecipeResponse"
      metadata:
        type: "array"
        description: "metadata of hosts"
        uniqueItems: true
        items:
          $ref: "#/definitions/HostMetadata"
    example:
      recipes:
      - recipeType: "PRE_AMBARI_START"
        public: false
        name: "name"
        description: "description"
        id: 0
        uri: "uri"
        content: "content"
      - recipeType: "PRE_AMBARI_START"
        public: false
        name: "name"
        description: "description"
        id: 0
        uri: "uri"
        content: "content"
      metadata:
      - groupName: "groupName"
        name: "name"
        id: 4
        state: "state"
      - groupName: "groupName"
        name: "name"
        id: 4
        state: "state"
      recipeIds:
      - 3
      - 3
      recoveryMode: "MANUAL"
      name: "name"
      constraint:
        hostCount: 9
        constraintTemplateName: "constraintTemplateName"
        instanceGroupName: "instanceGroupName"
      id: 2
  LdapConfigResponse:
    type: "object"
    required:
    - "bindDn"
    - "name"
    - "serverHost"
    - "serverPort"
    - "userSearchBase"
    properties:
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      serverHost:
        type: "string"
        description: "public host or IP address of LDAP server"
      serverPort:
        type: "integer"
        format: "int32"
        description: "port of LDAP server (typically: 389 or 636 for LDAPS)"
        minimum: 1.0
        maximum: 65535.0
      protocol:
        type: "string"
        description: "determines the protocol (LDAP or LDAP over SSL)"
      bindDn:
        type: "string"
        description: "bind distinguished name for connection test and group search\
          \ (e.g. cn=admin,dc=example,dc=org)"
      userSearchBase:
        type: "string"
        description: "template for user search for authentication (e.g. dc=hadoop,dc=apache,dc=org)"
      groupSearchBase:
        type: "string"
        description: "template for group search for authorization (e.g. dc=hadoop,dc=apache,dc=org)"
      userNameAttribute:
        type: "string"
        description: "attribute name for simplified search filter (e.g. sAMAccountName\
          \ in case of AD, UID or cn for LDAP)."
      domain:
        type: "string"
        description: "domain in LDAP server (e.g. ad.seq.com)."
      directoryType:
        type: "string"
        description: "directory type of server LDAP or AD"
        enum:
        - "LDAP"
        - "ACTIVE_DIRECTORY"
      userObjectClass:
        type: "string"
        description: "User Object Class (defaults to person)"
      groupObjectClass:
        type: "string"
        description: "Group Object Class (defaults to groupOfNames)"
      groupNameAttribute:
        type: "string"
        description: "Group Id Attribute (defaults to cn)"
      groupMemberAttribute:
        type: "string"
        description: "Group Member Attribute (defaults to member)"
      adminGroup:
        type: "string"
        description: "LDAP group for administrators"
      name:
        type: "string"
        description: "name of the resource"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      public:
        type: "boolean"
        description: "resource is visible in account"
        default: false
    example:
      adminGroup: "adminGroup"
      groupNameAttribute: "groupNameAttribute"
      groupMemberAttribute: "groupMemberAttribute"
      description: "description"
      userNameAttribute: "userNameAttribute"
      serverPort: 5249
      serverHost: "serverHost"
      directoryType: "LDAP"
      bindDn: "bindDn"
      protocol: "protocol"
      groupSearchBase: "groupSearchBase"
      userSearchBase: "userSearchBase"
      public: false
      domain: "domain"
      name: "name"
      id: 6
      userObjectClass: "userObjectClass"
      groupObjectClass: "groupObjectClass"
  StackDescriptor:
    type: "object"
    properties:
      version:
        type: "string"
      minAmbari:
        type: "string"
      repo:
        $ref: "#/definitions/StackRepoDetailsJson"
      ambari:
        $ref: "#/definitions/AmbariInfoJson"
    example:
      minAmbari: "minAmbari"
      ambari:
        repo:
          key:
            baseUrl: "baseUrl"
            version: "version"
            gpgKeyUrl: "gpgKeyUrl"
        version: "version"
      repo:
        stack:
          key: "stack"
        util:
          key: "util"
      version: "version"
  HostMetadata:
    type: "object"
    required:
    - "groupName"
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the resource"
      groupName:
        type: "string"
        description: "name of the host group"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      state:
        type: "string"
        description: "state of the host"
    example:
      groupName: "groupName"
      name: "name"
      id: 4
      state: "state"
  SupportedExternalDatabaseServiceEntryResponse:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the service"
      displayName:
        type: "string"
        description: "Display name of the service"
      databases:
        type: "array"
        description: "Supported database list"
        uniqueItems: true
        items:
          $ref: "#/definitions/SupportedDatabaseEntryResponse"
    example:
      databases:
      - databaseName: "databaseName"
        jdbcPrefix: "jdbcPrefix"
        versions:
        - "versions"
        - "versions"
        displayName: "displayName"
      - databaseName: "databaseName"
        jdbcPrefix: "jdbcPrefix"
        versions:
        - "versions"
        - "versions"
        displayName: "displayName"
      displayName: "displayName"
      name: "name"
  StructuredEvent:
    type: "object"
    properties:
      type:
        type: "string"
      operation:
        $ref: "#/definitions/OperationDetails"
    example:
      type: "type"
      operation:
        resourceId: 0
        eventType: "eventType"
        cloudbreakVersion: "cloudbreakVersion"
        userName: "userName"
        userId: "userId"
        account: "account"
        resourceType: "resourceType"
        timestamp: 6
        cloudbreakId: "cloudbreakId"
  AccountPreferencesRequest:
    type: "object"
    required:
    - "clusterTimeToLive"
    - "userTimeToLive"
    properties:
      maxNumberOfClusters:
        type: "integer"
        format: "int64"
        description: "max number of clusters in the account (0 when unlimited)"
        minimum: 0.0
      maxNumberOfNodesPerCluster:
        type: "integer"
        format: "int64"
        description: "max number of vms in a cluster of account (0 when unlimited)"
        minimum: 0.0
      maxNumberOfClustersPerUser:
        type: "integer"
        format: "int64"
        description: "max number of clusters for user within the account (0 when unlimited)"
        minimum: 0.0
      allowedInstanceTypes:
        type: "array"
        description: "allowed instance types in the account (empty list for no restriction)"
        items:
          type: "string"
      clusterTimeToLive:
        type: "integer"
        format: "int64"
        description: "lifecycle of the cluster in hours (0 for immortal clusters)"
        minimum: 0.0
      userTimeToLive:
        type: "integer"
        format: "int64"
        description: "lifecycle of the account and its clusters in hours (0 for immortal\
          \ account)"
        minimum: 0.0
      platforms:
        type: "string"
        description: "list of the cloudplatforms visible on the UI"
      smartsenseEnabled:
        type: "boolean"
        description: "smartsense enabled on the UI"
        default: false
      defaultTags:
        type: "object"
        description: "default tags for the resources created"
        additionalProperties:
          type: "string"
    example:
      maxNumberOfNodesPerCluster: 0
      userTimeToLive: 0
      maxNumberOfClustersPerUser: 0
      clusterTimeToLive: 0
      allowedInstanceTypes:
      - "allowedInstanceTypes"
      - "allowedInstanceTypes"
      maxNumberOfClusters: 0
      defaultTags:
        key: "defaultTags"
      platforms: "platforms"
      smartsenseEnabled: false
  VirtualMachinesResponse:
    type: "object"
    properties:
      virtualMachines:
        type: "array"
        description: "virtual machines"
        uniqueItems: true
        items:
          $ref: "#/definitions/VmTypeJson"
      defaultVirtualMachine:
        description: "default virtual machines"
        $ref: "#/definitions/VmTypeJson"
    example:
      defaultVirtualMachine:
        vmTypeMetaJson:
          configs:
          - volumeParameterType: "volumeParameterType"
            minimumSize: 0
            maximumNumber: 5
            maximumSize: 6
            minimumNumber: 1
          - volumeParameterType: "volumeParameterType"
            minimumSize: 0
            maximumNumber: 5
            maximumSize: 6
            minimumNumber: 1
          properties:
            key: "properties"
        value: "value"
      virtualMachines:
      - vmTypeMetaJson:
          configs:
          - volumeParameterType: "volumeParameterType"
            minimumSize: 0
            maximumNumber: 5
            maximumSize: 6
            minimumNumber: 1
          - volumeParameterType: "volumeParameterType"
            minimumSize: 0
            maximumNumber: 5
            maximumSize: 6
            minimumNumber: 1
          properties:
            key: "properties"
        value: "value"
      - vmTypeMetaJson:
          configs:
          - volumeParameterType: "volumeParameterType"
            minimumSize: 0
            maximumNumber: 5
            maximumSize: 6
            minimumNumber: 1
          - volumeParameterType: "volumeParameterType"
            minimumSize: 0
            maximumNumber: 5
            maximumSize: 6
            minimumNumber: 1
          properties:
            key: "properties"
        value: "value"
  BlueprintParameter:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      referenceConfiguration:
        type: "string"
    example:
      referenceConfiguration: "referenceConfiguration"
      name: "name"
      description: "description"
  SecurityRuleRequest:
    type: "object"
    required:
    - "ports"
    - "protocol"
    - "subnet"
    properties:
      subnet:
        type: "string"
        description: "definition of allowed subnet in CIDR format"
        pattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\\
          /([0-9]|[1-2][0-9]|3[0-2]))$"
      ports:
        type: "string"
        description: "comma separated list of accessible ports"
        pattern: "^[1-9][0-9]{0,4}(-[1-9][0-9]{0,4}){0,1}(,[1-9][0-9]{0,4}(-[1-9][0-9]{0,4}){0,1})*$"
      protocol:
        type: "string"
        description: "protocol of the rule"
      modifiable:
        type: "boolean"
        description: "flag for making the rule modifiable"
        default: false
    example:
      subnet: "subnet"
      protocol: "protocol"
      ports: "ports"
      modifiable: false
  PlatformNetworksResponse:
    type: "object"
    properties:
      networks:
        type: "object"
        additionalProperties:
          type: "array"
          uniqueItems: true
          items:
            $ref: "#/definitions/PlatformNetworkResponse"
    example:
      networks:
        key:
        - name: "name"
          subnets:
            key: "subnets"
          id: "id"
          properties:
            key: "{}"
        - name: "name"
          subnets:
            key: "subnets"
          id: "id"
          properties:
            key: "{}"
  LDAPTestRequest:
    type: "object"
    properties:
      name:
        type: "string"
        description: "name of the resource"
      validationRequest:
        description: "Request that contains the minimal set of fields to test LDAP\
          \ connectivity"
        $ref: "#/definitions/LdapValidationRequest"
    example:
      name: "name"
      validationRequest:
        bindDn: "bindDn"
        protocol: "protocol"
        bindPassword: "bindPassword"
        serverPort: 5249
        serverHost: "serverHost"
  AmbariRepoDetails:
    type: "object"
    required:
    - "baseUrl"
    - "version"
    properties:
      version:
        type: "string"
        description: "version of the Ambari"
      baseUrl:
        type: "string"
        description: "url of the Ambari repository"
      gpgKeyUrl:
        type: "string"
        description: "gpg key of the Ambari repository"
    example:
      baseUrl: "baseUrl"
      version: "version"
      gpgKeyUrl: "gpgKeyUrl"
  TopologyRequest:
    type: "object"
    required:
    - "cloudPlatform"
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      cloudPlatform:
        type: "string"
        description: "type of cloud provider"
      nodes:
        type: "object"
        description: "topology mapping"
        additionalProperties:
          type: "string"
    example:
      cloudPlatform: "cloudPlatform"
      nodes:
        key: "nodes"
      name: "name"
      description: "description"
  CloudGatewayJson:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      properties:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
    example:
      name: "name"
      id: "id"
      properties:
        key: "{}"
  ConfigsRequest:
    type: "object"
    required:
    - "requests"
    properties:
      requests:
        type: "array"
        description: "request object"
        uniqueItems: true
        items:
          $ref: "#/definitions/BlueprintParameter"
    example:
      requests:
      - referenceConfiguration: "referenceConfiguration"
        name: "name"
        description: "description"
      - referenceConfiguration: "referenceConfiguration"
        name: "name"
        description: "description"
  ImageResponse:
    type: "object"
    properties:
      date:
        type: "string"
      description:
        type: "string"
      os:
        type: "string"
      osType:
        type: "string"
      uuid:
        type: "string"
      version:
        type: "string"
      repo:
        type: "object"
        additionalProperties:
          type: "string"
      images:
        type: "object"
        additionalProperties:
          type: "object"
          additionalProperties:
            type: "string"
      stackDetails:
        $ref: "#/definitions/StackDetailsJson"
    example:
      date: "date"
      images:
        key:
          key: "images"
      stackDetails:
        mpacks:
        - mpackUrl: "mpackUrl"
        - mpackUrl: "mpackUrl"
        repo:
          stack:
            key: "stack"
          util:
            key: "util"
        version: "version"
      os: "os"
      repo:
        key: "repo"
      osType: "osType"
      description: "description"
      uuid: "uuid"
      version: "version"
  TemplateResponse:
    type: "object"
    required:
    - "cloudPlatform"
    - "name"
    - "volumeCount"
    - "volumeSize"
    properties:
      cloudPlatform:
        type: "string"
        description: "type of cloud provider"
      parameters:
        type: "object"
        description: "cloud specific parameters for template"
        additionalProperties:
          type: "object"
          properties: {}
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      volumeType:
        type: "string"
        description: "type of the volumes"
      instanceType:
        type: "string"
        description: "type of the instance"
      customInstanceType:
        description: "custom instancetype definition"
        $ref: "#/definitions/CustomInstanceType"
      topologyId:
        type: "integer"
        format: "int64"
        description: "id of the topology the resource belongs to"
      name:
        type: "string"
        description: "name of the resource"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      volumeCount:
        type: "integer"
        format: "int32"
        description: "number of volumes"
      volumeSize:
        type: "integer"
        format: "int32"
        description: "size of volumes"
      public:
        type: "boolean"
        description: "resource is visible in account"
        default: false
    example:
      volumeType: "volumeType"
      cloudPlatform: "cloudPlatform"
      public: false
      instanceType: "instanceType"
      customInstanceType:
        memory: 5
        cpus: 9
      topologyId: 9
      name: "name"
      description: "description"
      volumeCount: 8
      id: 6
      parameters:
        key: "{}"
      volumeSize: 9
  AmbariDatabaseDetails:
    type: "object"
    required:
    - "host"
    - "name"
    - "password"
    - "port"
    - "userName"
    - "vendor"
    properties:
      vendor:
        type: "string"
        description: "vendor of the Ambari database"
        enum:
        - "POSTGRES"
        - "MYSQL"
        - "MARIADB"
        - "MSSQL"
        - "ORACLE11"
        - "ORACLE12"
        - "SQLANYWHERE"
        - "EMBEDDED"
      name:
        type: "string"
        description: "name of the Ambari database"
        pattern: "^[^']+$"
      host:
        type: "string"
        description: "host of the Ambari database"
        pattern: "^[a-zA-Z0-9]([a-zA-Z0-9-\\.]+)$"
      port:
        type: "integer"
        format: "int32"
        description: "port of the Ambari database"
      userName:
        type: "string"
        description: "user name for the Ambari database"
        pattern: "^[^']+$"
      password:
        type: "string"
        description: "password for the Ambari database"
        pattern: "^[^']+$"
    example:
      password: "password"
      port: 1
      vendor: "POSTGRES"
      name: "name"
      host: "host"
      userName: "userName"
  UserProfileRequest:
    type: "object"
    properties:
      credentialName:
        type: "string"
      credentialId:
        type: "integer"
        format: "int64"
      uiProperties:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
    example:
      credentialId: 0
      uiProperties:
        key: "{}"
      credentialName: "credentialName"
  ClusterV2Request:
    type: "object"
    properties:
      emailNeeded:
        type: "boolean"
        description: "send email about the result of the cluster installation"
        default: false
      emailTo:
        type: "string"
        description: "send email to the requested address"
      ldapConfigName:
        type: "string"
        description: "LDAP config name for the cluster"
      rdsConfigNames:
        type: "array"
        description: "RDS configuration names for the cluster"
        uniqueItems: true
        items:
          type: "string"
      proxyName:
        type: "string"
        description: "proxy configuration name for the cluster"
      fileSystem:
        description: "external file system configuration"
        $ref: "#/definitions/FileSystem"
      executorType:
        type: "string"
        description: "executor type of cluster"
        enum:
        - "CONTAINER"
        - "DEFAULT"
      ambari:
        description: "ambari specific requests"
        $ref: "#/definitions/AmbariV2Request"
      sharedService:
        description: "Shared service request"
        $ref: "#/definitions/SharedService"
    example:
      fileSystem:
        name: "name"
        defaultFs: false
        type: "WASB_INTEGRATED"
        properties:
          key: "properties"
      executorType: "CONTAINER"
      emailNeeded: false
      proxyName: "proxyName"
      sharedService:
        sharedCluster: "sharedCluster"
      ambari:
        ambariRepoDetailsJson:
          baseUrl: "baseUrl"
          version: "version"
          gpgKeyUrl: "gpgKeyUrl"
        blueprintCustomProperties: "blueprintCustomProperties"
        ambariSecurityMasterKey: "ambariSecurityMasterKey"
        blueprintName: "blueprintName"
        kerberos:
          principal: "principal"
          password: "password"
          krb5Conf: "krb5Conf"
          masterKey: "masterKey"
          ldapUrl: "ldapUrl"
          admin: "admin"
          realm: "realm"
          containerDn: "containerDn"
          descriptor: "descriptor"
          adminUrl: "adminUrl"
          url: "url"
          tcpAllowed: false
        userName: "userName"
        blueprintId: 2
        connectedCluster:
          sourceClusterName: "sourceClusterName"
          sourceClusterId: 5
        configStrategy: "NEVER_APPLY"
        enableSecurity: false
        password: "password"
        validateBlueprint: false
        ambariStackDetails:
          enableGplRepo: false
          stack: "stack"
          os: "os"
          stackRepoId: "stackRepoId"
          utilsRepoId: "utilsRepoId"
          mpackUrl: "mpackUrl"
          version: "version"
          stackBaseURL: "stackBaseURL"
          versionDefinitionFileUrl: "versionDefinitionFileUrl"
          repositoryVersion: "repositoryVersion"
          utilsBaseURL: "utilsBaseURL"
          mpacks:
          - name: "name"
          - name: "name"
          verify: false
        blueprintInputs:
        - name: "name"
          propertyValue: "propertyValue"
        - name: "name"
          propertyValue: "propertyValue"
        ambariDatabaseDetails:
          password: "password"
          port: 1
          vendor: "POSTGRES"
          name: "name"
          host: "host"
          userName: "userName"
        gateway:
          path: "path"
          topologyName: "topologyName"
          gatewayType: "CENTRAL"
          ssoProvider: "ssoProvider"
          enableGateway: false
          ssoType: "SSO_PROVIDER"
          tokenCert: "tokenCert"
          exposedServices:
          - "exposedServices"
          - "exposedServices"
      ldapConfigName: "ldapConfigName"
      rdsConfigNames:
      - "rdsConfigNames"
      - "rdsConfigNames"
      emailTo: "emailTo"
  GeneratedBlueprintResponse:
    type: "object"
    properties:
      ambariBlueprint:
        type: "string"
        description: "ambari blueprint JSON, set this or the url field"
    example:
      ambariBlueprint: "ambariBlueprint"
  ImagesResponse:
    type: "object"
    properties:
      baseImages:
        type: "array"
        items:
          $ref: "#/definitions/BaseImageResponse"
      hdpImages:
        type: "array"
        items:
          $ref: "#/definitions/ImageResponse"
      hdfImages:
        type: "array"
        items:
          $ref: "#/definitions/ImageResponse"
    example:
      hdpImages:
      - date: "date"
        images:
          key:
            key: "images"
        stackDetails:
          mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        os: "os"
        repo:
          key: "repo"
        osType: "osType"
        description: "description"
        uuid: "uuid"
        version: "version"
      - date: "date"
        images:
          key:
            key: "images"
        stackDetails:
          mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        os: "os"
        repo:
          key: "repo"
        osType: "osType"
        description: "description"
        uuid: "uuid"
        version: "version"
      baseImages:
      - hdpStacks:
        - mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        - mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        date: "date"
        images:
          key:
            key: "images"
        stackDetails:
          mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        os: "os"
        hdfStacks:
        - mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        - mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        repo:
          key: "repo"
        osType: "osType"
        description: "description"
        uuid: "uuid"
        version: "version"
      - hdpStacks:
        - mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        - mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        date: "date"
        images:
          key:
            key: "images"
        stackDetails:
          mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        os: "os"
        hdfStacks:
        - mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        - mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        repo:
          key: "repo"
        osType: "osType"
        description: "description"
        uuid: "uuid"
        version: "version"
      hdfImages:
      - date: "date"
        images:
          key:
            key: "images"
        stackDetails:
          mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        os: "os"
        repo:
          key: "repo"
        osType: "osType"
        description: "description"
        uuid: "uuid"
        version: "version"
      - date: "date"
        images:
          key:
            key: "images"
        stackDetails:
          mpacks:
          - mpackUrl: "mpackUrl"
          - mpackUrl: "mpackUrl"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
        os: "os"
        repo:
          key: "repo"
        osType: "osType"
        description: "description"
        uuid: "uuid"
        version: "version"
  GatewayJson:
    type: "object"
    properties:
      enableGateway:
        type: "boolean"
        description: "enable Knox gateway security"
        default: false
      path:
        type: "string"
        description: "Knox gateway path"
      topologyName:
        type: "string"
        description: "Knox topology name"
      exposedServices:
        type: "array"
        description: "exposed Knox services"
        items:
          type: "string"
      ssoProvider:
        type: "string"
        description: "SSO provider cluster name"
      tokenCert:
        type: "string"
        description: "SSO Provider certificate"
      gatewayType:
        type: "string"
        description: "Knox gateway type"
        enum:
        - "CENTRAL"
        - "INDIVIDUAL"
      ssoType:
        type: "string"
        description: "Knox SSO type"
        enum:
        - "SSO_PROVIDER"
        - "NONE"
    example:
      path: "path"
      topologyName: "topologyName"
      gatewayType: "CENTRAL"
      ssoProvider: "ssoProvider"
      enableGateway: false
      ssoType: "SSO_PROVIDER"
      tokenCert: "tokenCert"
      exposedServices:
      - "exposedServices"
      - "exposedServices"
  AutoscaleClusterResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      name:
        type: "string"
        description: "name of the resource"
      status:
        type: "string"
        description: "status of the cluster"
        enum:
        - "REQUESTED"
        - "CREATE_IN_PROGRESS"
        - "AVAILABLE"
        - "UPDATE_IN_PROGRESS"
        - "UPDATE_REQUESTED"
        - "UPDATE_FAILED"
        - "CREATE_FAILED"
        - "ENABLE_SECURITY_FAILED"
        - "PRE_DELETE_IN_PROGRESS"
        - "DELETE_IN_PROGRESS"
        - "DELETE_FAILED"
        - "DELETE_COMPLETED"
        - "STOPPED"
        - "STOP_REQUESTED"
        - "START_REQUESTED"
        - "STOP_IN_PROGRESS"
        - "START_IN_PROGRESS"
        - "START_FAILED"
        - "STOP_FAILED"
        - "WAIT_FOR_SYNC"
      hoursUp:
        type: "integer"
        format: "int32"
        description: "duration - how long the cluster is running in hours"
      minutesUp:
        type: "integer"
        format: "int32"
        description: "duration - how long the cluster is running in minutes (minus\
          \ hours)"
      cluster:
        type: "string"
        description: "name of the cluster"
      blueprintId:
        type: "integer"
        format: "int64"
        description: "blueprint id for the cluster"
      blueprint:
        description: "blueprint for the cluster"
        $ref: "#/definitions/BlueprintResponse"
      description:
        type: "string"
        description: "description of the resource"
      statusReason:
        type: "string"
        description: "status message of the cluster"
      ambariServerIp:
        type: "string"
        description: "public ambari ip of the stack"
      ambariServerUrl:
        type: "string"
        description: "public ambari url"
      userName:
        type: "string"
        description: "ambari username"
      secure:
        type: "boolean"
        default: false
      hostGroups:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/HostGroupResponse"
      rdsConfigIds:
        type: "array"
        description: "RDS configuration names for the cluster"
        uniqueItems: true
        items:
          type: "integer"
          format: "int64"
      rdsConfigs:
        type: "array"
        description: "RDS configurations for the cluster"
        uniqueItems: true
        items:
          $ref: "#/definitions/RDSConfigResponse"
      proxyName:
        type: "string"
        description: "proxy configuration name for the cluster"
      serviceEndPoints:
        type: "object"
        description: "most important services in the cluster"
        additionalProperties:
          type: "string"
      configStrategy:
        type: "string"
        description: "config recommendation strategy"
        enum:
        - "NEVER_APPLY"
        - "ONLY_STACK_DEFAULTS_APPLY"
        - "ALWAYS_APPLY"
        - "ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"
      ldapConfigId:
        type: "integer"
        format: "int64"
        description: "LDAP config id for the cluster"
      ldapConfig:
        description: "LDAP config for the cluster"
        $ref: "#/definitions/LdapConfigResponse"
      attributes:
        type: "object"
        description: "Additional information for ambari cluster"
        additionalProperties:
          type: "object"
          properties: {}
      blueprintInputs:
        type: "array"
        description: "blueprint inputs in the cluster"
        uniqueItems: true
        items:
          $ref: "#/definitions/BlueprintInput"
      blueprintCustomProperties:
        type: "string"
        description: "blueprint custom properties"
      executorType:
        type: "string"
        description: "executor type of cluster"
        enum:
        - "CONTAINER"
        - "DEFAULT"
      gateway:
        $ref: "#/definitions/GatewayJson"
      customContainers:
        description: "custom containers"
        $ref: "#/definitions/CustomContainerResponse"
      ambariStackDetails:
        description: "details of the Ambari stack"
        $ref: "#/definitions/AmbariStackDetailsResponse"
      ambariRepoDetailsJson:
        description: "details of the Ambari package repository"
        $ref: "#/definitions/AmbariRepoDetails"
      ambariDatabaseDetails:
        description: "[DEPRECATED] use RdsConfig instead! details of the external\
          \ Ambari database"
        $ref: "#/definitions/AmbariDatabaseDetails"
      customQueue:
        type: "string"
        description: "custom queue for yarn orchestrator"
      creationFinished:
        type: "integer"
        format: "int64"
        description: "Epoch time of cluster creation finish"
      kerberosResponse:
        $ref: "#/definitions/KerberosResponse"
      uptime:
        type: "integer"
        format: "int64"
        description: "duration - how long the cluster is running in milliseconds"
      extendedBlueprintText:
        type: "string"
        description: "ambari blueprint JSON, set this or the url field"
      password:
        type: "string"
        description: "ambari password"
    example:
      cluster: "cluster"
      ambariRepoDetailsJson:
        baseUrl: "baseUrl"
        version: "version"
        gpgKeyUrl: "gpgKeyUrl"
      hostGroups:
      - recipes:
        - recipeType: "PRE_AMBARI_START"
          public: false
          name: "name"
          description: "description"
          id: 0
          uri: "uri"
          content: "content"
        - recipeType: "PRE_AMBARI_START"
          public: false
          name: "name"
          description: "description"
          id: 0
          uri: "uri"
          content: "content"
        metadata:
        - groupName: "groupName"
          name: "name"
          id: 4
          state: "state"
        - groupName: "groupName"
          name: "name"
          id: 4
          state: "state"
        recipeIds:
        - 3
        - 3
        recoveryMode: "MANUAL"
        name: "name"
        constraint:
          hostCount: 9
          constraintTemplateName: "constraintTemplateName"
          instanceGroupName: "instanceGroupName"
        id: 2
      - recipes:
        - recipeType: "PRE_AMBARI_START"
          public: false
          name: "name"
          description: "description"
          id: 0
          uri: "uri"
          content: "content"
        - recipeType: "PRE_AMBARI_START"
          public: false
          name: "name"
          description: "description"
          id: 0
          uri: "uri"
          content: "content"
        metadata:
        - groupName: "groupName"
          name: "name"
          id: 4
          state: "state"
        - groupName: "groupName"
          name: "name"
          id: 4
          state: "state"
        recipeIds:
        - 3
        - 3
        recoveryMode: "MANUAL"
        name: "name"
        constraint:
          hostCount: 9
          constraintTemplateName: "constraintTemplateName"
          instanceGroupName: "instanceGroupName"
        id: 2
      ambariServerIp: "ambariServerIp"
      ambariServerUrl: "ambariServerUrl"
      proxyName: "proxyName"
      description: "description"
      secure: false
      configStrategy: "NEVER_APPLY"
      hoursUp: 6
      serviceEndPoints:
        key: "serviceEndPoints"
      password: "password"
      statusReason: "statusReason"
      ambariStackDetails:
        enableGplRepo: false
        stack:
          key: "stack"
        util:
          key: "util"
        mpacks:
        - name: "name"
        - name: "name"
        hdpVersion: "hdpVersion"
        verify: false
      ldapConfigId: 2
      blueprintInputs:
      - name: "name"
        propertyValue: "propertyValue"
      - name: "name"
        propertyValue: "propertyValue"
      ambariDatabaseDetails:
        password: "password"
        port: 1
        vendor: "POSTGRES"
        name: "name"
        host: "host"
        userName: "userName"
      id: 0
      blueprintCustomProperties: "blueprintCustomProperties"
      executorType: "CONTAINER"
      extendedBlueprintText: "extendedBlueprintText"
      customQueue: "customQueue"
      userName: "userName"
      blueprintId: 5
      ldapConfig:
        adminGroup: "adminGroup"
        groupNameAttribute: "groupNameAttribute"
        groupMemberAttribute: "groupMemberAttribute"
        description: "description"
        userNameAttribute: "userNameAttribute"
        serverPort: 5249
        serverHost: "serverHost"
        directoryType: "LDAP"
        bindDn: "bindDn"
        protocol: "protocol"
        groupSearchBase: "groupSearchBase"
        userSearchBase: "userSearchBase"
        public: false
        domain: "domain"
        name: "name"
        id: 6
        userObjectClass: "userObjectClass"
        groupObjectClass: "groupObjectClass"
      uptime: 9
      blueprint:
        public: false
        ambariBlueprint: "ambariBlueprint"
        inputs:
        - referenceConfiguration: "referenceConfiguration"
          name: "name"
          description: "description"
        - referenceConfiguration: "referenceConfiguration"
          name: "name"
          description: "description"
        hostGroupCount: 6
        name: "name"
        description: "description"
        id: 0
        tags:
          key: "{}"
        status: "DEFAULT"
      rdsConfigs:
      - connectionDriver: "connectionDriver"
        databaseEngineDisplayName: "databaseEngineDisplayName"
        clusterNames:
        - "clusterNames"
        - "clusterNames"
        connectorJarUrl: "connectorJarUrl"
        publicInAccount: false
        stackVersion: "stackVersion"
        name: "name"
        connectionURL: "connectionURL"
        id: 0
        type: "type"
        creationDate: 6
        databaseEngine: "databaseEngine"
      - connectionDriver: "connectionDriver"
        databaseEngineDisplayName: "databaseEngineDisplayName"
        clusterNames:
        - "clusterNames"
        - "clusterNames"
        connectorJarUrl: "connectorJarUrl"
        publicInAccount: false
        stackVersion: "stackVersion"
        name: "name"
        connectionURL: "connectionURL"
        id: 0
        type: "type"
        creationDate: 6
        databaseEngine: "databaseEngine"
      customContainers:
        definitions:
          key: "definitions"
      creationFinished: 7
      kerberosResponse:
        krb5Conf: "krb5Conf"
        ldapUrl: "ldapUrl"
        admin: "admin"
        realm: "realm"
        containerDn: "containerDn"
        descriptor: "descriptor"
        adminUrl: "adminUrl"
        type: "CB_MANAGED"
        url: "url"
        tcpAllowed: false
      name: "name"
      attributes:
        key: "{}"
      rdsConfigIds:
      - 5
      - 5
      gateway:
        path: "path"
        topologyName: "topologyName"
        gatewayType: "CENTRAL"
        ssoProvider: "ssoProvider"
        enableGateway: false
        ssoType: "SSO_PROVIDER"
        tokenCert: "tokenCert"
        exposedServices:
        - "exposedServices"
        - "exposedServices"
      status: "REQUESTED"
      minutesUp: 1
  ClusterResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      name:
        type: "string"
        description: "name of the resource"
      status:
        type: "string"
        description: "status of the cluster"
        enum:
        - "REQUESTED"
        - "CREATE_IN_PROGRESS"
        - "AVAILABLE"
        - "UPDATE_IN_PROGRESS"
        - "UPDATE_REQUESTED"
        - "UPDATE_FAILED"
        - "CREATE_FAILED"
        - "ENABLE_SECURITY_FAILED"
        - "PRE_DELETE_IN_PROGRESS"
        - "DELETE_IN_PROGRESS"
        - "DELETE_FAILED"
        - "DELETE_COMPLETED"
        - "STOPPED"
        - "STOP_REQUESTED"
        - "START_REQUESTED"
        - "STOP_IN_PROGRESS"
        - "START_IN_PROGRESS"
        - "START_FAILED"
        - "STOP_FAILED"
        - "WAIT_FOR_SYNC"
      hoursUp:
        type: "integer"
        format: "int32"
        description: "duration - how long the cluster is running in hours"
      minutesUp:
        type: "integer"
        format: "int32"
        description: "duration - how long the cluster is running in minutes (minus\
          \ hours)"
      cluster:
        type: "string"
        description: "name of the cluster"
      blueprintId:
        type: "integer"
        format: "int64"
        description: "blueprint id for the cluster"
      blueprint:
        description: "blueprint for the cluster"
        $ref: "#/definitions/BlueprintResponse"
      description:
        type: "string"
        description: "description of the resource"
      statusReason:
        type: "string"
        description: "status message of the cluster"
      ambariServerIp:
        type: "string"
        description: "public ambari ip of the stack"
      ambariServerUrl:
        type: "string"
        description: "public ambari url"
      userName:
        type: "string"
        description: "ambari username"
      secure:
        type: "boolean"
        default: false
      hostGroups:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/HostGroupResponse"
      rdsConfigIds:
        type: "array"
        description: "RDS configuration names for the cluster"
        uniqueItems: true
        items:
          type: "integer"
          format: "int64"
      rdsConfigs:
        type: "array"
        description: "RDS configurations for the cluster"
        uniqueItems: true
        items:
          $ref: "#/definitions/RDSConfigResponse"
      proxyName:
        type: "string"
        description: "proxy configuration name for the cluster"
      serviceEndPoints:
        type: "object"
        description: "most important services in the cluster"
        additionalProperties:
          type: "string"
      configStrategy:
        type: "string"
        description: "config recommendation strategy"
        enum:
        - "NEVER_APPLY"
        - "ONLY_STACK_DEFAULTS_APPLY"
        - "ALWAYS_APPLY"
        - "ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"
      ldapConfigId:
        type: "integer"
        format: "int64"
        description: "LDAP config id for the cluster"
      ldapConfig:
        description: "LDAP config for the cluster"
        $ref: "#/definitions/LdapConfigResponse"
      attributes:
        type: "object"
        description: "Additional information for ambari cluster"
        additionalProperties:
          type: "object"
          properties: {}
      blueprintInputs:
        type: "array"
        description: "blueprint inputs in the cluster"
        uniqueItems: true
        items:
          $ref: "#/definitions/BlueprintInput"
      blueprintCustomProperties:
        type: "string"
        description: "blueprint custom properties"
      executorType:
        type: "string"
        description: "executor type of cluster"
        enum:
        - "CONTAINER"
        - "DEFAULT"
      gateway:
        $ref: "#/definitions/GatewayJson"
      customContainers:
        description: "custom containers"
        $ref: "#/definitions/CustomContainerResponse"
      ambariStackDetails:
        description: "details of the Ambari stack"
        $ref: "#/definitions/AmbariStackDetailsResponse"
      ambariRepoDetailsJson:
        description: "details of the Ambari package repository"
        $ref: "#/definitions/AmbariRepoDetails"
      ambariDatabaseDetails:
        description: "[DEPRECATED] use RdsConfig instead! details of the external\
          \ Ambari database"
        $ref: "#/definitions/AmbariDatabaseDetails"
      customQueue:
        type: "string"
        description: "custom queue for yarn orchestrator"
      creationFinished:
        type: "integer"
        format: "int64"
        description: "Epoch time of cluster creation finish"
      kerberosResponse:
        $ref: "#/definitions/KerberosResponse"
      uptime:
        type: "integer"
        format: "int64"
        description: "duration - how long the cluster is running in milliseconds"
      extendedBlueprintText:
        type: "string"
        description: "ambari blueprint JSON, set this or the url field"
    example:
      cluster: "cluster"
      ambariRepoDetailsJson:
        baseUrl: "baseUrl"
        version: "version"
        gpgKeyUrl: "gpgKeyUrl"
      hostGroups:
      - recipes:
        - recipeType: "PRE_AMBARI_START"
          public: false
          name: "name"
          description: "description"
          id: 0
          uri: "uri"
          content: "content"
        - recipeType: "PRE_AMBARI_START"
          public: false
          name: "name"
          description: "description"
          id: 0
          uri: "uri"
          content: "content"
        metadata:
        - groupName: "groupName"
          name: "name"
          id: 4
          state: "state"
        - groupName: "groupName"
          name: "name"
          id: 4
          state: "state"
        recipeIds:
        - 3
        - 3
        recoveryMode: "MANUAL"
        name: "name"
        constraint:
          hostCount: 9
          constraintTemplateName: "constraintTemplateName"
          instanceGroupName: "instanceGroupName"
        id: 2
      - recipes:
        - recipeType: "PRE_AMBARI_START"
          public: false
          name: "name"
          description: "description"
          id: 0
          uri: "uri"
          content: "content"
        - recipeType: "PRE_AMBARI_START"
          public: false
          name: "name"
          description: "description"
          id: 0
          uri: "uri"
          content: "content"
        metadata:
        - groupName: "groupName"
          name: "name"
          id: 4
          state: "state"
        - groupName: "groupName"
          name: "name"
          id: 4
          state: "state"
        recipeIds:
        - 3
        - 3
        recoveryMode: "MANUAL"
        name: "name"
        constraint:
          hostCount: 9
          constraintTemplateName: "constraintTemplateName"
          instanceGroupName: "instanceGroupName"
        id: 2
      ambariServerIp: "ambariServerIp"
      ambariServerUrl: "ambariServerUrl"
      proxyName: "proxyName"
      description: "description"
      secure: false
      configStrategy: "NEVER_APPLY"
      hoursUp: 5
      serviceEndPoints:
        key: "serviceEndPoints"
      statusReason: "statusReason"
      ambariStackDetails:
        enableGplRepo: false
        stack:
          key: "stack"
        util:
          key: "util"
        mpacks:
        - name: "name"
        - name: "name"
        hdpVersion: "hdpVersion"
        verify: false
      ldapConfigId: 1
      blueprintInputs:
      - name: "name"
        propertyValue: "propertyValue"
      - name: "name"
        propertyValue: "propertyValue"
      ambariDatabaseDetails:
        password: "password"
        port: 1
        vendor: "POSTGRES"
        name: "name"
        host: "host"
        userName: "userName"
      id: 5
      blueprintCustomProperties: "blueprintCustomProperties"
      executorType: "CONTAINER"
      extendedBlueprintText: "extendedBlueprintText"
      customQueue: "customQueue"
      userName: "userName"
      blueprintId: 7
      ldapConfig:
        adminGroup: "adminGroup"
        groupNameAttribute: "groupNameAttribute"
        groupMemberAttribute: "groupMemberAttribute"
        description: "description"
        userNameAttribute: "userNameAttribute"
        serverPort: 5249
        serverHost: "serverHost"
        directoryType: "LDAP"
        bindDn: "bindDn"
        protocol: "protocol"
        groupSearchBase: "groupSearchBase"
        userSearchBase: "userSearchBase"
        public: false
        domain: "domain"
        name: "name"
        id: 6
        userObjectClass: "userObjectClass"
        groupObjectClass: "groupObjectClass"
      uptime: 6
      blueprint:
        public: false
        ambariBlueprint: "ambariBlueprint"
        inputs:
        - referenceConfiguration: "referenceConfiguration"
          name: "name"
          description: "description"
        - referenceConfiguration: "referenceConfiguration"
          name: "name"
          description: "description"
        hostGroupCount: 6
        name: "name"
        description: "description"
        id: 0
        tags:
          key: "{}"
        status: "DEFAULT"
      rdsConfigs:
      - connectionDriver: "connectionDriver"
        databaseEngineDisplayName: "databaseEngineDisplayName"
        clusterNames:
        - "clusterNames"
        - "clusterNames"
        connectorJarUrl: "connectorJarUrl"
        publicInAccount: false
        stackVersion: "stackVersion"
        name: "name"
        connectionURL: "connectionURL"
        id: 0
        type: "type"
        creationDate: 6
        databaseEngine: "databaseEngine"
      - connectionDriver: "connectionDriver"
        databaseEngineDisplayName: "databaseEngineDisplayName"
        clusterNames:
        - "clusterNames"
        - "clusterNames"
        connectorJarUrl: "connectorJarUrl"
        publicInAccount: false
        stackVersion: "stackVersion"
        name: "name"
        connectionURL: "connectionURL"
        id: 0
        type: "type"
        creationDate: 6
        databaseEngine: "databaseEngine"
      customContainers:
        definitions:
          key: "definitions"
      creationFinished: 1
      kerberosResponse:
        krb5Conf: "krb5Conf"
        ldapUrl: "ldapUrl"
        admin: "admin"
        realm: "realm"
        containerDn: "containerDn"
        descriptor: "descriptor"
        adminUrl: "adminUrl"
        type: "CB_MANAGED"
        url: "url"
        tcpAllowed: false
      name: "name"
      attributes:
        key: "{}"
      rdsConfigIds:
      - 7
      - 7
      gateway:
        path: "path"
        topologyName: "topologyName"
        gatewayType: "CENTRAL"
        ssoProvider: "ssoProvider"
        enableGateway: false
        ssoType: "SSO_PROVIDER"
        tokenCert: "tokenCert"
        exposedServices:
        - "exposedServices"
        - "exposedServices"
      status: "REQUESTED"
      minutesUp: 2
  VmTypeJson:
    type: "object"
    properties:
      value:
        type: "string"
      vmTypeMetaJson:
        $ref: "#/definitions/VmTypeMetaJson"
    example:
      vmTypeMetaJson:
        configs:
        - volumeParameterType: "volumeParameterType"
          minimumSize: 0
          maximumNumber: 5
          maximumSize: 6
          minimumNumber: 1
        - volumeParameterType: "volumeParameterType"
          minimumSize: 0
          maximumNumber: 5
          maximumSize: 6
          minimumNumber: 1
        properties:
          key: "properties"
      value: "value"
  PlatformSecurityGroupsResponse:
    type: "object"
    properties:
      securityGroups:
        type: "object"
        additionalProperties:
          type: "array"
          uniqueItems: true
          items:
            $ref: "#/definitions/PlatformSecurityGroupResponse"
    example:
      securityGroups:
        key:
        - groupName: "groupName"
          groupId: "groupId"
          properties:
            key: "{}"
        - groupName: "groupName"
          groupId: "groupId"
          properties:
            key: "{}"
  ManagementPackResponse:
    type: "object"
    required:
    - "mpackUrl"
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      mpackUrl:
        type: "string"
        description: "url of the ambari management pack"
      purge:
        type: "boolean"
        description: "if true, management pack will be installed with '--purge' flag"
        default: false
      purgeList:
        type: "array"
        description: "if provided, management pack will be installed with '--purgeList'\
          \ option with this values"
        items:
          type: "string"
      force:
        type: "boolean"
        description: "if true, management pack will be installed with '--force' flag"
        default: false
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      public:
        type: "boolean"
        description: "resource is visible in account"
        default: false
    example:
      public: false
      name: "name"
      description: "description"
      purge: false
      force: false
      id: 0
      mpackUrl: "mpackUrl"
      purgeList:
      - "purgeList"
      - "purgeList"
  PlatformOrchestratorsJson:
    type: "object"
    properties:
      orchestrators:
        type: "object"
        description: "orchestrators"
        additionalProperties:
          type: "array"
          items:
            type: "string"
      defaults:
        type: "object"
        description: "default orchestrators"
        additionalProperties:
          type: "string"
    example:
      defaults:
        key: "defaults"
      orchestrators:
        key:
        - "orchestrators"
        - "orchestrators"
  SupportedDatabaseEntryResponse:
    type: "object"
    properties:
      databaseName:
        type: "string"
        description: "Name of the database"
      displayName:
        type: "string"
        description: "Display name of the database"
      jdbcPrefix:
        type: "string"
        description: "Jdbc prefix of the database"
      versions:
        type: "array"
        description: "Supported version types currently only for Oracle"
        uniqueItems: true
        items:
          type: "string"
    example:
      databaseName: "databaseName"
      jdbcPrefix: "jdbcPrefix"
      versions:
      - "versions"
      - "versions"
      displayName: "displayName"
  FailurePolicyResponse:
    type: "object"
    required:
    - "adjustmentType"
    properties:
      threshold:
        type: "integer"
        format: "int64"
        description: "threshold of failure policy"
      adjustmentType:
        type: "string"
        description: "type of  adjustment"
        enum:
        - "EXACT"
        - "PERCENTAGE"
        - "BEST_EFFORT"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
    example:
      adjustmentType: "EXACT"
      threshold: 6
      id: 1
  RecommendationResponse:
    type: "object"
    properties:
      recommendations:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/VmTypeJson"
      virtualMachines:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/VmTypeJson"
      diskResponses:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/DiskResponse"
    example:
      diskResponses:
      - displayName: "displayName"
        name: "name"
        type: "type"
      - displayName: "displayName"
        name: "name"
        type: "type"
      virtualMachines:
      - vmTypeMetaJson:
          configs:
          - volumeParameterType: "volumeParameterType"
            minimumSize: 0
            maximumNumber: 5
            maximumSize: 6
            minimumNumber: 1
          - volumeParameterType: "volumeParameterType"
            minimumSize: 0
            maximumNumber: 5
            maximumSize: 6
            minimumNumber: 1
          properties:
            key: "properties"
        value: "value"
      - vmTypeMetaJson:
          configs:
          - volumeParameterType: "volumeParameterType"
            minimumSize: 0
            maximumNumber: 5
            maximumSize: 6
            minimumNumber: 1
          - volumeParameterType: "volumeParameterType"
            minimumSize: 0
            maximumNumber: 5
            maximumSize: 6
            minimumNumber: 1
          properties:
            key: "properties"
        value: "value"
      recommendations:
        key:
          vmTypeMetaJson:
            configs:
            - volumeParameterType: "volumeParameterType"
              minimumSize: 0
              maximumNumber: 5
              maximumSize: 6
              minimumNumber: 1
            - volumeParameterType: "volumeParameterType"
              minimumSize: 0
              maximumNumber: 5
              maximumSize: 6
              minimumNumber: 1
            properties:
              key: "properties"
          value: "value"
  BlueprintRequest:
    type: "object"
    required:
    - "name"
    properties:
      ambariBlueprint:
        type: "string"
        description: "ambari blueprint JSON, set this or the url field"
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      inputs:
        type: "array"
        description: "input parameters of the blueprint"
        uniqueItems: true
        items:
          $ref: "#/definitions/BlueprintParameter"
      tags:
        type: "object"
        description: "user defined tags for blueprint"
        additionalProperties:
          type: "object"
          properties: {}
      name:
        type: "string"
        description: "name of the resource"
        minLength: 1
        maxLength: 100
      url:
        type: "string"
        description: "url source of an ambari blueprint, set this or the ambariBlueprint\
          \ field"
      properties:
        type: "array"
        description: "properties to extend the blueprint with"
        items:
          type: "object"
          additionalProperties:
            type: "object"
            additionalProperties:
              type: "string"
    example:
      ambariBlueprint: "ambariBlueprint"
      inputs:
      - referenceConfiguration: "referenceConfiguration"
        name: "name"
        description: "description"
      - referenceConfiguration: "referenceConfiguration"
        name: "name"
        description: "description"
      name: "name"
      description: "description"
      url: "url"
      properties:
      - key:
          key: "properties"
      - key:
          key: "properties"
      tags:
        key: "{}"
  AmbariAddress:
    type: "object"
    required:
    - "ambariAddress"
    properties:
      ambariAddress:
        type: "string"
        description: "ambari server address"
    example:
      ambariAddress: "ambariAddress"
  SecurityRulesResponse:
    type: "object"
    properties:
      core:
        type: "array"
        description: "security rules for core type"
        items:
          $ref: "#/definitions/SecurityRuleResponse"
      gateway:
        type: "array"
        description: "security rules for gateway type"
        items:
          $ref: "#/definitions/SecurityRuleResponse"
    example:
      core:
      - subnet: "subnet"
        protocol: "protocol"
        id: 6
        ports: "ports"
        modifiable: false
      - subnet: "subnet"
        protocol: "protocol"
        id: 6
        ports: "ports"
        modifiable: false
      gateway:
      - subnet: "subnet"
        protocol: "protocol"
        id: 6
        ports: "ports"
        modifiable: false
      - subnet: "subnet"
        protocol: "protocol"
        id: 6
        ports: "ports"
        modifiable: false
  NetworkV2Request:
    type: "object"
    properties:
      subnetCIDR:
        type: "string"
        description: "the subnet definition of the network in CIDR format"
      parameters:
        type: "object"
        description: "provider specific parameters of the specified network"
        additionalProperties:
          type: "object"
          properties: {}
    example:
      subnetCIDR: "subnetCIDR"
      parameters:
        key: "{}"
  AmbariV2Request:
    type: "object"
    required:
    - "password"
    - "userName"
    properties:
      blueprintId:
        type: "integer"
        format: "int64"
        description: "blueprint id for the cluster"
      blueprintName:
        type: "string"
        description: "blueprint name for the cluster"
      gateway:
        $ref: "#/definitions/GatewayJson"
      enableSecurity:
        type: "boolean"
        description: "enable Kerberos security"
        default: false
      userName:
        type: "string"
        description: "ambari username"
        minLength: 5
        maxLength: 15
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      password:
        type: "string"
        description: "ambari password"
        minLength: 5
        maxLength: 100
      kerberos:
        $ref: "#/definitions/KerberosRequest"
      validateBlueprint:
        type: "boolean"
        description: "blueprint validation"
        default: false
      ambariStackDetails:
        description: "details of the Ambari stack"
        $ref: "#/definitions/AmbariStackDetails"
      ambariRepoDetailsJson:
        description: "details of the Ambari package repository"
        $ref: "#/definitions/AmbariRepoDetails"
      ambariDatabaseDetails:
        description: "[DEPRECATED] use RdsConfig instead! details of the external\
          \ Ambari database"
        $ref: "#/definitions/AmbariDatabaseDetails"
      configStrategy:
        type: "string"
        description: "config recommendation strategy"
        enum:
        - "NEVER_APPLY"
        - "ONLY_STACK_DEFAULTS_APPLY"
        - "ALWAYS_APPLY"
        - "ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"
      blueprintInputs:
        type: "array"
        description: "blueprint inputs in the cluster"
        uniqueItems: true
        items:
          $ref: "#/definitions/BlueprintInput"
      blueprintCustomProperties:
        type: "string"
        description: "blueprint custom properties"
      connectedCluster:
        description: "cluster can connect to a datalake you can define the parameters\
          \ here"
        $ref: "#/definitions/ConnectedClusterRequest"
      ambariSecurityMasterKey:
        type: "string"
        description: "a master key for encrypting the passwords in Ambari"
        minLength: 5
        maxLength: 100
    example:
      ambariRepoDetailsJson:
        baseUrl: "baseUrl"
        version: "version"
        gpgKeyUrl: "gpgKeyUrl"
      blueprintCustomProperties: "blueprintCustomProperties"
      ambariSecurityMasterKey: "ambariSecurityMasterKey"
      blueprintName: "blueprintName"
      kerberos:
        principal: "principal"
        password: "password"
        krb5Conf: "krb5Conf"
        masterKey: "masterKey"
        ldapUrl: "ldapUrl"
        admin: "admin"
        realm: "realm"
        containerDn: "containerDn"
        descriptor: "descriptor"
        adminUrl: "adminUrl"
        url: "url"
        tcpAllowed: false
      userName: "userName"
      blueprintId: 2
      connectedCluster:
        sourceClusterName: "sourceClusterName"
        sourceClusterId: 5
      configStrategy: "NEVER_APPLY"
      enableSecurity: false
      password: "password"
      validateBlueprint: false
      ambariStackDetails:
        enableGplRepo: false
        stack: "stack"
        os: "os"
        stackRepoId: "stackRepoId"
        utilsRepoId: "utilsRepoId"
        mpackUrl: "mpackUrl"
        version: "version"
        stackBaseURL: "stackBaseURL"
        versionDefinitionFileUrl: "versionDefinitionFileUrl"
        repositoryVersion: "repositoryVersion"
        utilsBaseURL: "utilsBaseURL"
        mpacks:
        - name: "name"
        - name: "name"
        verify: false
      blueprintInputs:
      - name: "name"
        propertyValue: "propertyValue"
      - name: "name"
        propertyValue: "propertyValue"
      ambariDatabaseDetails:
        password: "password"
        port: 1
        vendor: "POSTGRES"
        name: "name"
        host: "host"
        userName: "userName"
      gateway:
        path: "path"
        topologyName: "topologyName"
        gatewayType: "CENTRAL"
        ssoProvider: "ssoProvider"
        enableGateway: false
        ssoType: "SSO_PROVIDER"
        tokenCert: "tokenCert"
        exposedServices:
        - "exposedServices"
        - "exposedServices"
  AmbariStackDetailsResponse:
    type: "object"
    properties:
      stack:
        type: "object"
        additionalProperties:
          type: "string"
      util:
        type: "object"
        additionalProperties:
          type: "string"
      mpacks:
        type: "array"
        items:
          $ref: "#/definitions/ManagementPackDetails"
      enableGplRepo:
        type: "boolean"
        default: false
      verify:
        type: "boolean"
        default: false
      hdpVersion:
        type: "string"
    example:
      enableGplRepo: false
      stack:
        key: "stack"
      util:
        key: "util"
      mpacks:
      - name: "name"
      - name: "name"
      hdpVersion: "hdpVersion"
      verify: false
  Constraint:
    type: "object"
    required:
    - "hostCount"
    properties:
      instanceGroupName:
        type: "string"
        description: "name of an instance group where the hostgroup will be deployed"
      constraintTemplateName:
        type: "string"
        description: "name of a constraint template that defines the resource constraints\
          \ for the hostgroup"
      hostCount:
        type: "integer"
        format: "int32"
        description: "number of hosts in the hostgroup"
    example:
      hostCount: 9
      constraintTemplateName: "constraintTemplateName"
      instanceGroupName: "instanceGroupName"
  CloudbreakDetailsJson:
    type: "object"
    properties:
      version:
        type: "string"
        description: "version of the Cloudbreak that provisioned the stack"
    example:
      version: "version"
  HostGroupRequest:
    type: "object"
    required:
    - "constraint"
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the resource"
      constraint:
        description: "instance group or resource constraint for a hostgroup"
        $ref: "#/definitions/Constraint"
      recipeIds:
        type: "array"
        description: "referenced recipe ids"
        uniqueItems: true
        items:
          type: "integer"
          format: "int64"
      recoveryMode:
        type: "string"
        description: "recovery mode of the hostgroup's nodes"
        enum:
        - "MANUAL"
        - "AUTO"
      recipes:
        type: "array"
        description: "referenced recipes"
        uniqueItems: true
        items:
          $ref: "#/definitions/RecipeRequest"
      recipeNames:
        type: "array"
        description: "referenced recipe names"
        uniqueItems: true
        items:
          type: "string"
    example:
      recipes:
      - recipeType: "PRE_AMBARI_START"
        name: "name"
        description: "description"
        uri: "uri"
        content: "content"
      - recipeType: "PRE_AMBARI_START"
        name: "name"
        description: "description"
        uri: "uri"
        content: "content"
      recipeIds:
      - 0
      - 0
      recipeNames:
      - "recipeNames"
      - "recipeNames"
      recoveryMode: "MANUAL"
      name: "name"
      constraint:
        hostCount: 9
        constraintTemplateName: "constraintTemplateName"
        instanceGroupName: "instanceGroupName"
  UpdateStack:
    type: "object"
    properties:
      status:
        type: "string"
        description: "status of the scale request"
        enum:
        - "SYNC"
        - "FULL_SYNC"
        - "REPAIR_FAILED_NODES"
        - "STOPPED"
        - "STARTED"
      withClusterEvent:
        type: "boolean"
        description: "on stack update, update cluster too"
        default: false
      instanceGroupAdjustment:
        description: "instance group adjustment"
        $ref: "#/definitions/InstanceGroupAdjustment"
    example:
      instanceGroupAdjustment:
        scalingAdjustment: 0
        instanceGroup: "instanceGroup"
      withClusterEvent: false
      status: "SYNC"
  PlatformVariantsJson:
    type: "object"
    properties:
      platformToVariants:
        type: "object"
        description: "platform variants"
        additionalProperties:
          type: "array"
          items:
            type: "string"
      defaultVariants:
        type: "object"
        description: "default variants"
        additionalProperties:
          type: "string"
    example:
      platformToVariants:
        key:
        - "platformToVariants"
        - "platformToVariants"
      defaultVariants:
        key: "defaultVariants"
  HostGroupAdjustment:
    type: "object"
    required:
    - "hostGroup"
    - "scalingAdjustment"
    properties:
      hostGroup:
        type: "string"
        description: "name of the host group"
      scalingAdjustment:
        type: "integer"
        format: "int32"
        description: "scaling adjustment of the host groups"
      withStackUpdate:
        type: "boolean"
        description: "on cluster update, update stack too"
        default: false
      validateNodeCount:
        type: "boolean"
        description: "validate node count during downscale"
        default: false
    example:
      withStackUpdate: false
      scalingAdjustment: 0
      hostGroup: "hostGroup"
      validateNodeCount: false
  SpecialParametersJson:
    type: "object"
    properties:
      specialParameters:
        type: "object"
        description: "custom parameters"
        additionalProperties:
          type: "boolean"
      platformSpecificSpecialParameters:
        type: "object"
        description: "platform specific custom parameters"
        additionalProperties:
          type: "object"
          additionalProperties:
            type: "boolean"
    example:
      platformSpecificSpecialParameters:
        key:
          key: true
      specialParameters:
        key: true
  OperationDetails:
    type: "object"
    properties:
      eventType:
        type: "string"
      resourceId:
        type: "integer"
        format: "int64"
      resourceType:
        type: "string"
      timestamp:
        type: "integer"
        format: "int64"
      account:
        type: "string"
      userId:
        type: "string"
      userName:
        type: "string"
      cloudbreakId:
        type: "string"
      cloudbreakVersion:
        type: "string"
    example:
      resourceId: 0
      eventType: "eventType"
      cloudbreakVersion: "cloudbreakVersion"
      userName: "userName"
      userId: "userId"
      account: "account"
      resourceType: "resourceType"
      timestamp: 6
      cloudbreakId: "cloudbreakId"
  KerberosResponse:
    type: "object"
    properties:
      admin:
        type: "string"
        description: "kerberos admin user"
        minLength: 5
        maxLength: 15
      url:
        type: "string"
        description: "kerberos KDC server URL"
      adminUrl:
        type: "string"
        description: "kerberos admin server URL"
      realm:
        type: "string"
      ldapUrl:
        type: "string"
      containerDn:
        type: "string"
      tcpAllowed:
        type: "boolean"
        default: false
      descriptor:
        type: "string"
      krb5Conf:
        type: "string"
      type:
        type: "string"
        enum:
        - "CB_MANAGED"
        - "EXISTING_AD"
        - "EXISTING_MIT"
        - "CUSTOM"
    example:
      krb5Conf: "krb5Conf"
      ldapUrl: "ldapUrl"
      admin: "admin"
      realm: "realm"
      containerDn: "containerDn"
      descriptor: "descriptor"
      adminUrl: "adminUrl"
      type: "CB_MANAGED"
      url: "url"
      tcpAllowed: false
  VmTypeMetaJson:
    type: "object"
    properties:
      configs:
        type: "array"
        items:
          $ref: "#/definitions/VolumeParameterConfigJson"
      properties:
        type: "object"
        additionalProperties:
          type: "string"
    example:
      configs:
      - volumeParameterType: "volumeParameterType"
        minimumSize: 0
        maximumNumber: 5
        maximumSize: 6
        minimumNumber: 1
      - volumeParameterType: "volumeParameterType"
        minimumSize: 0
        maximumNumber: 5
        maximumSize: 6
        minimumNumber: 1
      properties:
        key: "properties"
  SecurityGroupV2Request:
    type: "object"
    properties:
      securityGroupId:
        type: "string"
        description: "Exisiting security group id"
      securityRules:
        type: "array"
        description: "list of security rules that relates to the security group"
        items:
          $ref: "#/definitions/SecurityRuleRequest"
    example:
      securityGroupId: "securityGroupId"
      securityRules:
      - subnet: "subnet"
        protocol: "protocol"
        ports: "ports"
        modifiable: false
      - subnet: "subnet"
        protocol: "protocol"
        ports: "ports"
        modifiable: false
  FileSystem:
    type: "object"
    required:
    - "name"
    - "type"
    properties:
      name:
        type: "string"
        description: "name of the filesystem"
      type:
        type: "string"
        description: "type of the filesystem"
        enum:
        - "WASB_INTEGRATED"
        - "GCS"
        - "WASB"
        - "ADLS"
      defaultFs:
        type: "boolean"
        description: "true if fs.defaultFS should point to this filesystem"
        default: false
      properties:
        type: "object"
        description: "configuration of the filesystem access as key-value pairs"
        additionalProperties:
          type: "string"
    example:
      name: "name"
      defaultFs: false
      type: "WASB_INTEGRATED"
      properties:
        key: "properties"
  RepoConfigValidationRequest:
    type: "object"
    properties:
      ambariBaseUrl:
        type: "string"
        description: "url of the Ambari repository"
      ambariGpgKeyUrl:
        type: "string"
        description: "gpg key of the Ambari repository"
      stackBaseURL:
        type: "string"
        description: "url of the stack repository"
      utilsBaseURL:
        type: "string"
        description: "url of the stack utils repository"
      versionDefinitionFileUrl:
        type: "string"
        description: "local path on the Ambari server or URL that point to the desired\
          \ VDF file"
      mpackUrl:
        type: "string"
        description: "url the MPACK that needs to be installed before HDF installation"
    example:
      utilsBaseURL: "utilsBaseURL"
      ambariGpgKeyUrl: "ambariGpgKeyUrl"
      mpackUrl: "mpackUrl"
      stackBaseURL: "stackBaseURL"
      versionDefinitionFileUrl: "versionDefinitionFileUrl"
      ambariBaseUrl: "ambariBaseUrl"
  TemplateV2Request:
    type: "object"
    properties:
      volumeCount:
        type: "integer"
        format: "int32"
        description: "number of volumes"
      volumeSize:
        type: "integer"
        format: "int32"
        description: "size of volumes"
      parameters:
        type: "object"
        description: "cloud specific parameters for template"
        additionalProperties:
          type: "object"
          properties: {}
      volumeType:
        type: "string"
        description: "type of the volumes"
      instanceType:
        type: "string"
        description: "type of the instance"
      customInstanceType:
        description: "custom instancetype definition"
        $ref: "#/definitions/CustomInstanceType"
    example:
      volumeType: "volumeType"
      instanceType: "instanceType"
      customInstanceType:
        memory: 5
        cpus: 9
      volumeCount: 6
      parameters:
        key: "{}"
      volumeSize: 1
  StackAuthenticationResponse:
    type: "object"
    properties:
      publicKey:
        type: "string"
        description: "public key for accessing instances"
      publicKeyId:
        type: "string"
        description: "public key id for accessing instances"
      loginUserName:
        type: "string"
        description: "authentication name for machines"
    example:
      loginUserName: "loginUserName"
      publicKey: "publicKey"
      publicKeyId: "publicKeyId"
  TopologyResponse:
    type: "object"
    required:
    - "cloudPlatform"
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      cloudPlatform:
        type: "string"
        description: "type of cloud provider"
      nodes:
        type: "object"
        description: "topology mapping"
        additionalProperties:
          type: "string"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
    example:
      cloudPlatform: "cloudPlatform"
      nodes:
        key: "nodes"
      name: "name"
      description: "description"
      id: 0
  PlatformVmtypesResponse:
    type: "object"
    properties:
      vmTypes:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/VirtualMachinesResponse"
    example:
      vmTypes:
        key:
          defaultVirtualMachine:
            vmTypeMetaJson:
              configs:
              - volumeParameterType: "volumeParameterType"
                minimumSize: 0
                maximumNumber: 5
                maximumSize: 6
                minimumNumber: 1
              - volumeParameterType: "volumeParameterType"
                minimumSize: 0
                maximumNumber: 5
                maximumSize: 6
                minimumNumber: 1
              properties:
                key: "properties"
            value: "value"
          virtualMachines:
          - vmTypeMetaJson:
              configs:
              - volumeParameterType: "volumeParameterType"
                minimumSize: 0
                maximumNumber: 5
                maximumSize: 6
                minimumNumber: 1
              - volumeParameterType: "volumeParameterType"
                minimumSize: 0
                maximumNumber: 5
                maximumSize: 6
                minimumNumber: 1
              properties:
                key: "properties"
            value: "value"
          - vmTypeMetaJson:
              configs:
              - volumeParameterType: "volumeParameterType"
                minimumSize: 0
                maximumNumber: 5
                maximumSize: 6
                minimumNumber: 1
              - volumeParameterType: "volumeParameterType"
                minimumSize: 0
                maximumNumber: 5
                maximumSize: 6
                minimumNumber: 1
              properties:
                key: "properties"
            value: "value"
  UserNamePassword:
    type: "object"
    required:
    - "oldPassword"
    - "password"
    - "userName"
    properties:
      userName:
        type: "string"
        description: "new user name in ambari"
        minLength: 1
        maxLength: 2147483647
      oldPassword:
        type: "string"
        description: "old password in ambari"
        minLength: 1
        maxLength: 2147483647
      password:
        type: "string"
        description: "new password in ambari"
        minLength: 1
        maxLength: 2147483647
    example:
      password: "password"
      oldPassword: "oldPassword"
      userName: "userName"
  FailurePolicyRequest:
    type: "object"
    required:
    - "adjustmentType"
    properties:
      threshold:
        type: "integer"
        format: "int64"
        description: "threshold of failure policy"
      adjustmentType:
        type: "string"
        description: "type of  adjustment"
        enum:
        - "EXACT"
        - "PERCENTAGE"
        - "BEST_EFFORT"
    example:
      adjustmentType: "EXACT"
      threshold: 5
  AccountPreferencesResponse:
    type: "object"
    required:
    - "clusterTimeToLive"
    - "userTimeToLive"
    properties:
      maxNumberOfClusters:
        type: "integer"
        format: "int64"
        description: "max number of clusters in the account (0 when unlimited)"
        minimum: 0.0
      maxNumberOfNodesPerCluster:
        type: "integer"
        format: "int64"
        description: "max number of vms in a cluster of account (0 when unlimited)"
        minimum: 0.0
      maxNumberOfClustersPerUser:
        type: "integer"
        format: "int64"
        description: "max number of clusters for user within the account (0 when unlimited)"
        minimum: 0.0
      allowedInstanceTypes:
        type: "array"
        description: "allowed instance types in the account (empty list for no restriction)"
        items:
          type: "string"
      clusterTimeToLive:
        type: "integer"
        format: "int64"
        description: "lifecycle of the cluster in hours (0 for immortal clusters)"
        minimum: 0.0
      userTimeToLive:
        type: "integer"
        format: "int64"
        description: "lifecycle of the account and its clusters in hours (0 for immortal\
          \ account)"
        minimum: 0.0
      platforms:
        type: "string"
        description: "list of the cloudplatforms visible on the UI"
      smartsenseEnabled:
        type: "boolean"
        description: "smartsense enabled on the UI"
        default: false
      defaultTags:
        type: "object"
        description: "default tags for the resources created"
        additionalProperties:
          type: "string"
      supportedExternalDatabases:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/SupportedExternalDatabaseServiceEntryResponse"
    example:
      maxNumberOfNodesPerCluster: 0
      userTimeToLive: 0
      supportedExternalDatabases:
      - databases:
        - databaseName: "databaseName"
          jdbcPrefix: "jdbcPrefix"
          versions:
          - "versions"
          - "versions"
          displayName: "displayName"
        - databaseName: "databaseName"
          jdbcPrefix: "jdbcPrefix"
          versions:
          - "versions"
          - "versions"
          displayName: "displayName"
        displayName: "displayName"
        name: "name"
      - databases:
        - databaseName: "databaseName"
          jdbcPrefix: "jdbcPrefix"
          versions:
          - "versions"
          - "versions"
          displayName: "displayName"
        - databaseName: "databaseName"
          jdbcPrefix: "jdbcPrefix"
          versions:
          - "versions"
          - "versions"
          displayName: "displayName"
        displayName: "displayName"
        name: "name"
      maxNumberOfClustersPerUser: 0
      clusterTimeToLive: 0
      allowedInstanceTypes:
      - "allowedInstanceTypes"
      - "allowedInstanceTypes"
      maxNumberOfClusters: 0
      defaultTags:
        key: "defaultTags"
      platforms: "platforms"
      smartsenseEnabled: false
  ImageCatalogRequest:
    type: "object"
    required:
    - "name"
    - "url"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      url:
        type: "string"
        description: "custom image catalog's URL"
        pattern: "^http[s]?://.*"
    example:
      name: "name"
      url: "url"
  RegionResponse:
    type: "object"
    properties:
      regions:
        type: "array"
        description: "regions"
        uniqueItems: true
        items:
          type: "string"
      displayNames:
        type: "object"
        description: "regions with displayNames"
        additionalProperties:
          type: "string"
      availabilityZones:
        type: "object"
        description: "availability zones"
        additionalProperties:
          type: "array"
          items:
            type: "string"
      defaultRegion:
        type: "string"
        description: "default regions"
    example:
      regions:
      - "regions"
      - "regions"
      displayNames:
        key: "displayNames"
      defaultRegion: "defaultRegion"
      availabilityZones:
        key:
        - "availabilityZones"
        - "availabilityZones"
  StackValidationRequest:
    type: "object"
    required:
    - "hostGroups"
    - "instanceGroups"
    - "platform"
    properties:
      hostGroups:
        type: "array"
        description: "collection of hostgroups"
        uniqueItems: true
        items:
          $ref: "#/definitions/HostGroupRequest"
      instanceGroups:
        type: "array"
        description: "collection of instance groupst"
        uniqueItems: true
        items:
          $ref: "#/definitions/instanceGroups"
      blueprintId:
        type: "integer"
        format: "int64"
        description: "blueprint id for the cluster"
      blueprintName:
        type: "string"
        description: "blueprint name for the cluster"
      blueprint:
        description: "blueprint for the cluster"
        $ref: "#/definitions/BlueprintRequest"
      networkId:
        type: "integer"
        format: "int64"
        description: "network resource id for the stack"
      network:
        description: "stack related network"
        $ref: "#/definitions/NetworkRequest"
      platform:
        type: "string"
        description: "type of cloud provider"
      credentialId:
        type: "integer"
        format: "int64"
        description: "credential resource id for the stack"
      credentialName:
        type: "string"
        description: "credential resource name for the stack"
      credential:
        description: "stack related credential"
        $ref: "#/definitions/CredentialRequest"
      fileSystem:
        description: "cluster related filesystem"
        $ref: "#/definitions/FileSystem"
    example:
      blueprint:
        ambariBlueprint: "ambariBlueprint"
        inputs:
        - referenceConfiguration: "referenceConfiguration"
          name: "name"
          description: "description"
        - referenceConfiguration: "referenceConfiguration"
          name: "name"
          description: "description"
        name: "name"
        description: "description"
        url: "url"
        properties:
        - key:
            key: "properties"
        - key:
            key: "properties"
        tags:
          key: "{}"
      fileSystem:
        name: "name"
        defaultFs: false
        type: "WASB_INTEGRATED"
        properties:
          key: "properties"
      hostGroups:
      - recipes:
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        recipeIds:
        - 0
        - 0
        recipeNames:
        - "recipeNames"
        - "recipeNames"
        recoveryMode: "MANUAL"
        name: "name"
        constraint:
          hostCount: 9
          constraintTemplateName: "constraintTemplateName"
          instanceGroupName: "instanceGroupName"
      - recipes:
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        recipeIds:
        - 0
        - 0
        recipeNames:
        - "recipeNames"
        - "recipeNames"
        recoveryMode: "MANUAL"
        name: "name"
        constraint:
          hostCount: 9
          constraintTemplateName: "constraintTemplateName"
          instanceGroupName: "instanceGroupName"
      instanceGroups:
      - securityGroupId: 1
        template:
          volumeType: "volumeType"
          cloudPlatform: "cloudPlatform"
          instanceType: "instanceType"
          customInstanceType:
            memory: 5
            cpus: 9
          topologyId: 5
          name: "name"
          description: "description"
          volumeCount: 2
          parameters:
            key: "{}"
          volumeSize: 7
        nodeCount: 59621
        securityGroup:
          securityGroupId: "securityGroupId"
          cloudPlatform: "cloudPlatform"
          securityRules:
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
          name: "name"
          description: "description"
        templateId: 6
        type: "GATEWAY"
        parameters:
          key: "{}"
        group: "group"
      - securityGroupId: 1
        template:
          volumeType: "volumeType"
          cloudPlatform: "cloudPlatform"
          instanceType: "instanceType"
          customInstanceType:
            memory: 5
            cpus: 9
          topologyId: 5
          name: "name"
          description: "description"
          volumeCount: 2
          parameters:
            key: "{}"
          volumeSize: 7
        nodeCount: 59621
        securityGroup:
          securityGroupId: "securityGroupId"
          cloudPlatform: "cloudPlatform"
          securityRules:
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
          name: "name"
          description: "description"
        templateId: 6
        type: "GATEWAY"
        parameters:
          key: "{}"
        group: "group"
      credential:
        cloudPlatform: "cloudPlatform"
        name: "name"
        topologyId: 0
        description: "description"
        parameters:
          key: "{}"
      blueprintName: "blueprintName"
      credentialId: 2
      networkId: 3
      credentialName: "credentialName"
      blueprintId: 9
      platform: "platform"
      network:
        subnetCIDR: "subnetCIDR"
        cloudPlatform: "cloudPlatform"
        topologyId: 0
        name: "name"
        description: "description"
        parameters:
          key: "{}"
  oracle:
    type: "object"
    required:
    - "version"
    properties:
      version:
        type: "string"
        description: "Version of the Database"
    example:
      version: "version"
  CustomContainerRequest:
    type: "object"
    properties:
      definitions:
        type: "object"
        additionalProperties:
          type: "string"
    example:
      definitions:
        key: "definitions"
  NetworkRequest:
    type: "object"
    required:
    - "cloudPlatform"
    - "name"
    properties:
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      subnetCIDR:
        type: "string"
        description: "the subnet definition of the network in CIDR format"
      cloudPlatform:
        type: "string"
        description: "type of cloud provider"
      parameters:
        type: "object"
        description: "provider specific parameters of the specified network"
        additionalProperties:
          type: "object"
          properties: {}
      topologyId:
        type: "integer"
        format: "int64"
        description: "id of the topology the resource belongs to"
      name:
        type: "string"
        description: "name of the resource"
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
    example:
      subnetCIDR: "subnetCIDR"
      cloudPlatform: "cloudPlatform"
      topologyId: 0
      name: "name"
      description: "description"
      parameters:
        key: "{}"
  FlexSubscriptionRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the resource"
      subscriptionId:
        type: "string"
        description: "Identifier of Flex subscription."
        readOnly: true
        pattern: "^(FLEX-[0-9]{10}$)"
      smartSenseSubscriptionId:
        type: "integer"
        format: "int64"
        description: "Identifier of SmartSense subscription Cloudbreak domain object\
          \ json representation."
        readOnly: true
      usedAsDefault:
        type: "boolean"
        description: "true if the flex subscription is the default one"
        default: false
      usedForController:
        type: "boolean"
        description: "true if the flex subscription was used for the controller"
        default: false
    example:
      smartSenseSubscriptionId: 0
      usedForController: false
      name: "name"
      subscriptionId: "subscriptionId"
      usedAsDefault: false
  PlatformAccessConfigsResponse:
    type: "object"
    properties:
      accessConfigs:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/AccessConfigJson"
    example:
      accessConfigs:
      - name: "name"
        id: "id"
        properties:
          key: "{}"
      - name: "name"
        id: "id"
        properties:
          key: "{}"
  CredentialResponse:
    type: "object"
    required:
    - "cloudPlatform"
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      cloudPlatform:
        type: "string"
        description: "type of cloud provider"
      parameters:
        type: "object"
        description: "cloud specific parameters for credential"
        additionalProperties:
          type: "object"
          properties: {}
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      topologyId:
        type: "integer"
        format: "int64"
        description: "id of the topology the resource belongs to"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      public:
        type: "boolean"
        description: "resource is visible in account"
        default: false
    example:
      cloudPlatform: "cloudPlatform"
      public: false
      name: "name"
      topologyId: 0
      description: "description"
      id: 6
      parameters:
        key: "{}"
  BaseImageResponse:
    type: "object"
    properties:
      hdpStacks:
        type: "array"
        items:
          $ref: "#/definitions/StackDetailsJson"
      hdfStacks:
        type: "array"
        items:
          $ref: "#/definitions/StackDetailsJson"
      date:
        type: "string"
      description:
        type: "string"
      os:
        type: "string"
      osType:
        type: "string"
      uuid:
        type: "string"
      version:
        type: "string"
      repo:
        type: "object"
        additionalProperties:
          type: "string"
      images:
        type: "object"
        additionalProperties:
          type: "object"
          additionalProperties:
            type: "string"
      stackDetails:
        $ref: "#/definitions/StackDetailsJson"
    example:
      hdpStacks:
      - mpacks:
        - mpackUrl: "mpackUrl"
        - mpackUrl: "mpackUrl"
        repo:
          stack:
            key: "stack"
          util:
            key: "util"
        version: "version"
      - mpacks:
        - mpackUrl: "mpackUrl"
        - mpackUrl: "mpackUrl"
        repo:
          stack:
            key: "stack"
          util:
            key: "util"
        version: "version"
      date: "date"
      images:
        key:
          key: "images"
      stackDetails:
        mpacks:
        - mpackUrl: "mpackUrl"
        - mpackUrl: "mpackUrl"
        repo:
          stack:
            key: "stack"
          util:
            key: "util"
        version: "version"
      os: "os"
      hdfStacks:
      - mpacks:
        - mpackUrl: "mpackUrl"
        - mpackUrl: "mpackUrl"
        repo:
          stack:
            key: "stack"
          util:
            key: "util"
        version: "version"
      - mpacks:
        - mpackUrl: "mpackUrl"
        - mpackUrl: "mpackUrl"
        repo:
          stack:
            key: "stack"
          util:
            key: "util"
        version: "version"
      repo:
        key: "repo"
      osType: "osType"
      description: "description"
      uuid: "uuid"
      version: "version"
  GeneralSettings:
    type: "object"
    required:
    - "credentialName"
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the stack"
        minLength: 5
        maxLength: 40
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      credentialName:
        type: "string"
        description: "credential resource name for the stack"
    example:
      name: "name"
      credentialName: "credentialName"
  AccessConfigJson:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      properties:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
    example:
      name: "name"
      id: "id"
      properties:
        key: "{}"
  BlueprintResponse:
    type: "object"
    required:
    - "name"
    properties:
      ambariBlueprint:
        type: "string"
        description: "ambari blueprint JSON, set this or the url field"
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      inputs:
        type: "array"
        description: "input parameters of the blueprint"
        uniqueItems: true
        items:
          $ref: "#/definitions/BlueprintParameter"
      tags:
        type: "object"
        description: "user defined tags for blueprint"
        additionalProperties:
          type: "object"
          properties: {}
      name:
        type: "string"
        description: "name of the resource"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      hostGroupCount:
        type: "integer"
        format: "int32"
        description: "number of host groups"
      status:
        type: "string"
        description: "status of the blueprint"
        enum:
        - "DEFAULT"
        - "DEFAULT_DELETED"
        - "USER_MANAGED"
      public:
        type: "boolean"
        description: "resource is visible in account"
        default: false
    example:
      public: false
      ambariBlueprint: "ambariBlueprint"
      inputs:
      - referenceConfiguration: "referenceConfiguration"
        name: "name"
        description: "description"
      - referenceConfiguration: "referenceConfiguration"
        name: "name"
        description: "description"
      hostGroupCount: 6
      name: "name"
      description: "description"
      id: 0
      tags:
        key: "{}"
      status: "DEFAULT"
  InstanceGroupAdjustment:
    type: "object"
    required:
    - "instanceGroup"
    - "scalingAdjustment"
    properties:
      instanceGroup:
        type: "string"
        description: "name of the instance group"
      scalingAdjustment:
        type: "integer"
        format: "int32"
        description: "scaling adjustment of the instance groups"
    example:
      scalingAdjustment: 0
      instanceGroup: "instanceGroup"
  PlatformResourceRequestJson:
    type: "object"
    properties:
      credentialId:
        type: "integer"
        format: "int64"
        description: "credential resource id for the request"
      credentialName:
        type: "string"
        description: "credential resource name for the request"
      region:
        type: "string"
        description: "Related region"
      platformVariant:
        type: "string"
        description: "cloud provider api variant"
      filters:
        type: "object"
        description: "filter for resources"
        additionalProperties:
          type: "string"
      availabilityZone:
        type: "string"
        description: "related availability zone"
    example:
      platformVariant: "platformVariant"
      credentialId: 0
      filters:
        key: "filters"
      credentialName: "credentialName"
      region: "region"
      availabilityZone: "availabilityZone"
  RDSConfigResponse:
    type: "object"
    required:
    - "connectionDriver"
    - "connectionURL"
    - "databaseEngine"
    - "databaseEngineDisplayName"
    - "name"
    - "type"
    properties:
      name:
        type: "string"
        description: "Name of the RDS configuration resource"
        minLength: 4
        maxLength: 50
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      connectionURL:
        type: "string"
        description: "JDBC connection URL in the form of jdbc:<db-type>://<address>:<port>/<db>"
        pattern: "^jdbc:(postgresql|mysql|oracle)://[-\\w\\.]*:\\d{1,5}/?\\w*"
      type:
        type: "string"
        description: "Type of RDS, aka the service name that will use the RDS like\
          \ HIVE, DRUID, SUPERSET, RANGER, etc."
        minLength: 3
        maxLength: 12
        pattern: "(^[a-zA-Z][-a-zA-Z0-9]*[a-zA-Z0-9]$)"
      connectorJarUrl:
        type: "string"
        description: "URL that points to the jar of the connection driver(connector)"
        minLength: 0
        maxLength: 150
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      creationDate:
        type: "integer"
        format: "int64"
        description: "creation time of the resource in long"
      publicInAccount:
        type: "boolean"
        description: "resource is visible in account"
        default: false
      clusterNames:
        type: "array"
        description: "list of clusters which use config"
        uniqueItems: true
        items:
          type: "string"
      stackVersion:
        type: "string"
        description: "(HDP, HDF)Stack version for the RDS configuration"
      databaseEngine:
        type: "string"
        description: "Name of the external database engine (MYSQL, POSTGRES...)"
      connectionDriver:
        type: "string"
        description: "Name of the JDBC connection driver (for example: 'org.postgresql.Driver')"
      databaseEngineDisplayName:
        type: "string"
        description: "Display name of the external database engine (Mysql, Postges...)"
    example:
      connectionDriver: "connectionDriver"
      databaseEngineDisplayName: "databaseEngineDisplayName"
      clusterNames:
      - "clusterNames"
      - "clusterNames"
      connectorJarUrl: "connectorJarUrl"
      publicInAccount: false
      stackVersion: "stackVersion"
      name: "name"
      connectionURL: "connectionURL"
      id: 0
      type: "type"
      creationDate: 6
      databaseEngine: "databaseEngine"
  FlexUsageComponentJson:
    type: "object"
    properties:
      componentId:
        type: "string"
      instances:
        type: "array"
        items:
          $ref: "#/definitions/FlexUsageComponentInstanceJson"
    example:
      componentId: "componentId"
      instances:
      - usageDate: "usageDate"
        creationTime: "creationTime"
        provider: "provider"
        guid: "guid"
        flexSubscriptionId: "flexSubscriptionId"
        region: "region"
        peakUsage: 0
      - usageDate: "usageDate"
        creationTime: "creationTime"
        provider: "provider"
        guid: "guid"
        flexSubscriptionId: "flexSubscriptionId"
        region: "region"
        peakUsage: 0
  instanceGroups:
    type: "object"
    required:
    - "group"
    - "nodeCount"
    properties:
      templateId:
        type: "integer"
        format: "int64"
        description: "referenced template id"
      securityGroupId:
        type: "integer"
        format: "int64"
        description: "security group resource id for the instance group"
      nodeCount:
        type: "integer"
        format: "int32"
        description: "number of nodes"
        minimum: 0.0
        maximum: 100000.0
      group:
        type: "string"
        description: "name of the instance group"
      type:
        type: "string"
        description: "type of the instance group"
        enum:
        - "GATEWAY"
        - "CORE"
      parameters:
        type: "object"
        description: "cloud specific parameters for instance group"
        additionalProperties:
          type: "object"
          properties: {}
      template:
        description: "instancegroup related template"
        $ref: "#/definitions/TemplateRequest"
      securityGroup:
        description: "instancegroup related securitygroup"
        $ref: "#/definitions/SecurityGroupRequest"
    example:
      securityGroupId: 1
      template:
        volumeType: "volumeType"
        cloudPlatform: "cloudPlatform"
        instanceType: "instanceType"
        customInstanceType:
          memory: 5
          cpus: 9
        topologyId: 5
        name: "name"
        description: "description"
        volumeCount: 2
        parameters:
          key: "{}"
        volumeSize: 7
      nodeCount: 59621
      securityGroup:
        securityGroupId: "securityGroupId"
        cloudPlatform: "cloudPlatform"
        securityRules:
        - subnet: "subnet"
          protocol: "protocol"
          ports: "ports"
          modifiable: false
        - subnet: "subnet"
          protocol: "protocol"
          ports: "ports"
          modifiable: false
        name: "name"
        description: "description"
      templateId: 6
      type: "GATEWAY"
      parameters:
        key: "{}"
      group: "group"
  ClusterTemplateRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the cluster template"
      template:
        type: "string"
        description: "stringified template JSON"
      type:
        type: "string"
        description: "type of the cluster template"
        enum:
        - "QUICK_START"
    example:
      template: "template"
      name: "name"
      type: "QUICK_START"
  PlatformDisksJson:
    type: "object"
    properties:
      diskTypes:
        type: "object"
        description: "disk types"
        additionalProperties:
          type: "array"
          items:
            type: "string"
      defaultDisks:
        type: "object"
        description: "default disks"
        additionalProperties:
          type: "string"
      diskMappings:
        type: "object"
        description: "disk mappings"
        additionalProperties:
          type: "object"
          additionalProperties:
            type: "string"
      displayNames:
        type: "object"
        description: "disk displayNames"
        additionalProperties:
          type: "object"
          additionalProperties:
            type: "string"
    example:
      displayNames:
        key:
          key: "displayNames"
      defaultDisks:
        key: "defaultDisks"
      diskMappings:
        key:
          key: "diskMappings"
      diskTypes:
        key:
        - "diskTypes"
        - "diskTypes"
  CustomDomainSettings:
    type: "object"
    properties:
      customDomain:
        type: "string"
        description: "custom domain name for the nodes in the stack"
      customHostname:
        type: "string"
        description: "custom hostname for nodes in the stack"
      clusterNameAsSubdomain:
        type: "boolean"
        description: "using the cluster name to create subdomain"
        default: false
      hostgroupNameAsHostname:
        type: "boolean"
        description: "using the hostgroup names to create hostnames"
        default: false
    example:
      hostgroupNameAsHostname: false
      customHostname: "customHostname"
      clusterNameAsSubdomain: false
      customDomain: "customDomain"
  ConstraintTemplateRequest:
    type: "object"
    required:
    - "cpu"
    - "disk"
    - "memory"
    - "name"
    - "orchestratorType"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      cpu:
        type: "number"
        format: "double"
        description: "number of CPU cores needed for the Ambari node"
      memory:
        type: "number"
        format: "double"
        description: "memory needed for the Ambari container (GB)"
      disk:
        type: "number"
        format: "double"
        description: "disk size needed for an Ambari node (GB)"
      orchestratorType:
        type: "string"
        description: "type of orchestrator"
    example:
      orchestratorType: "orchestratorType"
      disk: 1.46581298050294517310021547018550336360931396484375
      memory: 6.02745618307040320615897144307382404804229736328125
      name: "name"
      description: "description"
      cpu: 0.80082819046101150206595775671303272247314453125
  UpdateCluster:
    type: "object"
    properties:
      hostGroupAdjustment:
        description: "host group adjustment"
        $ref: "#/definitions/HostGroupAdjustment"
      status:
        type: "string"
        description: "request status"
        enum:
        - "SYNC"
        - "FULL_SYNC"
        - "REPAIR_FAILED_NODES"
        - "STOPPED"
        - "STARTED"
      userNamePasswordJson:
        description: "user details"
        $ref: "#/definitions/UserNamePassword"
      blueprintId:
        type: "integer"
        format: "int64"
        description: "blueprint id for the cluster"
      validateBlueprint:
        type: "boolean"
        description: "blueprint validation"
        default: false
      hostgroups:
        type: "array"
        description: "collection of hostgroups"
        uniqueItems: true
        items:
          $ref: "#/definitions/HostGroupRequest"
      ambariStackDetails:
        description: "details of the Ambari stack"
        $ref: "#/definitions/AmbariStackDetails"
      kerberosPassword:
        type: "string"
        description: "kerberos admin password"
        minLength: 5
        maxLength: 50
      kerberosPrincipal:
        type: "string"
        description: "kerberos principal"
    example:
      hostGroupAdjustment:
        withStackUpdate: false
        scalingAdjustment: 0
        hostGroup: "hostGroup"
        validateNodeCount: false
      userNamePasswordJson:
        password: "password"
        oldPassword: "oldPassword"
        userName: "userName"
      validateBlueprint: false
      hostgroups:
      - recipes:
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        recipeIds:
        - 0
        - 0
        recipeNames:
        - "recipeNames"
        - "recipeNames"
        recoveryMode: "MANUAL"
        name: "name"
        constraint:
          hostCount: 9
          constraintTemplateName: "constraintTemplateName"
          instanceGroupName: "instanceGroupName"
      - recipes:
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        - recipeType: "PRE_AMBARI_START"
          name: "name"
          description: "description"
          uri: "uri"
          content: "content"
        recipeIds:
        - 0
        - 0
        recipeNames:
        - "recipeNames"
        - "recipeNames"
        recoveryMode: "MANUAL"
        name: "name"
        constraint:
          hostCount: 9
          constraintTemplateName: "constraintTemplateName"
          instanceGroupName: "instanceGroupName"
      ambariStackDetails:
        enableGplRepo: false
        stack: "stack"
        os: "os"
        stackRepoId: "stackRepoId"
        utilsRepoId: "utilsRepoId"
        mpackUrl: "mpackUrl"
        version: "version"
        stackBaseURL: "stackBaseURL"
        versionDefinitionFileUrl: "versionDefinitionFileUrl"
        repositoryVersion: "repositoryVersion"
        utilsBaseURL: "utilsBaseURL"
        mpacks:
        - name: "name"
        - name: "name"
        verify: false
      kerberosPassword: "kerberosPassword"
      blueprintId: 6
      kerberosPrincipal: "kerberosPrincipal"
      status: "SYNC"
  CredentialRequest:
    type: "object"
    required:
    - "cloudPlatform"
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      cloudPlatform:
        type: "string"
        description: "type of cloud provider"
      parameters:
        type: "object"
        description: "cloud specific parameters for credential"
        additionalProperties:
          type: "object"
          properties: {}
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      topologyId:
        type: "integer"
        format: "int64"
        description: "id of the topology the resource belongs to"
    example:
      cloudPlatform: "cloudPlatform"
      name: "name"
      topologyId: 0
      description: "description"
      parameters:
        key: "{}"
  FailureReport:
    type: "object"
    required:
    - "failedNodes"
    properties:
      failedNodes:
        type: "array"
        description: "List of failed nodes"
        items:
          type: "string"
    example:
      failedNodes:
      - "failedNodes"
      - "failedNodes"
  StackAuthentication:
    type: "object"
    properties:
      publicKey:
        type: "string"
        description: "public key for accessing instances"
      publicKeyId:
        type: "string"
        description: "public key id for accessing instances"
      loginUserName:
        type: "string"
        description: "authentication name for machines"
    example:
      loginUserName: "loginUserName"
      publicKey: "publicKey"
      publicKeyId: "publicKeyId"
  User:
    type: "object"
    properties:
      username:
        type: "string"
    example:
      username: "username"
  UserProfileResponse:
    type: "object"
    properties:
      credential:
        $ref: "#/definitions/CredentialResponse"
      owner:
        type: "string"
      account:
        type: "string"
      uiProperties:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
    example:
      owner: "owner"
      credential:
        cloudPlatform: "cloudPlatform"
        public: false
        name: "name"
        topologyId: 0
        description: "description"
        id: 6
        parameters:
          key: "{}"
      uiProperties:
        key: "{}"
      account: "account"
  SecurityRuleResponse:
    type: "object"
    required:
    - "ports"
    - "protocol"
    - "subnet"
    properties:
      subnet:
        type: "string"
        description: "definition of allowed subnet in CIDR format"
        pattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\\
          /([0-9]|[1-2][0-9]|3[0-2]))$"
      ports:
        type: "string"
        description: "comma separated list of accessible ports"
        pattern: "^[1-9][0-9]{0,4}(-[1-9][0-9]{0,4}){0,1}(,[1-9][0-9]{0,4}(-[1-9][0-9]{0,4}){0,1})*$"
      protocol:
        type: "string"
        description: "protocol of the rule"
      modifiable:
        type: "boolean"
        description: "flag for making the rule modifiable"
        default: false
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
    example:
      subnet: "subnet"
      protocol: "protocol"
      id: 6
      ports: "ports"
      modifiable: false
  VolumeParameterConfigJson:
    type: "object"
    properties:
      volumeParameterType:
        type: "string"
      minimumSize:
        type: "integer"
        format: "int32"
      maximumSize:
        type: "integer"
        format: "int32"
      minimumNumber:
        type: "integer"
        format: "int32"
      maximumNumber:
        type: "integer"
        format: "int32"
    example:
      volumeParameterType: "volumeParameterType"
      minimumSize: 0
      maximumNumber: 5
      maximumSize: 6
      minimumNumber: 1
  SmartSenseSubscriptionJson:
    type: "object"
    required:
    - "subscriptionId"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
        readOnly: true
      subscriptionId:
        type: "string"
        description: "Identifier of SmartSense subscription."
        pattern: "^([a-zA-Z]{1}-[0-9]{8}-[a-zA-Z]{1}-[0-9]{8}$)"
      owner:
        type: "string"
        description: "id of the resource owner that is provided by OAuth provider"
        readOnly: true
      account:
        type: "string"
        description: "account id of the resource owner that is provided by OAuth provider"
        readOnly: true
      publicInAccount:
        type: "boolean"
        description: "resource is visible in account"
        readOnly: true
        default: false
      autoGenerated:
        type: "boolean"
        description: "Flag of aut generated SmartSense subscription."
        default: false
    example:
      owner: "owner"
      publicInAccount: false
      id: 1
      autoGenerated: false
      subscriptionId: "subscriptionId"
      account: "account"
  InstanceGroupResponse:
    type: "object"
    required:
    - "group"
    - "nodeCount"
    properties:
      templateId:
        type: "integer"
        format: "int64"
        description: "referenced template id"
      securityGroupId:
        type: "integer"
        format: "int64"
        description: "security group resource id for the instance group"
      nodeCount:
        type: "integer"
        format: "int32"
        description: "number of nodes"
        minimum: 0.0
        maximum: 100000.0
      group:
        type: "string"
        description: "name of the instance group"
      type:
        type: "string"
        description: "type of the instance group"
        enum:
        - "GATEWAY"
        - "CORE"
      parameters:
        type: "object"
        description: "cloud specific parameters for instance group"
        additionalProperties:
          type: "object"
          properties: {}
      template:
        description: "instancegroup related template"
        $ref: "#/definitions/TemplateResponse"
      securityGroup:
        description: "instancegroup related securitygroup"
        $ref: "#/definitions/SecurityGroupResponse"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
        readOnly: true
      metadata:
        type: "array"
        description: "metadata of instances"
        uniqueItems: true
        items:
          $ref: "#/definitions/InstanceMetaData"
    example:
      securityGroupId: 1
      template:
        volumeType: "volumeType"
        cloudPlatform: "cloudPlatform"
        public: false
        instanceType: "instanceType"
        customInstanceType:
          memory: 5
          cpus: 9
        topologyId: 9
        name: "name"
        description: "description"
        volumeCount: 8
        id: 6
        parameters:
          key: "{}"
        volumeSize: 9
      metadata:
      - sshPort: 3
        instanceId: "instanceId"
        ambariServer: false
        privateIp: "privateIp"
        instanceType: "GATEWAY"
        discoveryFQDN: "discoveryFQDN"
        publicIp: "publicIp"
        instanceGroup: "instanceGroup"
        instanceStatus: "REQUESTED"
      - sshPort: 3
        instanceId: "instanceId"
        ambariServer: false
        privateIp: "privateIp"
        instanceType: "GATEWAY"
        discoveryFQDN: "discoveryFQDN"
        publicIp: "publicIp"
        instanceGroup: "instanceGroup"
        instanceStatus: "REQUESTED"
      nodeCount: 49652
      securityGroup:
        securityGroupId: "securityGroupId"
        owner: "owner"
        cloudPlatform: "cloudPlatform"
        publicInAccount: false
        securityRules:
        - subnet: "subnet"
          protocol: "protocol"
          id: 6
          ports: "ports"
          modifiable: false
        - subnet: "subnet"
          protocol: "protocol"
          id: 6
          ports: "ports"
          modifiable: false
        name: "name"
        description: "description"
        id: 0
        account: "account"
      id: 6
      templateId: 7
      type: "GATEWAY"
      parameters:
        key: "{}"
      group: "group"
  RdsTestResult:
    type: "object"
    required:
    - "connectionResult"
    properties:
      connectionResult:
        type: "string"
        description: "result of RDS connection test"
    example:
      connectionResult: "connectionResult"
  CloudbreakUsage:
    type: "object"
    properties:
      owner:
        type: "string"
        description: "id of the resource owner that is provided by OAuth provider"
      username:
        type: "string"
        description: "ambari username"
      account:
        type: "string"
        description: "account id of the resource owner that is provided by OAuth provider"
      day:
        type: "string"
        description: "the day the usage of resources happened"
      provider:
        type: "string"
        description: "cloud provider of the stack"
      region:
        type: "string"
        description: "region of the stack"
      availabilityZone:
        type: "string"
        description: "availability zone of the stack"
      instanceHours:
        type: "integer"
        format: "int64"
        description: "hours since the instance is running"
      stackId:
        type: "integer"
        format: "int64"
        description: "id of the stack"
      stackName:
        type: "string"
        description: "name of the stack"
      costs:
        type: "number"
        format: "double"
        description: "computed costs of instance usage"
      instanceType:
        type: "string"
        description: "type of instance"
      instanceGroup:
        type: "string"
        description: "group name of instance"
      blueprintId:
        type: "integer"
        format: "int64"
        description: "id of the blueprint"
      blueprintName:
        type: "string"
        description: "name of the blueprint"
      duration:
        type: "string"
        description: "time since the instances are running in millisec"
      instanceNum:
        type: "integer"
        format: "int32"
        description: "number of instances running"
      peak:
        type: "integer"
        format: "int32"
        description: "maximum number of instances running"
      flexId:
        type: "string"
        description: "flex subscription id"
      stackUuid:
        type: "string"
        description: "unique id of the cluster"
    example:
      owner: "owner"
      costs: 3.35319334701124294184637619764544069766998291015625
      instanceNum: 7
      blueprintName: "blueprintName"
      stackId: 6
      instanceType: "instanceType"
      instanceHours: 5
      stackName: "stackName"
      peak: 0
      instanceGroup: "instanceGroup"
      availabilityZone: "availabilityZone"
      blueprintId: 3
      duration: "duration"
      provider: "provider"
      flexId: "flexId"
      region: "region"
      day: "day"
      stackUuid: "stackUuid"
      account: "account"
      username: "username"
  ImageCatalogResponse:
    type: "object"
    required:
    - "id"
    - "name"
    - "publicInAccount"
    - "url"
    - "usedAsDefault"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      url:
        type: "string"
        description: "custom image catalog's URL"
        pattern: "^http[s]?://.*"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      publicInAccount:
        type: "boolean"
        description: "resource is visible in account"
        default: false
      usedAsDefault:
        type: "boolean"
        description: "true if image catalog is the default one"
        default: false
      imagesResponse:
        description: "image response in imagecatalog"
        $ref: "#/definitions/ImagesResponse"
    example:
      publicInAccount: false
      imagesResponse:
        hdpImages:
        - date: "date"
          images:
            key:
              key: "images"
          stackDetails:
            mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          os: "os"
          repo:
            key: "repo"
          osType: "osType"
          description: "description"
          uuid: "uuid"
          version: "version"
        - date: "date"
          images:
            key:
              key: "images"
          stackDetails:
            mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          os: "os"
          repo:
            key: "repo"
          osType: "osType"
          description: "description"
          uuid: "uuid"
          version: "version"
        baseImages:
        - hdpStacks:
          - mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          - mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          date: "date"
          images:
            key:
              key: "images"
          stackDetails:
            mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          os: "os"
          hdfStacks:
          - mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          - mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          repo:
            key: "repo"
          osType: "osType"
          description: "description"
          uuid: "uuid"
          version: "version"
        - hdpStacks:
          - mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          - mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          date: "date"
          images:
            key:
              key: "images"
          stackDetails:
            mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          os: "os"
          hdfStacks:
          - mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          - mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          repo:
            key: "repo"
          osType: "osType"
          description: "description"
          uuid: "uuid"
          version: "version"
        hdfImages:
        - date: "date"
          images:
            key:
              key: "images"
          stackDetails:
            mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          os: "os"
          repo:
            key: "repo"
          osType: "osType"
          description: "description"
          uuid: "uuid"
          version: "version"
        - date: "date"
          images:
            key:
              key: "images"
          stackDetails:
            mpacks:
            - mpackUrl: "mpackUrl"
            - mpackUrl: "mpackUrl"
            repo:
              stack:
                key: "stack"
              util:
                key: "util"
            version: "version"
          os: "os"
          repo:
            key: "repo"
          osType: "osType"
          description: "description"
          uuid: "uuid"
          version: "version"
      name: "name"
      id: 0
      url: "url"
      usedAsDefault: false
  StackV2Request:
    type: "object"
    required:
    - "general"
    - "instanceGroups"
    properties:
      general:
        description: "general configuration parameters for a cluster (e.g. 'name',\
          \ 'credentialname')"
        $ref: "#/definitions/GeneralSettings"
      placement:
        description: "placement configuration parameters for a cluster (e.g. 'region',\
          \ 'availabilityZone')"
        $ref: "#/definitions/PlacementSettings"
      platformVariant:
        type: "string"
        description: "cloud provider api variant"
      ambariVersion:
        type: "string"
        description: "specific version of ambari"
      hdpVersion:
        type: "string"
        description: "specific version of HDP"
      parameters:
        type: "object"
        description: "additional cloud specific parameters for stack"
        additionalProperties:
          type: "object"
          properties: {}
      customDomain:
        description: "settings related to custom domain names"
        $ref: "#/definitions/CustomDomainSettings"
      tags:
        description: "stack related tags"
        $ref: "#/definitions/Tags"
      instanceGroups:
        type: "array"
        description: "collection of instance groupst"
        items:
          $ref: "#/definitions/instanceGroupsV2"
      failurePolicy:
        description: "failure policy in case of failures"
        $ref: "#/definitions/FailurePolicyRequest"
      stackAuthentication:
        description: "stack related authentication"
        $ref: "#/definitions/StackAuthentication"
      network:
        description: "stack related network"
        $ref: "#/definitions/NetworkV2Request"
      imageSettings:
        description: "settings for custom images"
        $ref: "#/definitions/ImageSettings"
      flexId:
        type: "integer"
        format: "int64"
        description: "id of the related flex subscription"
      cluster:
        description: "cluster request object on stack"
        $ref: "#/definitions/ClusterV2Request"
    example:
      cluster:
        fileSystem:
          name: "name"
          defaultFs: false
          type: "WASB_INTEGRATED"
          properties:
            key: "properties"
        executorType: "CONTAINER"
        emailNeeded: false
        proxyName: "proxyName"
        sharedService:
          sharedCluster: "sharedCluster"
        ambari:
          ambariRepoDetailsJson:
            baseUrl: "baseUrl"
            version: "version"
            gpgKeyUrl: "gpgKeyUrl"
          blueprintCustomProperties: "blueprintCustomProperties"
          ambariSecurityMasterKey: "ambariSecurityMasterKey"
          blueprintName: "blueprintName"
          kerberos:
            principal: "principal"
            password: "password"
            krb5Conf: "krb5Conf"
            masterKey: "masterKey"
            ldapUrl: "ldapUrl"
            admin: "admin"
            realm: "realm"
            containerDn: "containerDn"
            descriptor: "descriptor"
            adminUrl: "adminUrl"
            url: "url"
            tcpAllowed: false
          userName: "userName"
          blueprintId: 2
          connectedCluster:
            sourceClusterName: "sourceClusterName"
            sourceClusterId: 5
          configStrategy: "NEVER_APPLY"
          enableSecurity: false
          password: "password"
          validateBlueprint: false
          ambariStackDetails:
            enableGplRepo: false
            stack: "stack"
            os: "os"
            stackRepoId: "stackRepoId"
            utilsRepoId: "utilsRepoId"
            mpackUrl: "mpackUrl"
            version: "version"
            stackBaseURL: "stackBaseURL"
            versionDefinitionFileUrl: "versionDefinitionFileUrl"
            repositoryVersion: "repositoryVersion"
            utilsBaseURL: "utilsBaseURL"
            mpacks:
            - name: "name"
            - name: "name"
            verify: false
          blueprintInputs:
          - name: "name"
            propertyValue: "propertyValue"
          - name: "name"
            propertyValue: "propertyValue"
          ambariDatabaseDetails:
            password: "password"
            port: 1
            vendor: "POSTGRES"
            name: "name"
            host: "host"
            userName: "userName"
          gateway:
            path: "path"
            topologyName: "topologyName"
            gatewayType: "CENTRAL"
            ssoProvider: "ssoProvider"
            enableGateway: false
            ssoType: "SSO_PROVIDER"
            tokenCert: "tokenCert"
            exposedServices:
            - "exposedServices"
            - "exposedServices"
        ldapConfigName: "ldapConfigName"
        rdsConfigNames:
        - "rdsConfigNames"
        - "rdsConfigNames"
        emailTo: "emailTo"
      hdpVersion: "hdpVersion"
      platformVariant: "platformVariant"
      imageSettings:
        imageId: "imageId"
        imageCatalog: "imageCatalog"
      customDomain:
        hostgroupNameAsHostname: false
        customHostname: "customHostname"
        clusterNameAsSubdomain: false
        customDomain: "customDomain"
      stackAuthentication:
        loginUserName: "loginUserName"
        publicKey: "publicKey"
        publicKeyId: "publicKeyId"
      tags:
        applicationTags:
          key: "applicationTags"
        userDefinedTags:
          key: "userDefinedTags"
        defaultTags:
          key: "defaultTags"
      network:
        subnetCIDR: "subnetCIDR"
        parameters:
          key: "{}"
      general:
        name: "name"
        credentialName: "credentialName"
      instanceGroups:
      - template:
          volumeType: "volumeType"
          instanceType: "instanceType"
          customInstanceType:
            memory: 5
            cpus: 9
          volumeCount: 6
          parameters:
            key: "{}"
          volumeSize: 1
        recipeNames:
        - "recipeNames"
        - "recipeNames"
        recoveryMode: "MANUAL"
        nodeCount: 8008
        securityGroup:
          securityGroupId: "securityGroupId"
          securityRules:
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
        type: "GATEWAY"
        parameters:
          key: "{}"
        group: "group"
      - template:
          volumeType: "volumeType"
          instanceType: "instanceType"
          customInstanceType:
            memory: 5
            cpus: 9
          volumeCount: 6
          parameters:
            key: "{}"
          volumeSize: 1
        recipeNames:
        - "recipeNames"
        - "recipeNames"
        recoveryMode: "MANUAL"
        nodeCount: 8008
        securityGroup:
          securityGroupId: "securityGroupId"
          securityRules:
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
          - subnet: "subnet"
            protocol: "protocol"
            ports: "ports"
            modifiable: false
        type: "GATEWAY"
        parameters:
          key: "{}"
        group: "group"
      placement:
        region: "region"
        availabilityZone: "availabilityZone"
      flexId: 5
      ambariVersion: "ambariVersion"
      parameters:
        key: "{}"
      failurePolicy:
        adjustmentType: "EXACT"
        threshold: 5
  SubscriptionRequest:
    type: "object"
    required:
    - "endpointUrl"
    properties:
      endpointUrl:
        type: "string"
        description: "url of the endpoint"
        pattern: "^(https?:\\/\\/)((([\\da-z\\.-]+)\\.([a-z]{2,6}))|localhost|[1-9][0-9]{0,2}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3})(:[1-9][0-9]{1,4})?\\\
          /([\\/\\w\\.-]*)\\/?$"
    example:
      endpointUrl: "endpointUrl"
  StackMatrix:
    type: "object"
    properties:
      hdp:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/StackDescriptor"
      hdf:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/StackDescriptor"
    example:
      hdp:
        key:
          minAmbari: "minAmbari"
          ambari:
            repo:
              key:
                baseUrl: "baseUrl"
                version: "version"
                gpgKeyUrl: "gpgKeyUrl"
            version: "version"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
      hdf:
        key:
          minAmbari: "minAmbari"
          ambari:
            repo:
              key:
                baseUrl: "baseUrl"
                version: "version"
                gpgKeyUrl: "gpgKeyUrl"
            version: "version"
          repo:
            stack:
              key: "stack"
            util:
              key: "util"
          version: "version"
  ImageJson:
    type: "object"
    properties:
      imageName:
        type: "string"
        description: "name of the image"
      imageCatalogUrl:
        type: "string"
        description: "url of the image catalog"
      imageId:
        type: "string"
        description: "id of the image"
      imageCatalogName:
        type: "string"
        description: "name of the image catalog"
    example:
      imageName: "imageName"
      imageId: "imageId"
      imageCatalogUrl: "imageCatalogUrl"
      imageCatalogName: "imageCatalogName"
  PlatformGatewaysResponse:
    type: "object"
    properties:
      gateways:
        type: "object"
        additionalProperties:
          type: "array"
          uniqueItems: true
          items:
            $ref: "#/definitions/CloudGatewayJson"
    example:
      gateways:
        key:
        - name: "name"
          id: "id"
          properties:
            key: "{}"
        - name: "name"
          id: "id"
          properties:
            key: "{}"
  LdapValidationRequest:
    type: "object"
    required:
    - "bindDn"
    - "bindPassword"
    - "serverHost"
    - "serverPort"
    properties:
      serverHost:
        type: "string"
        description: "public host or IP address of LDAP server"
      serverPort:
        type: "integer"
        format: "int32"
        description: "port of LDAP server (typically: 389 or 636 for LDAPS)"
        minimum: 1.0
        maximum: 65535.0
      protocol:
        type: "string"
        description: "determines the protocol (LDAP or LDAP over SSL)"
      bindDn:
        type: "string"
        description: "bind distinguished name for connection test and group search\
          \ (e.g. cn=admin,dc=example,dc=org)"
      bindPassword:
        type: "string"
        description: "password for the provided bind DN"
    example:
      bindDn: "bindDn"
      protocol: "protocol"
      bindPassword: "bindPassword"
      serverPort: 5249
      serverHost: "serverHost"
  ClusterTemplateResponse:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the cluster template"
      template:
        type: "string"
        description: "stringified template JSON"
      type:
        type: "string"
        description: "type of the cluster template"
        enum:
        - "QUICK_START"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
    example:
      template: "template"
      name: "name"
      id: 0
      type: "QUICK_START"
  LdapTestResult:
    type: "object"
    required:
    - "connectionResult"
    properties:
      connectionResult:
        type: "string"
        description: "result of Ldap connection test"
    example:
      connectionResult: "connectionResult"
  PlatformSshKeyResponse:
    type: "object"
    properties:
      name:
        type: "string"
      properties:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
    example:
      name: "name"
      properties:
        key: "{}"
  RecipeResponse:
    type: "object"
    required:
    - "recipeType"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      recipeType:
        type: "string"
        description: "type of recipe"
        enum:
        - "PRE_AMBARI_START"
        - "PRE_TERMINATION"
        - "POST_AMBARI_START"
        - "POST_CLUSTER_INSTALL"
      content:
        type: "string"
        description: "content of recipe"
      uri:
        type: "string"
        description: "recipe uri"
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
      public:
        type: "boolean"
        description: "resource is visible in account"
        default: false
    example:
      recipeType: "PRE_AMBARI_START"
      public: false
      name: "name"
      description: "description"
      id: 0
      uri: "uri"
      content: "content"
  FlexSubscriptionResponse:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the resource"
      subscriptionId:
        type: "string"
        description: "Identifier of Flex subscription."
        readOnly: true
        pattern: "^(FLEX-[0-9]{10}$)"
      smartSenseSubscriptionId:
        type: "integer"
        format: "int64"
        description: "Identifier of SmartSense subscription Cloudbreak domain object\
          \ json representation."
        readOnly: true
      usedAsDefault:
        type: "boolean"
        description: "true if the flex subscription is the default one"
        default: false
      usedForController:
        type: "boolean"
        description: "true if the flex subscription was used for the controller"
        default: false
      id:
        type: "integer"
        format: "int64"
        description: "id of the resource"
        readOnly: true
      owner:
        type: "string"
        description: "id of the resource owner that is provided by OAuth provider"
        readOnly: true
      account:
        type: "string"
        description: "account id of the resource owner that is provided by OAuth provider"
        readOnly: true
      publicInAccount:
        type: "boolean"
        description: "resource is visible in account"
        readOnly: true
        default: false
      smartSenseSubscription:
        description: "The associated SmartSense subscription Cloudbreak domain object\
          \ json representation."
        $ref: "#/definitions/SmartSenseSubscriptionJson"
    example:
      owner: "owner"
      publicInAccount: false
      smartSenseSubscriptionId: 0
      usedForController: false
      name: "name"
      smartSenseSubscription:
        owner: "owner"
        publicInAccount: false
        id: 1
        autoGenerated: false
        subscriptionId: "subscriptionId"
        account: "account"
      id: 6
      subscriptionId: "subscriptionId"
      account: "account"
      usedAsDefault: false
  ManagementPackDetails:
    type: "object"
    properties:
      name:
        type: "string"
    example:
      name: "name"
  ConfigsResponse:
    type: "object"
    required:
    - "inputs"
    properties:
      inputs:
        type: "array"
        description: "response object"
        uniqueItems: true
        items:
          $ref: "#/definitions/BlueprintInput"
    example:
      inputs:
      - name: "name"
        propertyValue: "propertyValue"
      - name: "name"
        propertyValue: "propertyValue"
  ManagementPackEntry:
    type: "object"
    properties:
      mpackUrl:
        type: "string"
    example:
      mpackUrl: "mpackUrl"
  CertificateResponse:
    type: "object"
    properties:
      serverCert:
        type: "array"
        description: "server certificate used by the gateway"
        items:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      clientKey:
        type: "array"
        description: "client key used by the gateway"
        items:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      clientCert:
        type: "array"
        description: "client certificate used by the gateway"
        items:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    example:
      clientCert:
      - "clientCert"
      - "clientCert"
      serverCert:
      - "serverCert"
      - "serverCert"
      clientKey:
      - "clientKey"
      - "clientKey"
  ProxyConfigResponse:
    type: "object"
    required:
    - "name"
    - "protocol"
    - "serverHost"
    - "serverPort"
    properties:
      name:
        type: "string"
        description: "Name of the proxy configuration resource"
        minLength: 4
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      description:
        type: "string"
        description: "description of the resource"
      serverHost:
        type: "string"
        description: "host or IP address of proxy server"
        minLength: 1
        maxLength: 255
        pattern: "(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\
          -]*[A-Za-z0-9])$)"
      serverPort:
        type: "integer"
        format: "int32"
        description: "port of proxy server (typically: 3128 or 8080)"
        minimum: 1.0
        maximum: 65535.0
      protocol:
        type: "string"
        description: "determines the protocol (http or https)"
        pattern: "^http(s)?$"
      userName:
        type: "string"
        description: "Username to use for basic authentication"
      id:
        type: "integer"
        format: "int64"
        description: "proxy configuration id for the cluster"
    example:
      protocol: "protocol"
      name: "name"
      description: "description"
      id: 6
      serverPort: 5249
      userName: "userName"
      serverHost: "serverHost"
  RecipeRequest:
    type: "object"
    required:
    - "recipeType"
    properties:
      name:
        type: "string"
        description: "name of the resource"
        minLength: 5
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      recipeType:
        type: "string"
        description: "type of recipe"
        enum:
        - "PRE_AMBARI_START"
        - "PRE_TERMINATION"
        - "POST_AMBARI_START"
        - "POST_CLUSTER_INSTALL"
      content:
        type: "string"
        description: "content of recipe"
      uri:
        type: "string"
        description: "recipe uri"
    example:
      recipeType: "PRE_AMBARI_START"
      name: "name"
      description: "description"
      uri: "uri"
      content: "content"
  RepoConfigValidationResponse:
    type: "object"
    properties:
      ambariBaseUrl:
        type: "boolean"
        description: "Indicates the request's value with the same key is valid and\
          \ reachable by Cloudbreak or not"
        default: false
      ambariGpgKeyUrl:
        type: "boolean"
        description: "Indicates the request's value with the same key is valid and\
          \ reachable by Cloudbreak or not"
        default: false
      stackBaseURL:
        type: "boolean"
        description: "Indicates the request's value with the same key is valid and\
          \ reachable by Cloudbreak or not"
        default: false
      utilsBaseURL:
        type: "boolean"
        description: "Indicates the request's value with the same key is valid and\
          \ reachable by Cloudbreak or not"
        default: false
      versionDefinitionFileUrl:
        type: "boolean"
        description: "Indicates the request's value with the same key is valid and\
          \ reachable by Cloudbreak or not"
        default: false
      mpackUrl:
        type: "boolean"
        description: "Indicates the request's value with the same key is valid and\
          \ reachable by Cloudbreak or not"
        default: false
    example:
      utilsBaseURL: false
      ambariGpgKeyUrl: false
      mpackUrl: false
      stackBaseURL: false
      versionDefinitionFileUrl: false
      ambariBaseUrl: false
  FlexUsageProductJson:
    type: "object"
    properties:
      productId:
        type: "string"
      components:
        type: "array"
        items:
          $ref: "#/definitions/FlexUsageComponentJson"
    example:
      components:
      - componentId: "componentId"
        instances:
        - usageDate: "usageDate"
          creationTime: "creationTime"
          provider: "provider"
          guid: "guid"
          flexSubscriptionId: "flexSubscriptionId"
          region: "region"
          peakUsage: 0
        - usageDate: "usageDate"
          creationTime: "creationTime"
          provider: "provider"
          guid: "guid"
          flexSubscriptionId: "flexSubscriptionId"
          region: "region"
          peakUsage: 0
      - componentId: "componentId"
        instances:
        - usageDate: "usageDate"
          creationTime: "creationTime"
          provider: "provider"
          guid: "guid"
          flexSubscriptionId: "flexSubscriptionId"
          region: "region"
          peakUsage: 0
        - usageDate: "usageDate"
          creationTime: "creationTime"
          provider: "provider"
          guid: "guid"
          flexSubscriptionId: "flexSubscriptionId"
          region: "region"
          peakUsage: 0
      productId: "productId"
  FlexUsageComponentInstanceJson:
    type: "object"
    properties:
      guid:
        type: "string"
      region:
        type: "string"
      provider:
        type: "string"
      flexSubscriptionId:
        type: "string"
      creationTime:
        type: "string"
      usageDate:
        type: "string"
      peakUsage:
        type: "integer"
        format: "int32"
    example:
      usageDate: "usageDate"
      creationTime: "creationTime"
      provider: "provider"
      guid: "guid"
      flexSubscriptionId: "flexSubscriptionId"
      region: "region"
      peakUsage: 0
  ImageSettings:
    type: "object"
    properties:
      imageCatalog:
        type: "string"
        description: "custom image catalog URL"
      imageId:
        type: "string"
        description: "virtual machine image id from ImageCatalog, machines of the\
          \ cluster will be started from this image"
    example:
      imageId: "imageId"
      imageCatalog: "imageCatalog"
  InstanceMetaData:
    type: "object"
    properties:
      privateIp:
        type: "string"
        description: "private ip of the insctance"
      publicIp:
        type: "string"
        description: "public ip of the instance"
      sshPort:
        type: "integer"
        format: "int32"
      instanceId:
        type: "string"
        description: "id of the instance"
      ambariServer:
        type: "boolean"
        description: "ambari server address"
        default: false
      discoveryFQDN:
        type: "string"
        description: "the fully qualified domain name of the node in the service discovery\
          \ cluster"
      instanceGroup:
        type: "string"
        description: "name of the instance group"
      instanceStatus:
        type: "string"
        description: "status of the instance"
        enum:
        - "REQUESTED"
        - "CREATED"
        - "UNREGISTERED"
        - "REGISTERED"
        - "DECOMMISSIONED"
        - "TERMINATED"
        - "FAILED"
        - "STOPPED"
      instanceType:
        type: "string"
        description: "type of the instance"
        enum:
        - "GATEWAY"
        - "GATEWAY_PRIMARY"
        - "CORE"
    example:
      sshPort: 3
      instanceId: "instanceId"
      ambariServer: false
      privateIp: "privateIp"
      instanceType: "GATEWAY"
      discoveryFQDN: "discoveryFQDN"
      publicIp: "publicIp"
      instanceGroup: "instanceGroup"
      instanceStatus: "REQUESTED"
  RdsConfig:
    type: "object"
    required:
    - "connectionPassword"
    - "connectionURL"
    - "connectionUserName"
    - "name"
    - "type"
    properties:
      name:
        type: "string"
        description: "Name of the RDS configuration resource"
        minLength: 4
        maxLength: 50
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      connectionURL:
        type: "string"
        description: "JDBC connection URL in the form of jdbc:<db-type>://<address>:<port>/<db>"
        pattern: "^jdbc:(postgresql|mysql|oracle)://[-\\w\\.]*:\\d{1,5}/?\\w*"
      type:
        type: "string"
        description: "Type of RDS, aka the service name that will use the RDS like\
          \ HIVE, DRUID, SUPERSET, RANGER, etc."
        minLength: 3
        maxLength: 12
        pattern: "(^[a-zA-Z][-a-zA-Z0-9]*[a-zA-Z0-9]$)"
      connectorJarUrl:
        type: "string"
        description: "URL that points to the jar of the connection driver(connector)"
        minLength: 0
        maxLength: 150
      connectionUserName:
        type: "string"
        description: "Username to use for the jdbc connection"
      connectionPassword:
        type: "string"
        description: "Password to use for the jdbc connection"
      oracleParameters:
        description: "Oracle specific properties"
        $ref: "#/definitions/oracle"
    example:
      connectionUserName: "connectionUserName"
      connectorJarUrl: "connectorJarUrl"
      oracleParameters:
        version: "version"
      name: "name"
      connectionURL: "connectionURL"
      connectionPassword: "connectionPassword"
      type: "type"
  SecurityGroupRequest:
    type: "object"
    required:
    - "cloudPlatform"
    - "name"
    properties:
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      securityGroupId:
        type: "string"
        description: "Exisiting security group id"
      cloudPlatform:
        type: "string"
        description: "type of cloud provider"
      name:
        type: "string"
        description: "name of the resource"
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      securityRules:
        type: "array"
        description: "list of security rules that relates to the security group"
        items:
          $ref: "#/definitions/SecurityRuleRequest"
    example:
      securityGroupId: "securityGroupId"
      cloudPlatform: "cloudPlatform"
      securityRules:
      - subnet: "subnet"
        protocol: "protocol"
        ports: "ports"
        modifiable: false
      - subnet: "subnet"
        protocol: "protocol"
        ports: "ports"
        modifiable: false
      name: "name"
      description: "description"
  KerberosRequest:
    type: "object"
    properties:
      admin:
        type: "string"
        description: "kerberos admin user"
        minLength: 5
        maxLength: 15
      url:
        type: "string"
        description: "kerberos KDC server URL"
      adminUrl:
        type: "string"
        description: "kerberos admin server URL"
      realm:
        type: "string"
      ldapUrl:
        type: "string"
      containerDn:
        type: "string"
      tcpAllowed:
        type: "boolean"
        default: false
      descriptor:
        type: "string"
      krb5Conf:
        type: "string"
      masterKey:
        type: "string"
        description: "kerberos master key"
        minLength: 3
        maxLength: 50
      password:
        type: "string"
        description: "kerberos admin password"
        minLength: 5
        maxLength: 50
      principal:
        type: "string"
        description: "kerberos principal"
    example:
      principal: "principal"
      password: "password"
      krb5Conf: "krb5Conf"
      masterKey: "masterKey"
      ldapUrl: "ldapUrl"
      admin: "admin"
      realm: "realm"
      containerDn: "containerDn"
      descriptor: "descriptor"
      adminUrl: "adminUrl"
      url: "url"
      tcpAllowed: false
  BlueprintInput:
    type: "object"
    properties:
      name:
        type: "string"
      propertyValue:
        type: "string"
    example:
      name: "name"
      propertyValue: "propertyValue"
  LdapConfigRequest:
    type: "object"
    required:
    - "bindDn"
    - "bindPassword"
    - "name"
    - "serverHost"
    - "serverPort"
    - "userSearchBase"
    properties:
      description:
        type: "string"
        description: "description of the resource"
        minLength: 0
        maxLength: 1000
      serverHost:
        type: "string"
        description: "public host or IP address of LDAP server"
      serverPort:
        type: "integer"
        format: "int32"
        description: "port of LDAP server (typically: 389 or 636 for LDAPS)"
        minimum: 1.0
        maximum: 65535.0
      protocol:
        type: "string"
        description: "determines the protocol (LDAP or LDAP over SSL)"
      bindDn:
        type: "string"
        description: "bind distinguished name for connection test and group search\
          \ (e.g. cn=admin,dc=example,dc=org)"
      userSearchBase:
        type: "string"
        description: "template for user search for authentication (e.g. dc=hadoop,dc=apache,dc=org)"
      groupSearchBase:
        type: "string"
        description: "template for group search for authorization (e.g. dc=hadoop,dc=apache,dc=org)"
      userNameAttribute:
        type: "string"
        description: "attribute name for simplified search filter (e.g. sAMAccountName\
          \ in case of AD, UID or cn for LDAP)."
      domain:
        type: "string"
        description: "domain in LDAP server (e.g. ad.seq.com)."
      directoryType:
        type: "string"
        description: "directory type of server LDAP or AD"
        enum:
        - "LDAP"
        - "ACTIVE_DIRECTORY"
      userObjectClass:
        type: "string"
        description: "User Object Class (defaults to person)"
      groupObjectClass:
        type: "string"
        description: "Group Object Class (defaults to groupOfNames)"
      groupNameAttribute:
        type: "string"
        description: "Group Id Attribute (defaults to cn)"
      groupMemberAttribute:
        type: "string"
        description: "Group Member Attribute (defaults to member)"
      adminGroup:
        type: "string"
        description: "LDAP group for administrators"
      name:
        type: "string"
        description: "name of the resource"
        minLength: 1
        maxLength: 100
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      bindPassword:
        type: "string"
        description: "password for the provided bind DN"
    example:
      adminGroup: "adminGroup"
      bindPassword: "bindPassword"
      groupNameAttribute: "groupNameAttribute"
      groupMemberAttribute: "groupMemberAttribute"
      description: "description"
      userNameAttribute: "userNameAttribute"
      serverPort: 5249
      serverHost: "serverHost"
      directoryType: "LDAP"
      bindDn: "bindDn"
      protocol: "protocol"
      groupSearchBase: "groupSearchBase"
      userSearchBase: "userSearchBase"
      domain: "domain"
      name: "name"
      userObjectClass: "userObjectClass"
      groupObjectClass: "groupObjectClass"
  ClusterRepairRequest:
    type: "object"
    required:
    - "hostGroups"
    properties:
      hostGroups:
        type: "array"
        description: "List of hostgroups where the failed nodes will be repaired"
        items:
          type: "string"
      removeOnly:
        type: "boolean"
        description: "If true, the failed nodes will only be removed, otherwise the\
          \ failed nodes will be removed and new nodes will be started."
        default: false
    example:
      hostGroups:
      - "hostGroups"
      - "hostGroups"
      removeOnly: false
  StackResponse:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "name of the stack"
        minLength: 5
        maxLength: 40
        pattern: "(^[a-z][-a-z0-9]*[a-z0-9]$)"
      availabilityZone:
        type: "string"
        description: "availability zone of the stack"
      region:
        type: "string"
        description: "region of the stack"
      platformVariant:
        type: "string"
        description: "cloud provider api variant"
      credentialId:
        type: "integer"
        format: "int64"
        description: "credential resource id for the stack"
      onFailureAction:
        type: "string"
        description: "action on failure"
        enum:
        - "ROLLBACK"
        - "DO_NOTHING"
      networkId:
        type: "integer"
        format: "int64"
        description: "network resource id for the stack"
      ambariVersion:
        type: "string"
        description: "specific version of ambari"
      hdpVersion:
        type: "string"
        description: "specific version of HDP"
      parameters:
        type: "object"
        description: "additional cloud specific parameters for stack"
        additionalProperties:
          type: "string"
      customDomain:
        type: "string"
        description: "custom domain name for the nodes in the stack"
      customHostname:
        type: "string"
        description: "custom hostname for nodes in the stack"
      clusterNameAsSubdomain:
        type: "boolean"
        description: "using the cluster name to create subdomain"
        default: false
      hostgroupNameAsHostname:
        type: "boolean"
        description: "using the hostgroup names to create hostnames"
        default: false
      applicationTags:
        type: "object"
        description: "stack related application tags"
        additionalProperties:
          type: "string"
      userDefinedTags:
        type: "object"
        description: "stack related userdefined tags"
        additionalProperties:
          type: "string"
      defaultTags:
        type: "object"
        description: "stack related default tags"
        additionalProperties:
          type: "string"
      id:
        type: "integer"
        format: "int64"
        description: "id of the stack"
      owner:
        type: "string"
        description: "id of the resource owner that is provided by OAuth provider"
      account:
        type: "string"
        description: "account id of the resource owner that is provided by OAuth provider"
      status:
        type: "string"
        description: "status of the stack"
        enum:
        - "REQUESTED"
        - "CREATE_IN_PROGRESS"
        - "AVAILABLE"
        - "UPDATE_IN_PROGRESS"
        - "UPDATE_REQUESTED"
        - "UPDATE_FAILED"
        - "CREATE_FAILED"
        - "ENABLE_SECURITY_FAILED"
        - "PRE_DELETE_IN_PROGRESS"
        - "DELETE_IN_PROGRESS"
        - "DELETE_FAILED"
        - "DELETE_COMPLETED"
        - "STOPPED"
        - "STOP_REQUESTED"
        - "START_REQUESTED"
        - "STOP_IN_PROGRESS"
        - "START_IN_PROGRESS"
        - "START_FAILED"
        - "STOP_FAILED"
        - "WAIT_FOR_SYNC"
      cluster:
        $ref: "#/definitions/ClusterResponse"
      statusReason:
        type: "string"
        description: "status message of the stack"
      credential:
        description: "stack related credential"
        $ref: "#/definitions/CredentialResponse"
      network:
        description: "stack related network"
        $ref: "#/definitions/NetworkResponse"
      instanceGroups:
        type: "array"
        items:
          $ref: "#/definitions/InstanceGroupResponse"
      failurePolicy:
        description: "failure policy in case of failures"
        $ref: "#/definitions/FailurePolicyResponse"
      orchestrator:
        description: "the details of the container orchestrator api to use"
        $ref: "#/definitions/OrchestratorResponse"
      created:
        type: "integer"
        format: "int64"
        description: "creation time of the stack in long"
      gatewayPort:
        type: "integer"
        format: "int32"
        description: "port of the gateway secured proxy"
      image:
        description: "image of the stack"
        $ref: "#/definitions/ImageJson"
      cloudbreakDetails:
        description: "details of the Cloudbreak that provisioned the stack"
        $ref: "#/definitions/CloudbreakDetailsJson"
      flexSubscription:
        description: "the related flex subscription"
        $ref: "#/definitions/FlexSubscriptionResponse"
      stackAuthentication:
        description: "stack related authentication"
        $ref: "#/definitions/StackAuthenticationResponse"
      nodeCount:
        type: "integer"
        format: "int32"
        description: "node count of the stack"
      hardwareInfos:
        type: "array"
        description: "hardware information where pairing hostmetadata with instancemetadata"
        uniqueItems: true
        items:
          $ref: "#/definitions/HardwareInfoResponse"
      cloudbreakEvents:
        type: "array"
        description: "related events for a cloudbreak stack"
        items:
          $ref: "#/definitions/CloudbreakEvent"
      cloudbreakUsages:
        type: "array"
        description: "usage information for a specific stack"
        items:
          $ref: "#/definitions/CloudbreakUsage"
      cloudPlatform:
        type: "string"
        description: "type of cloud provider"
        readOnly: true
      public:
        type: "boolean"
        description: "resource is visible in account"
        default: false
    example:
      cluster:
        cluster: "cluster"
        ambariRepoDetailsJson:
          baseUrl: "baseUrl"
          version: "version"
          gpgKeyUrl: "gpgKeyUrl"
        hostGroups:
        - recipes:
          - recipeType: "PRE_AMBARI_START"
            public: false
            name: "name"
            description: "description"
            id: 0
            uri: "uri"
            content: "content"
          - recipeType: "PRE_AMBARI_START"
            public: false
            name: "name"
            description: "description"
            id: 0
            uri: "uri"
            content: "content"
          metadata:
          - groupName: "groupName"
            name: "name"
            id: 4
            state: "state"
          - groupName: "groupName"
            name: "name"
            id: 4
            state: "state"
          recipeIds:
          - 3
          - 3
          recoveryMode: "MANUAL"
          name: "name"
          constraint:
            hostCount: 9
            constraintTemplateName: "constraintTemplateName"
            instanceGroupName: "instanceGroupName"
          id: 2
        - recipes:
          - recipeType: "PRE_AMBARI_START"
            public: false
            name: "name"
            description: "description"
            id: 0
            uri: "uri"
            content: "content"
          - recipeType: "PRE_AMBARI_START"
            public: false
            name: "name"
            description: "description"
            id: 0
            uri: "uri"
            content: "content"
          metadata:
          - groupName: "groupName"
            name: "name"
            id: 4
            state: "state"
          - groupName: "groupName"
            name: "name"
            id: 4
            state: "state"
          recipeIds:
          - 3
          - 3
          recoveryMode: "MANUAL"
          name: "name"
          constraint:
            hostCount: 9
            constraintTemplateName: "constraintTemplateName"
            instanceGroupName: "instanceGroupName"
          id: 2
        ambariServerIp: "ambariServerIp"
        ambariServerUrl: "ambariServerUrl"
        proxyName: "proxyName"
        description: "description"
        secure: false
        configStrategy: "NEVER_APPLY"
        hoursUp: 5
        serviceEndPoints:
          key: "serviceEndPoints"
        statusReason: "statusReason"
        ambariStackDetails:
          enableGplRepo: false
          stack:
            key: "stack"
          util:
            key: "util"
          mpacks:
          - name: "name"
          - name: "name"
          hdpVersion: "hdpVersion"
          verify: false
        ldapConfigId: 1
        blueprintInputs:
        - name: "name"
          propertyValue: "propertyValue"
        - name: "name"
          propertyValue: "propertyValue"
        ambariDatabaseDetails:
          password: "password"
          port: 1
          vendor: "POSTGRES"
          name: "name"
          host: "host"
          userName: "userName"
        id: 5
        blueprintCustomProperties: "blueprintCustomProperties"
        executorType: "CONTAINER"
        extendedBlueprintText: "extendedBlueprintText"
        customQueue: "customQueue"
        userName: "userName"
        blueprintId: 7
        ldapConfig:
          adminGroup: "adminGroup"
          groupNameAttribute: "groupNameAttribute"
          groupMemberAttribute: "groupMemberAttribute"
          description: "description"
          userNameAttribute: "userNameAttribute"
          serverPort: 5249
          serverHost: "serverHost"
          directoryType: "LDAP"
          bindDn: "bindDn"
          protocol: "protocol"
          groupSearchBase: "groupSearchBase"
          userSearchBase: "userSearchBase"
          public: false
          domain: "domain"
          name: "name"
          id: 6
          userObjectClass: "userObjectClass"
          groupObjectClass: "groupObjectClass"
        uptime: 6
        blueprint:
          public: false
          ambariBlueprint: "ambariBlueprint"
          inputs:
          - referenceConfiguration: "referenceConfiguration"
            name: "name"
            description: "description"
          - referenceConfiguration: "referenceConfiguration"
            name: "name"
            description: "description"
          hostGroupCount: 6
          name: "name"
          description: "description"
          id: 0
          tags:
            key: "{}"
          status: "DEFAULT"
        rdsConfigs:
        - connectionDriver: "connectionDriver"
          databaseEngineDisplayName: "databaseEngineDisplayName"
          clusterNames:
          - "clusterNames"
          - "clusterNames"
          connectorJarUrl: "connectorJarUrl"
          publicInAccount: false
          stackVersion: "stackVersion"
          name: "name"
          connectionURL: "connectionURL"
          id: 0
          type: "type"
          creationDate: 6
          databaseEngine: "databaseEngine"
        - connectionDriver: "connectionDriver"
          databaseEngineDisplayName: "databaseEngineDisplayName"
          clusterNames:
          - "clusterNames"
          - "clusterNames"
          connectorJarUrl: "connectorJarUrl"
          publicInAccount: false
          stackVersion: "stackVersion"
          name: "name"
          connectionURL: "connectionURL"
          id: 0
          type: "type"
          creationDate: 6
          databaseEngine: "databaseEngine"
        customContainers:
          definitions:
            key: "definitions"
        creationFinished: 1
        kerberosResponse:
          krb5Conf: "krb5Conf"
          ldapUrl: "ldapUrl"
          admin: "admin"
          realm: "realm"
          containerDn: "containerDn"
          descriptor: "descriptor"
          adminUrl: "adminUrl"
          type: "CB_MANAGED"
          url: "url"
          tcpAllowed: false
        name: "name"
        attributes:
          key: "{}"
        rdsConfigIds:
        - 7
        - 7
        gateway:
          path: "path"
          topologyName: "topologyName"
          gatewayType: "CENTRAL"
          ssoProvider: "ssoProvider"
          enableGateway: false
          ssoType: "SSO_PROVIDER"
          tokenCert: "tokenCert"
          exposedServices:
          - "exposedServices"
          - "exposedServices"
        status: "REQUESTED"
        minutesUp: 2
      hdpVersion: "hdpVersion"
      cloudbreakEvents:
      - eventMessage: "eventMessage"
        owner: "owner"
        blueprintName: "blueprintName"
        stackId: 5
        stackName: "stackName"
        stackStatus: "REQUESTED"
        eventType: "eventType"
        clusterId: 1
        instanceGroup: "instanceGroup"
        availabilityZone: "availabilityZone"
        blueprintId: 6
        cloud: "cloud"
        clusterName: "clusterName"
        nodeCount: 5
        region: "region"
        account: "account"
        clusterStatus: "REQUESTED"
        eventTimestamp: 0
      - eventMessage: "eventMessage"
        owner: "owner"
        blueprintName: "blueprintName"
        stackId: 5
        stackName: "stackName"
        stackStatus: "REQUESTED"
        eventType: "eventType"
        clusterId: 1
        instanceGroup: "instanceGroup"
        availabilityZone: "availabilityZone"
        blueprintId: 6
        cloud: "cloud"
        clusterName: "clusterName"
        nodeCount: 5
        region: "region"
        account: "account"
        clusterStatus: "REQUESTED"
        eventTimestamp: 0
      platformVariant: "platformVariant"
      customHostname: "customHostname"
      userDefinedTags:
        key: "userDefinedTags"
      flexSubscription:
        owner: "owner"
        publicInAccount: false
        smartSenseSubscriptionId: 0
        usedForController: false
        name: "name"
        smartSenseSubscription:
          owner: "owner"
          publicInAccount: false
          id: 1
          autoGenerated: false
          subscriptionId: "subscriptionId"
          account: "account"
        id: 6
        subscriptionId: "subscriptionId"
        account: "account"
        usedAsDefault: false
      availabilityZone: "availabilityZone"
      defaultTags:
        key: "defaultTags"
      network:
        subnetCIDR: "subnetCIDR"
        cloudPlatform: "cloudPlatform"
        publicInAccount: false
        topologyId: 0
        name: "name"
        description: "description"
        id: 6
        parameters:
          key: "{}"
      hostgroupNameAsHostname: false
      onFailureAction: "ROLLBACK"
      statusReason: "statusReason"
      credential:
        cloudPlatform: "cloudPlatform"
        public: false
        name: "name"
        topologyId: 0
        description: "description"
        id: 6
        parameters:
          key: "{}"
      public: false
      networkId: 6
      nodeCount: 6
      clusterNameAsSubdomain: false
      id: 1
      failurePolicy:
        adjustmentType: "EXACT"
        threshold: 6
        id: 1
      owner: "owner"
      applicationTags:
        key: "applicationTags"
      image:
        imageName: "imageName"
        imageId: "imageId"
        imageCatalogUrl: "imageCatalogUrl"
        imageCatalogName: "imageCatalogName"
      cloudbreakDetails:
        version: "version"
      cloudPlatform: "cloudPlatform"
      created: 2
      customDomain: "customDomain"
      gatewayPort: 6
      stackAuthentication:
        loginUserName: "loginUserName"
        publicKey: "publicKey"
        publicKeyId: "publicKeyId"
      orchestrator:
        apiEndpoint: "apiEndpoint"
        type: "type"
        parameters:
          key: "{}"
      instanceGroups:
      - securityGroupId: 1
        template:
          volumeType: "volumeType"
          cloudPlatform: "cloudPlatform"
          public: false
          instanceType: "instanceType"
          customInstanceType:
            memory: 5
            cpus: 9
          topologyId: 9
          name: "name"
          description: "description"
          volumeCount: 8
          id: 6
          parameters:
            key: "{}"
          volumeSize: 9
        metadata:
        - sshPort: 3
          instanceId: "instanceId"
          ambariServer: false
          privateIp: "privateIp"
          instanceType: "GATEWAY"
          discoveryFQDN: "discoveryFQDN"
          publicIp: "publicIp"
          instanceGroup: "instanceGroup"
          instanceStatus: "REQUESTED"
        - sshPort: 3
          instanceId: "instanceId"
          ambariServer: false
          privateIp: "privateIp"
          instanceType: "GATEWAY"
          discoveryFQDN: "discoveryFQDN"
          publicIp: "publicIp"
          instanceGroup: "instanceGroup"
          instanceStatus: "REQUESTED"
        nodeCount: 49652
        securityGroup:
          securityGroupId: "securityGroupId"
          owner: "owner"
          cloudPlatform: "cloudPlatform"
          publicInAccount: false
          securityRules:
          - subnet: "subnet"
            protocol: "protocol"
            id: 6
            ports: "ports"
            modifiable: false
          - subnet: "subnet"
            protocol: "protocol"
            id: 6
            ports: "ports"
            modifiable: false
          name: "name"
          description: "description"
          id: 0
          account: "account"
        id: 6
        templateId: 7
        type: "GATEWAY"
        parameters:
          key: "{}"
        group: "group"
      - securityGroupId: 1
        template:
          volumeType: "volumeType"
          cloudPlatform: "cloudPlatform"
          public: false
          instanceType: "instanceType"
          customInstanceType:
            memory: 5
            cpus: 9
          topologyId: 9
          name: "name"
          description: "description"
          volumeCount: 8
          id: 6
          parameters:
            key: "{}"
          volumeSize: 9
        metadata:
        - sshPort: 3
          instanceId: "instanceId"
          ambariServer: false
          privateIp: "privateIp"
          instanceType: "GATEWAY"
          discoveryFQDN: "discoveryFQDN"
          publicIp: "publicIp"
          instanceGroup: "instanceGroup"
          instanceStatus: "REQUESTED"
        - sshPort: 3
          instanceId: "instanceId"
          ambariServer: false
          privateIp: "privateIp"
          instanceType: "GATEWAY"
          discoveryFQDN: "discoveryFQDN"
          publicIp: "publicIp"
          instanceGroup: "instanceGroup"
          instanceStatus: "REQUESTED"
        nodeCount: 49652
        securityGroup:
          securityGroupId: "securityGroupId"
          owner: "owner"
          cloudPlatform: "cloudPlatform"
          publicInAccount: false
          securityRules:
          - subnet: "subnet"
            protocol: "protocol"
            id: 6
            ports: "ports"
            modifiable: false
          - subnet: "subnet"
            protocol: "protocol"
            id: 6
            ports: "ports"
            modifiable: false
          name: "name"
          description: "description"
          id: 0
          account: "account"
        id: 6
        templateId: 7
        type: "GATEWAY"
        parameters:
          key: "{}"
        group: "group"
      hardwareInfos:
      - instanceMetaData:
          sshPort: 3
          instanceId: "instanceId"
          ambariServer: false
          privateIp: "privateIp"
          instanceType: "GATEWAY"
          discoveryFQDN: "discoveryFQDN"
          publicIp: "publicIp"
          instanceGroup: "instanceGroup"
          instanceStatus: "REQUESTED"
        hostMetadata:
          groupName: "groupName"
          name: "name"
          id: 4
          state: "state"
      - instanceMetaData:
          sshPort: 3
          instanceId: "instanceId"
          ambariServer: false
          privateIp: "privateIp"
          instanceType: "GATEWAY"
          discoveryFQDN: "discoveryFQDN"
          publicIp: "publicIp"
          instanceGroup: "instanceGroup"
          instanceStatus: "REQUESTED"
        hostMetadata:
          groupName: "groupName"
          name: "name"
          id: 4
          state: "state"
      name: "name"
      credentialId: 0
      cloudbreakUsages:
      - owner: "owner"
        costs: 3.35319334701124294184637619764544069766998291015625
        instanceNum: 7
        blueprintName: "blueprintName"
        stackId: 6
        instanceType: "instanceType"
        instanceHours: 5
        stackName: "stackName"
        peak: 0
        instanceGroup: "instanceGroup"
        availabilityZone: "availabilityZone"
        blueprintId: 3
        duration: "duration"
        provider: "provider"
        flexId: "flexId"
        region: "region"
        day: "day"
        stackUuid: "stackUuid"
        account: "account"
        username: "username"
      - owner: "owner"
        costs: 3.35319334701124294184637619764544069766998291015625
        instanceNum: 7
        blueprintName: "blueprintName"
        stackId: 6
        instanceType: "instanceType"
        instanceHours: 5
        stackName: "stackName"
        peak: 0
        instanceGroup: "instanceGroup"
        availabilityZone: "availabilityZone"
        blueprintId: 3
        duration: "duration"
        provider: "provider"
        flexId: "flexId"
        region: "region"
        day: "day"
        stackUuid: "stackUuid"
        account: "account"
        username: "username"
      region: "region"
      ambariVersion: "ambariVersion"
      parameters:
        key: "parameters"
      account: "account"
      status: "REQUESTED"
  Info:
    type: "object"
