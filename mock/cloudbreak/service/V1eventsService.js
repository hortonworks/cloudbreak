'use strict';


/**
 * retrieve events by timestamp (long)
 * Events are used to track stack creation initiated by cloudbreak users. Events are generated by the backend when resources requested by the user become available or unavailable
 *
 * since Long  (optional)
 * returns List
 **/
exports.getEvents = function(since) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = [ {
  "eventMessage" : "eventMessage",
  "owner" : "owner",
  "blueprintName" : "blueprintName",
  "stackId" : 5,
  "stackName" : "stackName",
  "stackStatus" : "REQUESTED",
  "eventType" : "eventType",
  "clusterId" : 1,
  "instanceGroup" : "instanceGroup",
  "availabilityZone" : "availabilityZone",
  "blueprintId" : 6,
  "cloud" : "cloud",
  "clusterName" : "clusterName",
  "nodeCount" : 5,
  "region" : "region",
  "account" : "account",
  "clusterStatus" : "REQUESTED",
  "eventTimestamp" : 0
}, {
  "eventMessage" : "eventMessage",
  "owner" : "owner",
  "blueprintName" : "blueprintName",
  "stackId" : 5,
  "stackName" : "stackName",
  "stackStatus" : "REQUESTED",
  "eventType" : "eventType",
  "clusterId" : 1,
  "instanceGroup" : "instanceGroup",
  "availabilityZone" : "availabilityZone",
  "blueprintId" : 6,
  "cloud" : "cloud",
  "clusterName" : "clusterName",
  "nodeCount" : 5,
  "region" : "region",
  "account" : "account",
  "clusterStatus" : "REQUESTED",
  "eventTimestamp" : 0
} ];
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * retrieve events by stackid (long)
 * Events are used to track stack creation initiated by cloudbreak users. Events are generated by the backend when resources requested by the user become available or unavailable
 *
 * stackId Long 
 * returns List
 **/
exports.getEventsBySTackId = function(stackId) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = [ {
  "eventMessage" : "eventMessage",
  "owner" : "owner",
  "blueprintName" : "blueprintName",
  "stackId" : 5,
  "stackName" : "stackName",
  "stackStatus" : "REQUESTED",
  "eventType" : "eventType",
  "clusterId" : 1,
  "instanceGroup" : "instanceGroup",
  "availabilityZone" : "availabilityZone",
  "blueprintId" : 6,
  "cloud" : "cloud",
  "clusterName" : "clusterName",
  "nodeCount" : 5,
  "region" : "region",
  "account" : "account",
  "clusterStatus" : "REQUESTED",
  "eventTimestamp" : 0
}, {
  "eventMessage" : "eventMessage",
  "owner" : "owner",
  "blueprintName" : "blueprintName",
  "stackId" : 5,
  "stackName" : "stackName",
  "stackStatus" : "REQUESTED",
  "eventType" : "eventType",
  "clusterId" : 1,
  "instanceGroup" : "instanceGroup",
  "availabilityZone" : "availabilityZone",
  "blueprintId" : 6,
  "cloud" : "cloud",
  "clusterName" : "clusterName",
  "nodeCount" : 5,
  "region" : "region",
  "account" : "account",
  "clusterStatus" : "REQUESTED",
  "eventTimestamp" : 0
} ];
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 *
 * stackId Long 
 * returns List
 **/
exports.getStructuredEvents = function(stackId) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = [ {
  "type" : "type",
  "operation" : {
    "resourceId" : 0,
    "eventType" : "eventType",
    "cloudbreakVersion" : "cloudbreakVersion",
    "userName" : "userName",
    "userId" : "userId",
    "account" : "account",
    "resourceType" : "resourceType",
    "timestamp" : 6,
    "cloudbreakId" : "cloudbreakId"
  }
}, {
  "type" : "type",
  "operation" : {
    "resourceId" : 0,
    "eventType" : "eventType",
    "cloudbreakVersion" : "cloudbreakVersion",
    "userName" : "userName",
    "userId" : "userId",
    "account" : "account",
    "resourceType" : "resourceType",
    "timestamp" : 6,
    "cloudbreakId" : "cloudbreakId"
  }
} ];
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 *
 * stackId Long 
 * no response value expected for this operation
 **/
exports.getStructuredEventsZip = function(stackId) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}

