---
swagger: "2.0"
info:
  description: "The auto-scaling capabilities is based on Ambari Metrics - and Ambari\
    \ Alerts. Based on the Blueprint used and the running services, Cloudbreak can\
    \ access all the available metrics from the subsystem and define alerts based\
    \ on this information.\n\nBeside the default Ambari Metrics, Cloudbreak includes\
    \ two custom metrics: Pending YARN containers and Pending applications. These\
    \ two custom metrics works with the YARN subsystem in order to bring application\
    \ level QoS to the cluster."
  version: "1.9.0"
  title: "Auto-scaling API"
basePath: "/as"
tags:
- name: "health"
- name: "v1alerts"
- name: "v2clusters"
- name: "v1history"
- name: "v1configurations"
- name: "v1policies"
- name: "v1clusters"
schemes:
- "http"
- "https"
paths:
  /health:
    get:
      tags:
      - "health"
      summary: "retrieve Periscope server status for user"
      description: "Periscope server status."
      operationId: "getPeriscopeHealth"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Health"
      x-swagger-router-controller: "Health"
  /api/v1/clusters:
    get:
      tags:
      - "v1clusters"
      summary: "retrieve all cluster"
      description: "Ambari cluster."
      operationId: "getClusters"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V1clusters"
    post:
      tags:
      - "v1clusters"
      summary: "create cluster"
      description: "Ambari cluster."
      operationId: "addCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AutoscaleClusterRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V1clusters"
  /api/v1/clusters/{clusterId}:
    get:
      tags:
      - "v1clusters"
      summary: "retrieve cluster"
      description: "Ambari cluster."
      operationId: "getCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V1clusters"
    put:
      tags:
      - "v1clusters"
      summary: "modify cluster"
      description: "Ambari cluster."
      operationId: "modifyCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AutoscaleClusterRequest"
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V1clusters"
    delete:
      tags:
      - "v1clusters"
      summary: "delete cluster"
      description: "Ambari cluster."
      operationId: "deleteCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1clusters"
  /api/v1/clusters/{clusterId}/alerts/metric:
    get:
      tags:
      - "v1alerts"
      summary: "retrieve alert which metric based"
      description: "Auto-scaling supports two Alert types: metric and time based.\
        \ Metric based alerts are using the default (or custom) Ambari metrics. These\
        \ metrics have a default Threshold value configured in Ambari - nevertheless\
        \ these thresholds can be configured, changed or altered in Ambari. In order\
        \ to change the default threshold for a metric please go to Ambari UI and\
        \ select the Alerts tab and the metric. The values can be changed in the Threshold\
        \ section. "
      operationId: "getMetricAlerts"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MetricAlertResponse"
      x-swagger-router-controller: "V1alerts"
    post:
      tags:
      - "v1alerts"
      summary: "create alert which metric based"
      description: "Auto-scaling supports two Alert types: metric and time based.\
        \ Metric based alerts are using the default (or custom) Ambari metrics. These\
        \ metrics have a default Threshold value configured in Ambari - nevertheless\
        \ these thresholds can be configured, changed or altered in Ambari. In order\
        \ to change the default threshold for a metric please go to Ambari UI and\
        \ select the Alerts tab and the metric. The values can be changed in the Threshold\
        \ section. "
      operationId: "createMetricAlerts"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/MetricAlertRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/MetricAlertResponse"
      x-swagger-router-controller: "V1alerts"
  /api/v1/clusters/{clusterId}/alerts/metric/definitions:
    get:
      tags:
      - "v1alerts"
      summary: "retrieve alert definitions"
      description: "Auto-scaling supports two Alert types: metric and time based.\
        \ Metric based alerts are using the default (or custom) Ambari metrics. These\
        \ metrics have a default Threshold value configured in Ambari - nevertheless\
        \ these thresholds can be configured, changed or altered in Ambari. In order\
        \ to change the default threshold for a metric please go to Ambari UI and\
        \ select the Alerts tab and the metric. The values can be changed in the Threshold\
        \ section. "
      operationId: "getAlertDefinitions"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
              additionalProperties:
                type: "object"
                properties: {}
      x-swagger-router-controller: "V1alerts"
  /api/v1/clusters/{clusterId}/alerts/metric/{alertId}:
    put:
      tags:
      - "v1alerts"
      summary: "modify alert which metric based"
      description: "Auto-scaling supports two Alert types: metric and time based.\
        \ Metric based alerts are using the default (or custom) Ambari metrics. These\
        \ metrics have a default Threshold value configured in Ambari - nevertheless\
        \ these thresholds can be configured, changed or altered in Ambari. In order\
        \ to change the default threshold for a metric please go to Ambari UI and\
        \ select the Alerts tab and the metric. The values can be changed in the Threshold\
        \ section. "
      operationId: "updateMetricAlerts"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "alertId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/MetricAlertRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/MetricAlertResponse"
      x-swagger-router-controller: "V1alerts"
    delete:
      tags:
      - "v1alerts"
      summary: "delete alert which metric based"
      description: "Auto-scaling supports two Alert types: metric and time based.\
        \ Metric based alerts are using the default (or custom) Ambari metrics. These\
        \ metrics have a default Threshold value configured in Ambari - nevertheless\
        \ these thresholds can be configured, changed or altered in Ambari. In order\
        \ to change the default threshold for a metric please go to Ambari UI and\
        \ select the Alerts tab and the metric. The values can be changed in the Threshold\
        \ section. "
      operationId: "deleteMetricAlarm"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "alertId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1alerts"
  /api/v1/clusters/{clusterId}/alerts/prometheus:
    get:
      tags:
      - "v1alerts"
      summary: "retrieve alert which prometheus based"
      description: "Prometheus based alerts are using Prometheus under the hood. "
      operationId: "getPrometheusAlerts"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PrometheusAlertResponse"
      x-swagger-router-controller: "V1alerts"
    post:
      tags:
      - "v1alerts"
      summary: "create alert which prometheus based"
      description: "Prometheus based alerts are using Prometheus under the hood. "
      operationId: "createPrometheusAlert"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PrometheusAlertRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PrometheusAlertResponse"
      x-swagger-router-controller: "V1alerts"
  /api/v1/clusters/{clusterId}/alerts/prometheus/definitions:
    get:
      tags:
      - "v1alerts"
      summary: "retrieve alert definitions"
      description: "retrieve Prometheus alert rule definitions"
      operationId: "getPrometheusDefinitions"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AlertRuleDefinitionEntry"
      x-swagger-router-controller: "V1alerts"
  /api/v1/clusters/{clusterId}/alerts/prometheus/{alertId}:
    put:
      tags:
      - "v1alerts"
      summary: "modify alert which prometheus based"
      description: "Prometheus based alerts are using Prometheus under the hood. "
      operationId: "updatePrometheusAlert"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "alertId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PrometheusAlertRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PrometheusAlertResponse"
      x-swagger-router-controller: "V1alerts"
    delete:
      tags:
      - "v1alerts"
      summary: "delete alert which prometheus based"
      description: "Prometheus based alerts are using Prometheus under the hood. "
      operationId: "deletePrometheusAlarm"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "alertId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1alerts"
  /api/v1/clusters/{clusterId}/alerts/time:
    get:
      tags:
      - "v1alerts"
      summary: "retrieve alert which time based"
      description: "Auto-scaling supports two Alert types: metric and time based.\
        \ Time based alerts are based on cron expressions and allow alerts to be triggered\
        \ based on time."
      operationId: "getTimeAlerts"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TimeAlertResponse"
      x-swagger-router-controller: "V1alerts"
    post:
      tags:
      - "v1alerts"
      summary: "create alert which time based"
      description: "Auto-scaling supports two Alert types: metric and time based.\
        \ Time based alerts are based on cron expressions and allow alerts to be triggered\
        \ based on time."
      operationId: "createTimeAlert"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TimeAlertRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TimeAlertResponse"
      x-swagger-router-controller: "V1alerts"
  /api/v1/clusters/{clusterId}/alerts/time/validate:
    post:
      tags:
      - "v1alerts"
      summary: "cron expression validation"
      description: "Auto-scaling supports two Alert types: metric and time based.\
        \ Time based alerts are based on cron expressions and allow alerts to be triggered\
        \ based on time."
      operationId: "validateCronExpression"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TimeAlertValidationRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
      x-swagger-router-controller: "V1alerts"
  /api/v1/clusters/{clusterId}/alerts/time/{alertId}:
    put:
      tags:
      - "v1alerts"
      summary: "modify alert which time based"
      description: "Auto-scaling supports two Alert types: metric and time based.\
        \ Time based alerts are based on cron expressions and allow alerts to be triggered\
        \ based on time."
      operationId: "updateTimeAlert"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "alertId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TimeAlertRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TimeAlertResponse"
      x-swagger-router-controller: "V1alerts"
    delete:
      tags:
      - "v1alerts"
      summary: "delete alert which time based"
      description: "Auto-scaling supports two Alert types: metric and time based.\
        \ Time based alerts are based on cron expressions and allow alerts to be triggered\
        \ based on time."
      operationId: "deleteTimeAlert"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "alertId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1alerts"
  /api/v1/clusters/{clusterId}/autoscale:
    post:
      tags:
      - "v1clusters"
      summary: "set cluster's autoscale feature state"
      description: "Ambari cluster."
      operationId: "setAutoscaleState"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AutoscaleClusterState"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V1clusters"
  /api/v1/clusters/{clusterId}/configurations/scaling:
    get:
      tags:
      - "v1configurations"
      summary: "retrieve configuration"
      description: "An SLA scaling policy can contain multiple alerts. When an alert\
        \ is triggered a scaling adjustment is applied, however to keep the cluster\
        \ size within boundaries a cluster size min. and cluster size max. is attached\
        \ to the cluster - thus a scaling policy can never over or undersize a cluster.\
        \ Also in order to avoid stressing the cluster we have introduced a cooldown\
        \ time period (minutes) - though an alert is raised and there is an associated\
        \ scaling policy, the system will not apply the policy within the configured\
        \ timeframe. In an SLA scaling policy the triggered rules are applied in order."
      operationId: "getScalingConfiguration"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScalingConfiguration"
      x-swagger-router-controller: "V1configurations"
    post:
      tags:
      - "v1configurations"
      summary: "create configuration"
      description: "An SLA scaling policy can contain multiple alerts. When an alert\
        \ is triggered a scaling adjustment is applied, however to keep the cluster\
        \ size within boundaries a cluster size min. and cluster size max. is attached\
        \ to the cluster - thus a scaling policy can never over or undersize a cluster.\
        \ Also in order to avoid stressing the cluster we have introduced a cooldown\
        \ time period (minutes) - though an alert is raised and there is an associated\
        \ scaling policy, the system will not apply the policy within the configured\
        \ timeframe. In an SLA scaling policy the triggered rules are applied in order."
      operationId: "setScalingConfiguration"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ScalingConfiguration"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScalingConfiguration"
      x-swagger-router-controller: "V1configurations"
  /api/v1/clusters/{clusterId}/history:
    get:
      tags:
      - "v1history"
      summary: "retrieve full history"
      description: "Get Auto-scaling history on a specific cluster"
      operationId: "getHistory"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/HistoryResponse"
      x-swagger-router-controller: "V1history"
  /api/v1/clusters/{clusterId}/history/{historyId}:
    get:
      tags:
      - "v1history"
      summary: "retrieve a specific history"
      description: "Get Auto-scaling history on a specific cluster"
      operationId: "getHistoryById"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "historyId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/HistoryResponse"
      x-swagger-router-controller: "V1history"
  /api/v1/clusters/{clusterId}/policies:
    get:
      tags:
      - "v1policies"
      summary: "retrieve policy"
      description: "Scaling is the ability to increase or decrease the capacity of\
        \ the Hadoop cluster or application based on an alert. When scaling policies\
        \ are used, the capacity is automatically increased or decreased according\
        \ to the conditions defined. Cloudbreak will do the heavy lifting and based\
        \ on the alerts and the scaling policy linked to them it executes the associated\
        \ policy. We scaling granularity is at the hostgroup level - thus you have\
        \ the option to scale services or components only, not the whole cluster."
      operationId: "getScalingPolicies"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScalingPolicyResponse"
      x-swagger-router-controller: "V1policies"
    post:
      tags:
      - "v1policies"
      summary: "create policy"
      description: "Scaling is the ability to increase or decrease the capacity of\
        \ the Hadoop cluster or application based on an alert. When scaling policies\
        \ are used, the capacity is automatically increased or decreased according\
        \ to the conditions defined. Cloudbreak will do the heavy lifting and based\
        \ on the alerts and the scaling policy linked to them it executes the associated\
        \ policy. We scaling granularity is at the hostgroup level - thus you have\
        \ the option to scale services or components only, not the whole cluster."
      operationId: "addScalingPolicy"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ScalingPolicyRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScalingPolicyResponse"
      x-swagger-router-controller: "V1policies"
  /api/v1/clusters/{clusterId}/policies/{policyId}:
    put:
      tags:
      - "v1policies"
      summary: "modify policy"
      description: "Scaling is the ability to increase or decrease the capacity of\
        \ the Hadoop cluster or application based on an alert. When scaling policies\
        \ are used, the capacity is automatically increased or decreased according\
        \ to the conditions defined. Cloudbreak will do the heavy lifting and based\
        \ on the alerts and the scaling policy linked to them it executes the associated\
        \ policy. We scaling granularity is at the hostgroup level - thus you have\
        \ the option to scale services or components only, not the whole cluster."
      operationId: "updateScalingPolicy"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "policyId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ScalingPolicyRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScalingPolicyResponse"
      x-swagger-router-controller: "V1policies"
    delete:
      tags:
      - "v1policies"
      summary: "delete policy"
      description: "Scaling is the ability to increase or decrease the capacity of\
        \ the Hadoop cluster or application based on an alert. When scaling policies\
        \ are used, the capacity is automatically increased or decreased according\
        \ to the conditions defined. Cloudbreak will do the heavy lifting and based\
        \ on the alerts and the scaling policy linked to them it executes the associated\
        \ policy. We scaling granularity is at the hostgroup level - thus you have\
        \ the option to scale services or components only, not the whole cluster."
      operationId: "deleteScalingPolicy"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "policyId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V1policies"
  /api/v1/clusters/{clusterId}/state:
    post:
      tags:
      - "v1clusters"
      summary: "set cluster state"
      description: "Ambari cluster."
      operationId: "setState"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ClusterState"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V1clusters"
  /api/v2/clusters/{cbClusterId}:
    get:
      tags:
      - "v2clusters"
      summary: "retrieve cluster"
      description: "Ambari cluster."
      operationId: "getByCloudbreakCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cbClusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V2clusters"
    put:
      tags:
      - "v2clusters"
      summary: "modify cluster"
      description: "Ambari cluster."
      operationId: "modifyByCloudbreakCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AutoscaleClusterRequest"
      - name: "cbClusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V2clusters"
    delete:
      tags:
      - "v2clusters"
      summary: "delete cluster"
      description: "Ambari cluster."
      operationId: "deleteByCloudbreakCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cbClusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "V2clusters"
  /api/v2/clusters/{cbClusterId}/disable:
    post:
      tags:
      - "v2clusters"
      summary: "set cluster's autoscale feature state"
      description: "Ambari cluster."
      operationId: "disableAutoscaleStateByCloudbreakCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cbClusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V2clusters"
  /api/v2/clusters/{cbClusterId}/enable:
    post:
      tags:
      - "v2clusters"
      summary: "set cluster's autoscale feature state"
      description: "Ambari cluster."
      operationId: "enableAutoscaleStateByCloudbreakCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cbClusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V2clusters"
  /api/v2/clusters/{cbClusterId}/running:
    post:
      tags:
      - "v2clusters"
      summary: "set cluster state"
      description: "Ambari cluster."
      operationId: "runByCloudbreakCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cbClusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V2clusters"
  /api/v2/clusters/{cbClusterId}/suspended:
    post:
      tags:
      - "v2clusters"
      summary: "set cluster state"
      description: "Ambari cluster."
      operationId: "suspendByCloudbreakCluster"
      schemes:
      - "http"
      - "https"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cbClusterId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AutoscaleClusterResponse"
      x-swagger-router-controller: "V2clusters"
definitions:
  AutoscaleClusterResponse:
    type: "object"
    required:
    - "stackId"
    properties:
      host:
        type: "string"
        description: "Ambari server host address"
      port:
        type: "string"
        description: "Ambari server port"
      user:
        type: "string"
        description: "Ambari server username"
      stackId:
        type: "integer"
        format: "int64"
        description: "Id of the stack in Cloudbreak"
      id:
        type: "integer"
        format: "int64"
        description: "Id of the cluster"
      state:
        type: "string"
        description: "State of the cluster"
      autoscalingEnabled:
        type: "boolean"
        description: "Indicate that the Autoscaling feature set is Enabled or Disabled"
        default: false
      metricAlerts:
        type: "array"
        description: "Metric based alerts of the cluster"
        items:
          $ref: "#/definitions/MetricAlertResponse"
      timeAlerts:
        type: "array"
        description: "Time based alerts of the cluster"
        items:
          $ref: "#/definitions/TimeAlertResponse"
      prometheusAlerts:
        type: "array"
        description: "Prometheus based alerts of the cluster"
        items:
          $ref: "#/definitions/PrometheusAlertResponse"
      scalingConfiguration:
        description: "Scaling configuration for the cluster"
        $ref: "#/definitions/ScalingConfiguration"
  AutoscaleClusterRequest:
    type: "object"
    required:
    - "stackId"
    properties:
      host:
        type: "string"
        description: "Ambari server host address"
      port:
        type: "string"
        description: "Ambari server port"
      user:
        type: "string"
        description: "Ambari server username"
      stackId:
        type: "integer"
        format: "int64"
        description: "Id of the stack in Cloudbreak"
      pass:
        type: "string"
        description: "Ambari server password"
      metricAlerts:
        type: "array"
        description: "Metric based alerts of the cluster"
        items:
          $ref: "#/definitions/MetricAlertRequest"
      timeAlerts:
        type: "array"
        description: "Time based alerts of the cluster"
        items:
          $ref: "#/definitions/TimeAlertRequest"
      prometheusAlerts:
        type: "array"
        description: "Prometheus based alerts of the cluster"
        items:
          $ref: "#/definitions/PrometheusAlertRequest"
      scalingConfiguration:
        description: "Scaling configuration for the cluster"
        $ref: "#/definitions/ScalingConfiguration"
  ClusterState:
    type: "object"
    properties:
      state:
        type: "string"
        description: "State of the cluster"
        enum:
        - "RUNNING"
        - "SUSPENDED"
        - "PENDING"
  AutoscaleClusterState:
    type: "object"
    properties:
      enableAutoscaling:
        type: "boolean"
        description: "field to switch on or off autoscaling feature"
        default: false
  HistoryResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Id of the history object"
      clusterId:
        type: "integer"
        format: "int64"
        description: "If of the cluster"
      cbStackId:
        type: "integer"
        format: "int64"
        description: "Id of the cloudbreak stack"
      originalNodeCount:
        type: "integer"
        format: "int32"
        description: "The node count before of the scaling"
      adjustment:
        type: "integer"
        format: "int32"
        description: "Count of scaling"
      adjustmentType:
        type: "string"
        description: "Type of adjustment"
        enum:
        - "NODE_COUNT"
        - "PERCENTAGE"
        - "EXACT"
      scalingStatus:
        type: "string"
        description: "Status of scaling activity"
        enum:
        - "FAILED"
        - "SUCCESS"
        - "ENABLED"
        - "DISABLED"
      statusReason:
        type: "string"
        description: "Reason of the status"
      timestamp:
        type: "integer"
        format: "int64"
        description: "Time of the creation"
      hostGroup:
        type: "string"
        description: "The affected hostgroup name"
      alertType:
        type: "string"
        description: "Type of the alert event"
        enum:
        - "METRIC"
        - "TIME"
        - "PROMETHEUS"
      properties:
        type: "object"
        description: "Additional properties"
        additionalProperties:
          type: "string"
  TimeAlertResponse:
    type: "object"
    properties:
      alertName:
        type: "string"
        description: "Name of the alert"
        pattern: "(^[a-zA-Z][-a-zA-Z0-9]*$)"
      description:
        type: "string"
        description: "Description of the alert"
      id:
        type: "integer"
        format: "int64"
        description: "Id of the alert"
      timeZone:
        type: "string"
        description: "Timezone of the time alert"
      cron:
        type: "string"
        description: "Cron expression of the time alert"
      scalingPolicyId:
        type: "integer"
        format: "int64"
        description: "Id of the scaling ploicy"
      scalingPolicy:
        description: "Id of the scaling ploicy"
        $ref: "#/definitions/ScalingPolicyRequest"
  AlertRuleDefinitionEntry:
    type: "object"
    properties:
      name:
        type: "string"
      label:
        type: "string"
  MetricAlertRequest:
    type: "object"
    properties:
      alertName:
        type: "string"
        description: "Name of the alert"
        pattern: "(^[a-zA-Z][-a-zA-Z0-9]*$)"
      description:
        type: "string"
        description: "Description of the alert"
      alertDefinition:
        type: "string"
        description: "Definition of the alert"
      period:
        type: "integer"
        format: "int32"
        description: "Period of the alert"
      alertState:
        type: "string"
        description: "State of the alert"
        enum:
        - "OK"
        - "WARN"
        - "CRITICAL"
      scalingPolicy:
        description: "Id of the scaling ploicy"
        $ref: "#/definitions/ScalingPolicyRequest"
  ScalingPolicyResponse:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the policy"
        pattern: "(^[a-zA-Z][-a-zA-Z0-9]*$)"
      adjustmentType:
        type: "string"
        description: "Type of the scaling count"
        enum:
        - "NODE_COUNT"
        - "PERCENTAGE"
        - "EXACT"
      scalingAdjustment:
        type: "integer"
        format: "int32"
        description: "Count of the scaling"
      alertId:
        type: "integer"
        format: "int64"
        description: "Id of the alert which trigger the scaling"
      hostGroup:
        type: "string"
        description: "Name of hostgroup which affected by the scaling"
      id:
        type: "integer"
        format: "int64"
        description: "Id of the policy"
  ScalingPolicyRequest:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the policy"
        pattern: "(^[a-zA-Z][-a-zA-Z0-9]*$)"
      adjustmentType:
        type: "string"
        description: "Type of the scaling count"
        enum:
        - "NODE_COUNT"
        - "PERCENTAGE"
        - "EXACT"
      scalingAdjustment:
        type: "integer"
        format: "int32"
        description: "Count of the scaling"
      alertId:
        type: "integer"
        format: "int64"
        description: "Id of the alert which trigger the scaling"
      hostGroup:
        type: "string"
        description: "Name of hostgroup which affected by the scaling"
  TimeAlertRequest:
    type: "object"
    properties:
      alertName:
        type: "string"
        description: "Name of the alert"
        pattern: "(^[a-zA-Z][-a-zA-Z0-9]*$)"
      description:
        type: "string"
        description: "Description of the alert"
      timeZone:
        type: "string"
        description: "Timezone of the time alert"
      cron:
        type: "string"
        description: "Cron expression of the time alert"
      scalingPolicy:
        description: "Id of the scaling ploicy"
        $ref: "#/definitions/ScalingPolicyRequest"
  PrometheusAlertRequest:
    type: "object"
    properties:
      alertName:
        type: "string"
        description: "Name of the alert"
        pattern: "(^[a-zA-Z][-a-zA-Z0-9]*$)"
      description:
        type: "string"
        description: "Description of the alert"
      alertRuleName:
        type: "string"
        description: "Name of the predefined Prometheus alert rule that could be parameterized\
          \ by the period and threshold fields."
      period:
        type: "integer"
        format: "int32"
        description: "Period of the alert"
      threshold:
        type: "number"
        format: "double"
        description: "Threshold of the alert in percent"
      alertState:
        type: "string"
        description: "State of the alert"
        enum:
        - "OK"
        - "WARN"
        - "CRITICAL"
      alertOperator:
        type: "string"
        description: "Operator of the alert's query."
        enum:
        - "LESS_THAN"
        - "MORE_THAN"
  PrometheusAlertResponse:
    type: "object"
    properties:
      alertName:
        type: "string"
        description: "Name of the alert"
        pattern: "(^[a-zA-Z][-a-zA-Z0-9]*$)"
      description:
        type: "string"
        description: "Description of the alert"
      id:
        type: "integer"
        format: "int64"
        description: "Id of the alert"
      alertRuleName:
        type: "string"
        description: "Name of the predefined Prometheus alert rule that could be parameterized\
          \ by the period and threshold fields."
      period:
        type: "integer"
        format: "int32"
        description: "Period of the alert"
      threshold:
        type: "number"
        format: "double"
        description: "Threshold of the alert in percent"
      alertState:
        type: "string"
        description: "State of the alert"
        enum:
        - "OK"
        - "WARN"
        - "CRITICAL"
      alertOperator:
        type: "string"
        description: "Operator of the alert's query."
        enum:
        - "LESS_THAN"
        - "MORE_THAN"
      scalingPolicyId:
        type: "integer"
        format: "int64"
        description: "Id of the scaling ploicy"
      scalingPolicy:
        description: "Id of the scaling ploicy"
        $ref: "#/definitions/ScalingPolicyRequest"
  ScalingConfiguration:
    type: "object"
    required:
    - "cooldown"
    - "maxSize"
    - "minSize"
    properties:
      minSize:
        type: "integer"
        format: "int32"
        description: "The minimum size of the cluster after scaling"
      maxSize:
        type: "integer"
        format: "int32"
        description: "The maximum size of the cluster after scaling"
      cooldown:
        type: "integer"
        format: "int32"
        description: "The time between two scaling activities"
        minimum: 1
  MetricAlertResponse:
    type: "object"
    properties:
      alertName:
        type: "string"
        description: "Name of the alert"
        pattern: "(^[a-zA-Z][-a-zA-Z0-9]*$)"
      description:
        type: "string"
        description: "Description of the alert"
      id:
        type: "integer"
        format: "int64"
        description: "Id of the alert"
      alertDefinition:
        type: "string"
        description: "Definition of the alert"
      period:
        type: "integer"
        format: "int32"
        description: "Period of the alert"
      alertState:
        type: "string"
        description: "State of the alert"
        enum:
        - "OK"
        - "WARN"
        - "CRITICAL"
      scalingPolicyId:
        type: "integer"
        format: "int64"
        description: "Id of the scaling ploicy"
      scalingPolicy:
        description: "Id of the scaling ploicy"
        $ref: "#/definitions/ScalingPolicyRequest"
  TimeAlertValidationRequest:
    type: "object"
    required:
    - "cronExpression"
    properties:
      cronExpression:
        type: "string"
        description: "Cron expression of the time alert"
  Health:
    type: "object"