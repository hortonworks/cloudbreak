// This file defines the Liftie Public gRPC service responsible for exposing public-facing
// APIs for the Compute API. It interacts with clients using public APIs and leverages common
// messages from the shared proto file.
//
// Imports:
// - liftieshared.proto: Uses shared messages and structs.
// - options.proto: Provides custom options for code generation.
//
// The LiftiePublic service is registered under the "liftiepublic" package.
syntax = "proto3";

package liftiepublic;

option java_package = "com.cloudera.thunderhead.service.liftiepublic";
option java_outer_classname = "LiftiePublicProto";
option go_package = "/liftiepublic_grpc";

import "options.proto";
import "liftieshared.proto";

// Compute Public API service :: Using Liftie Public GRPC service.
service LiftiePublic {

  option (options.ServiceExtension.formFactor) = "public,private";
  option (options.ServiceExtension.apiServiceName) = {
    lowercase: "liftiepublic"
    camelcase: "LiftiePublic"
  };

  // Create compute cluster :: Creates compute cluster.
  rpc CreateCluster(liftieshared.CreateClusterRequest)
      returns (liftieshared.CreateClusterResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Validate compute cluster :: Validates compute cluster.
  rpc ValidateCluster(liftieshared.ValidateClusterRequest)
      returns (liftieshared.ValidateClusterResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Validate credential :: Run cross-account and IAM validations based on passed in credential.
  rpc ValidateCredential(liftieshared.ValidateCredentialRequest)
      returns (liftieshared.ValidateCredentialResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Delete compute cluster :: Deletes compute cluster.
  rpc DeleteCluster(liftieshared.DeleteClusterRequest)
      returns (liftieshared.DeleteClusterResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Describe compute cluster :: Gets status of compute cluster.
  rpc DescribeCluster(liftieshared.DescribeClusterRequest)
      returns (liftieshared.DescribeClusterResponse) {
  }

  // List compute clusters :: Lists compute clusters for an environment.
  rpc ListClusters(liftieshared.ListClustersRequest)
      returns (liftieshared.ListClustersResponse) {
    option (options.MethodExtension.pagingDefaultMaxItems) = 100;
  }

  // Get kube config content :: Get kubernetes configuration content for a compute cluster.
  rpc GetKubeConfig(liftieshared.GetKubeConfigRequest)
      returns (liftieshared.GetKubeConfigResponse) {
  }

  // Installs a deployment :: Installs a new deployment in the specified namespace.
  rpc InstallDeployment (liftieshared.InstallDeploymentRequest)
      returns (liftieshared.InstallDeploymentResponse) {
    option (options.MethodExtension.entitlement) = "COMPUTE_SECURITY_UPDATES";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
    option (options.MethodExtension.mutating) = true;
  }

  // Deletes a deployment :: Deletes a deployment that is currently installed and managed for this cluster.
  rpc DeleteDeployment (liftieshared.DeleteDeploymentRequest)
      returns (liftieshared.DeleteDeploymentResponse) {
    option (options.MethodExtension.entitlement) = "COMPUTE_SECURITY_UPDATES";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
    option (options.MethodExtension.mutating) = true;
  }

  // Describes a deployment :: Gets a single deployment along with its extended history. This can also include all of the known templates.
  rpc DescribeDeployment (liftieshared.DescribeDeploymentRequest)
      returns (liftieshared.DescribeDeploymentResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Upgrades a deployment to a different chart :: This will perform an upgrade.
  rpc UpgradeDeployment (liftieshared.UpgradeDeploymentRequest)
      returns (liftieshared.UpgradeDeploymentResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Rollbacks a deployment to a previous revision :: This will perform a rollback.
  rpc RollbackDeployment (liftieshared.RollbackDeploymentRequest)
      returns (liftieshared.RollbackDeploymentResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // List deployments in the cluster :: Gets the helm charts that are available for deployment or have already been deployed in this cluster.
  rpc ListDeployments (liftieshared.ListDeploymentsRequest)
      returns (liftieshared.ListDeploymentsResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Update compute cluster :: Updates compute cluster.
  rpc UpdateCluster(liftieshared.UpdateClusterRequest)
      returns (liftieshared.UpdateClusterResponse){
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Create instance groups :: Creates instance groups in a compute cluster.
  rpc CreateInstanceGroups(liftieshared.CreateInstanceGroupsRequest)
      returns (liftieshared.CreateInstanceGroupsResponse){
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Delete instance group :: Deletes an instance group of a compute cluster.
  rpc DeleteInstanceGroup(liftieshared.DeleteInstanceGroupRequest)
      returns (liftieshared.DeleteInstanceGroupResponse){
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Update instance group :: Updates an instance group of a compute cluster.
  rpc UpdateInstanceGroup(liftieshared.UpdateInstanceGroupRequest)
      returns (liftieshared.UpdateInstanceGroupResponse){
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Upgrade k8s version of the cluster :: Upgrades the k8s version of the cluster to the specified version.
  rpc UpgradeCluster (liftieshared.UpgradeClusterRequest)
      returns (liftieshared.UpgradeClusterResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Add User :: Adds a user or a role to a compute cluster.
  rpc AddUser(liftieshared.AddUserRequest)
      returns (liftieshared.AddUserResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }
  // Delete User :: Deletes a user or a role of a compute cluster.
  rpc DeleteUser(liftieshared.DeleteUserRequest)
      returns (liftieshared.DeleteUserResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }
  // Describe User :: Describes a user or a role of a compute cluster.
  rpc DescribeUser(liftieshared.DescribeUserRequest)
      returns (liftieshared.DescribeUserResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }
  // List Users :: Lists users and roles of a compute cluster.
  rpc ListUsers(liftieshared.ListUsersRequest)
      returns (liftieshared.ListUsersResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }
  // Get prerequisite :: Retrieves all the prerequisite detail for a given cloud provider.
  rpc GetPrerequisite (liftieshared.GetPrerequisiteRequest)
      returns (liftieshared.GetPrerequisiteResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }
  // Refresh service account tokens :: Refreshes service account tokens for a cluster.
  rpc RefreshServiceAccountTokens (liftieshared.RefreshServiceAccountTokensRequest)
      returns (liftieshared.RefreshServiceAccountTokensResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Recommend Instance types :: Recommend cloud provider instance types based on provided requirements.
  rpc RecommendInstanceTypes(liftieshared.RecommendInstanceTypesRequest)
      returns (liftieshared.RecommendInstanceTypesResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Suspend Cluster :: Suspends the kubernetes cluster
  rpc SuspendCluster(liftieshared.SuspendClusterRequest) returns (liftieshared.SuspendClusterResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }
  // Resume Cluster :: Resumes the kubernetes cluster
  rpc ResumeCluster(liftieshared.ResumeClusterRequest) returns (liftieshared.ResumeClusterResponse) {
    option (options.MethodExtension.formFactor) = "public";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
  }

  // Register compute cluster :: Register a compute cluster in a CDP Environment.
  rpc RegisterCluster (liftieshared.RegisterClusterRequest)
      returns (liftieshared.RegisterClusterResponse) {
    option (options.MethodExtension.formFactor) = "private";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
    option (options.MethodExtension.mutating) = true;
  }

  // Update registered compute cluster :: Update registered compute cluster in a CDP Environment.
  rpc UpdateRegisteredCluster (liftieshared.UpdateRegisteredClusterRequest)
      returns (liftieshared.UpdateRegisteredClusterResponse) {
    option (options.MethodExtension.formFactor) = "private";
    option (options.MethodExtension.hidden) = true;
    option (options.MethodExtension.hiddenReason) = "IN_DEVELOPMENT";
    option (options.MethodExtension.mutating) = true;
  }

}
