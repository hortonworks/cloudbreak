/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.cdp.environments2.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Request object for repairing the FreeIPA servers.
 */
@JsonPropertyOrder({
  RepairFreeipaRequest.JSON_PROPERTY_ENVIRONMENT_NAME,
  RepairFreeipaRequest.JSON_PROPERTY_FORCE,
  RepairFreeipaRequest.JSON_PROPERTY_INSTANCES,
  RepairFreeipaRequest.JSON_PROPERTY_REPAIR_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-02T16:36:31.330723+02:00[Europe/Budapest]", comments = "Generator version: 7.5.0")
public class RepairFreeipaRequest {
  public static final String JSON_PROPERTY_ENVIRONMENT_NAME = "environmentName";
  private String environmentName;

  public static final String JSON_PROPERTY_FORCE = "force";
  private Boolean force = false;

  public static final String JSON_PROPERTY_INSTANCES = "instances";
  private List<String> instances = new ArrayList<>();

  /**
   * The type of FreeIPA repair to perform. * AUTO - Currently, this is the same as reboot but this may change in the future. * REBOOT - Repair the failed instances by rebooting them. * REBUILD - Repair the failed instances by deleting them and creating new instances, then replicate data from an existing instance to the new instances.
   */
  public enum RepairTypeEnum {
    AUTO("AUTO"),
    
    REBOOT("REBOOT"),
    
    REBUILD("REBUILD");

    private String value;

    RepairTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RepairTypeEnum fromValue(String value) {
      for (RepairTypeEnum b : RepairTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REPAIR_TYPE = "repairType";
  private RepairTypeEnum repairType;

  public RepairFreeipaRequest() { 
  }

  public RepairFreeipaRequest environmentName(String environmentName) {
    this.environmentName = environmentName;
    return this;
  }

   /**
   * The environment name or CRN of the FreeIPA to repair
   * @return environmentName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENVIRONMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEnvironmentName() {
    return environmentName;
  }


  @JsonProperty(JSON_PROPERTY_ENVIRONMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnvironmentName(String environmentName) {
    this.environmentName = environmentName;
  }


  public RepairFreeipaRequest force(Boolean force) {
    this.force = force;
    return this;
  }

   /**
   * Force the repair even if the status if the FreeIPA nodes are good.
   * @return force
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getForce() {
    return force;
  }


  @JsonProperty(JSON_PROPERTY_FORCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForce(Boolean force) {
    this.force = force;
  }


  public RepairFreeipaRequest instances(List<String> instances) {
    this.instances = instances;
    return this;
  }

  public RepairFreeipaRequest addInstancesItem(String instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

   /**
   * The instance Ids to repair. If not provided then all instances are looked at for repair.
   * @return instances
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getInstances() {
    return instances;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstances(List<String> instances) {
    this.instances = instances;
  }


  public RepairFreeipaRequest repairType(RepairTypeEnum repairType) {
    this.repairType = repairType;
    return this;
  }

   /**
   * The type of FreeIPA repair to perform. * AUTO - Currently, this is the same as reboot but this may change in the future. * REBOOT - Repair the failed instances by rebooting them. * REBUILD - Repair the failed instances by deleting them and creating new instances, then replicate data from an existing instance to the new instances.
   * @return repairType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPAIR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RepairTypeEnum getRepairType() {
    return repairType;
  }


  @JsonProperty(JSON_PROPERTY_REPAIR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepairType(RepairTypeEnum repairType) {
    this.repairType = repairType;
  }


  /**
   * Return true if this RepairFreeipaRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepairFreeipaRequest repairFreeipaRequest = (RepairFreeipaRequest) o;
    return Objects.equals(this.environmentName, repairFreeipaRequest.environmentName) &&
        Objects.equals(this.force, repairFreeipaRequest.force) &&
        Objects.equals(this.instances, repairFreeipaRequest.instances) &&
        Objects.equals(this.repairType, repairFreeipaRequest.repairType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environmentName, force, instances, repairType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepairFreeipaRequest {\n");
    sb.append("    environmentName: ").append(toIndentedString(environmentName)).append("\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    repairType: ").append(toIndentedString(repairType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `environmentName` to the URL query string
    if (getEnvironmentName() != null) {
      joiner.add(String.format("%senvironmentName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnvironmentName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `force` to the URL query string
    if (getForce() != null) {
      joiner.add(String.format("%sforce%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getForce()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `instances` to the URL query string
    if (getInstances() != null) {
      for (int i = 0; i < getInstances().size(); i++) {
        joiner.add(String.format("%sinstances%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getInstances().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `repairType` to the URL query string
    if (getRepairType() != null) {
      joiner.add(String.format("%srepairType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRepairType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

