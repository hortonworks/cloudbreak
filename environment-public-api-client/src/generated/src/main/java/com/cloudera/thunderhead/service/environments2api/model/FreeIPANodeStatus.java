/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The status and issues of an individual FreeIPA node.
 */
@JsonPropertyOrder({
  FreeIPANodeStatus.JSON_PROPERTY_HOSTNAME,
  FreeIPANodeStatus.JSON_PROPERTY_STATUS,
  FreeIPANodeStatus.JSON_PROPERTY_ISSUES,
  FreeIPANodeStatus.JSON_PROPERTY_INSTANCE_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class FreeIPANodeStatus {
  public static final String JSON_PROPERTY_HOSTNAME = "hostname";
  private String hostname;

  /**
   * The status of the individual node
   */
  public enum StatusEnum {
    REQUESTED("REQUESTED"),
    
    CREATED("CREATED"),
    
    UNREGISTERED("UNREGISTERED"),
    
    REGISTERED("REGISTERED"),
    
    DECOMMISSIONED("DECOMMISSIONED"),
    
    TERMINATED("TERMINATED"),
    
    DELETED_ON_PROVIDER_SIDE("DELETED_ON_PROVIDER_SIDE"),
    
    DELETED_BY_PROVIDER("DELETED_BY_PROVIDER"),
    
    FAILED("FAILED"),
    
    STOPPED("STOPPED"),
    
    REBOOTING("REBOOTING"),
    
    UNREACHABLE("UNREACHABLE"),
    
    UNHEALTHY("UNHEALTHY"),
    
    DELETE_REQUESTED("DELETE_REQUESTED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_ISSUES = "issues";
  private List<String> issues = new ArrayList<>();

  public static final String JSON_PROPERTY_INSTANCE_ID = "instanceId";
  private String instanceId;

  public FreeIPANodeStatus() {
  }

  public FreeIPANodeStatus hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * The hostname of the ipa instance.
   * @return hostname
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHostname() {
    return hostname;
  }


  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public FreeIPANodeStatus status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the individual node
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public FreeIPANodeStatus issues(List<String> issues) {
    
    this.issues = issues;
    return this;
  }

  public FreeIPANodeStatus addIssuesItem(String issuesItem) {
    if (this.issues == null) {
      this.issues = new ArrayList<>();
    }
    this.issues.add(issuesItem);
    return this;
  }

   /**
   * A list of issues the node is having
   * @return issues
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISSUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getIssues() {
    return issues;
  }


  @JsonProperty(JSON_PROPERTY_ISSUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIssues(List<String> issues) {
    this.issues = issues;
  }


  public FreeIPANodeStatus instanceId(String instanceId) {
    
    this.instanceId = instanceId;
    return this;
  }

   /**
   * The instance ID for the instance.
   * @return instanceId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInstanceId() {
    return instanceId;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FreeIPANodeStatus freeIPANodeStatus = (FreeIPANodeStatus) o;
    return Objects.equals(this.hostname, freeIPANodeStatus.hostname) &&
        Objects.equals(this.status, freeIPANodeStatus.status) &&
        Objects.equals(this.issues, freeIPANodeStatus.issues) &&
        Objects.equals(this.instanceId, freeIPANodeStatus.instanceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostname, status, issues, instanceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FreeIPANodeStatus {\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

