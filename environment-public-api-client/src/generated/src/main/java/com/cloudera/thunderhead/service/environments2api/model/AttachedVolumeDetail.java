/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The attached volume configuration.
 */
@JsonPropertyOrder({
  AttachedVolumeDetail.JSON_PROPERTY_COUNT,
  AttachedVolumeDetail.JSON_PROPERTY_VOLUME_TYPE,
  AttachedVolumeDetail.JSON_PROPERTY_SIZE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class AttachedVolumeDetail {
  public static final String JSON_PROPERTY_COUNT = "count";
  private Integer count;

  public static final String JSON_PROPERTY_VOLUME_TYPE = "volumeType";
  private String volumeType;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Integer size;

  public AttachedVolumeDetail() {
  }

  public AttachedVolumeDetail count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * The number of volumes.
   * @return count
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCount(Integer count) {
    this.count = count;
  }


  public AttachedVolumeDetail volumeType(String volumeType) {
    
    this.volumeType = volumeType;
    return this;
  }

   /**
   * The type of volumes.
   * @return volumeType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VOLUME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVolumeType() {
    return volumeType;
  }


  @JsonProperty(JSON_PROPERTY_VOLUME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumeType(String volumeType) {
    this.volumeType = volumeType;
  }


  public AttachedVolumeDetail size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * The size of each volume in GB.
   * @return size
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Integer size) {
    this.size = size;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachedVolumeDetail attachedVolumeDetail = (AttachedVolumeDetail) o;
    return Objects.equals(this.count, attachedVolumeDetail.count) &&
        Objects.equals(this.volumeType, attachedVolumeDetail.volumeType) &&
        Objects.equals(this.size, attachedVolumeDetail.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, volumeType, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachedVolumeDetail {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    volumeType: ").append(toIndentedString(volumeType)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

