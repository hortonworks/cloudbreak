/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.cdp.environments2.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.cloudera.cdp.environments2.model.FreeipaVmLogRequest;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Request object for collecting FreeIPA diagnostics.
 */
@JsonPropertyOrder({
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_ENVIRONMENT_NAME,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_DESTINATION,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_DESCRIPTION,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_CASE_NUMBER,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_LABELS,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_START_DATE,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_END_DATE,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_ADDITIONAL_LOGS,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_HOSTS,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_HOST_GROUPS,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_EXCLUDE_HOSTS,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_SKIP_UNRESPONSIVE_HOSTS,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_INCLUDE_NGINX_REPORT,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_INCLUDE_SALT_LOGS,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_INCLUDE_SAR_OUTPUT,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_UPDATE_PACKAGE,
  CollectFreeipaDiagnosticsRequest.JSON_PROPERTY_STORAGE_VALIDATION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-02T16:36:31.330723+02:00[Europe/Budapest]", comments = "Generator version: 7.5.0")
public class CollectFreeipaDiagnosticsRequest {
  public static final String JSON_PROPERTY_ENVIRONMENT_NAME = "environmentName";
  private String environmentName;

  /**
   * Destination of the diagnostics collection (Support, Own cloud storage, Engineering or collect only on the nodes)
   */
  public enum DestinationEnum {
    SUPPORT("SUPPORT"),
    
    CLOUD_STORAGE("CLOUD_STORAGE"),
    
    ENG("ENG"),
    
    LOCAL("LOCAL");

    private String value;

    DestinationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DestinationEnum fromValue(String value) {
      for (DestinationEnum b : DestinationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DESTINATION = "destination";
  private DestinationEnum destination;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_CASE_NUMBER = "caseNumber";
  private String caseNumber;

  public static final String JSON_PROPERTY_LABELS = "labels";
  private Set<String> labels = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  private OffsetDateTime startDate;

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  private OffsetDateTime endDate;

  public static final String JSON_PROPERTY_ADDITIONAL_LOGS = "additionalLogs";
  private List<FreeipaVmLogRequest> additionalLogs = new ArrayList<>();

  public static final String JSON_PROPERTY_HOSTS = "hosts";
  private Set<String> hosts = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_HOST_GROUPS = "hostGroups";
  private Set<String> hostGroups = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_EXCLUDE_HOSTS = "excludeHosts";
  private Set<String> excludeHosts = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_SKIP_UNRESPONSIVE_HOSTS = "skipUnresponsiveHosts";
  private Boolean skipUnresponsiveHosts;

  public static final String JSON_PROPERTY_INCLUDE_NGINX_REPORT = "includeNginxReport";
  private Boolean includeNginxReport;

  public static final String JSON_PROPERTY_INCLUDE_SALT_LOGS = "includeSaltLogs";
  private Boolean includeSaltLogs;

  public static final String JSON_PROPERTY_INCLUDE_SAR_OUTPUT = "includeSarOutput";
  private Boolean includeSarOutput;

  public static final String JSON_PROPERTY_UPDATE_PACKAGE = "updatePackage";
  private Boolean updatePackage = false;

  public static final String JSON_PROPERTY_STORAGE_VALIDATION = "storageValidation";
  private Boolean storageValidation = false;

  public CollectFreeipaDiagnosticsRequest() { 
  }

  public CollectFreeipaDiagnosticsRequest environmentName(String environmentName) {
    this.environmentName = environmentName;
    return this;
  }

   /**
   * The name or CRN of the environment.
   * @return environmentName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENVIRONMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEnvironmentName() {
    return environmentName;
  }


  @JsonProperty(JSON_PROPERTY_ENVIRONMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnvironmentName(String environmentName) {
    this.environmentName = environmentName;
  }


  public CollectFreeipaDiagnosticsRequest destination(DestinationEnum destination) {
    this.destination = destination;
    return this;
  }

   /**
   * Destination of the diagnostics collection (Support, Own cloud storage, Engineering or collect only on the nodes)
   * @return destination
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DestinationEnum getDestination() {
    return destination;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDestination(DestinationEnum destination) {
    this.destination = destination;
  }


  public CollectFreeipaDiagnosticsRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Additional information / title for the diagnostics collection.
   * @return description
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public CollectFreeipaDiagnosticsRequest caseNumber(String caseNumber) {
    this.caseNumber = caseNumber;
    return this;
  }

   /**
   * Optional support case number in case of SUPPORT destination, otherwise only act as additional data.
   * @return caseNumber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CASE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCaseNumber() {
    return caseNumber;
  }


  @JsonProperty(JSON_PROPERTY_CASE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCaseNumber(String caseNumber) {
    this.caseNumber = caseNumber;
  }


  public CollectFreeipaDiagnosticsRequest labels(Set<String> labels) {
    this.labels = labels;
    return this;
  }

  public CollectFreeipaDiagnosticsRequest addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new LinkedHashSet<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Array of labels that can filter logs that are collected during diagnostics collection.
   * @return labels
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getLabels() {
    return labels;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Set<String> labels) {
    this.labels = labels;
  }


  public CollectFreeipaDiagnosticsRequest startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Date timestamp - collect files only for diagnostics that has higher last modified timestamp value than this.
   * @return startDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public CollectFreeipaDiagnosticsRequest endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Date timestamp - collect files only for diagnostics that has lower created timestamp value than this.
   * @return endDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public CollectFreeipaDiagnosticsRequest additionalLogs(List<FreeipaVmLogRequest> additionalLogs) {
    this.additionalLogs = additionalLogs;
    return this;
  }

  public CollectFreeipaDiagnosticsRequest addAdditionalLogsItem(FreeipaVmLogRequest additionalLogsItem) {
    if (this.additionalLogs == null) {
      this.additionalLogs = new ArrayList<>();
    }
    this.additionalLogs.add(additionalLogsItem);
    return this;
  }

   /**
   * Array of log descriptors that should be additionally collected during diagnostics collection.
   * @return additionalLogs
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FreeipaVmLogRequest> getAdditionalLogs() {
    return additionalLogs;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalLogs(List<FreeipaVmLogRequest> additionalLogs) {
    this.additionalLogs = additionalLogs;
  }


  public CollectFreeipaDiagnosticsRequest hosts(Set<String> hosts) {
    this.hosts = hosts;
    return this;
  }

  public CollectFreeipaDiagnosticsRequest addHostsItem(String hostsItem) {
    if (this.hosts == null) {
      this.hosts = new LinkedHashSet<>();
    }
    this.hosts.add(hostsItem);
    return this;
  }

   /**
   * Array of host names (fqdn), collection will run only on the dedicated hosts.
   * @return hosts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getHosts() {
    return hosts;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHosts(Set<String> hosts) {
    this.hosts = hosts;
  }


  public CollectFreeipaDiagnosticsRequest hostGroups(Set<String> hostGroups) {
    this.hostGroups = hostGroups;
    return this;
  }

  public CollectFreeipaDiagnosticsRequest addHostGroupsItem(String hostGroupsItem) {
    if (this.hostGroups == null) {
      this.hostGroups = new LinkedHashSet<>();
    }
    this.hostGroups.add(hostGroupsItem);
    return this;
  }

   /**
   * Array of host groups, collection will run only on the dedicated hosts that belongs to these host groups.
   * @return hostGroups
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOST_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getHostGroups() {
    return hostGroups;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_HOST_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostGroups(Set<String> hostGroups) {
    this.hostGroups = hostGroups;
  }


  public CollectFreeipaDiagnosticsRequest excludeHosts(Set<String> excludeHosts) {
    this.excludeHosts = excludeHosts;
    return this;
  }

  public CollectFreeipaDiagnosticsRequest addExcludeHostsItem(String excludeHostsItem) {
    if (this.excludeHosts == null) {
      this.excludeHosts = new LinkedHashSet<>();
    }
    this.excludeHosts.add(excludeHostsItem);
    return this;
  }

   /**
   * Array of host names (fqdn or IP address), collection will not run on the excluded hosts.
   * @return excludeHosts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXCLUDE_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getExcludeHosts() {
    return excludeHosts;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_EXCLUDE_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExcludeHosts(Set<String> excludeHosts) {
    this.excludeHosts = excludeHosts;
  }


  public CollectFreeipaDiagnosticsRequest skipUnresponsiveHosts(Boolean skipUnresponsiveHosts) {
    this.skipUnresponsiveHosts = skipUnresponsiveHosts;
    return this;
  }

   /**
   * Skip unhealthy hosts from the diagnostics collection.
   * @return skipUnresponsiveHosts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SKIP_UNRESPONSIVE_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSkipUnresponsiveHosts() {
    return skipUnresponsiveHosts;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_UNRESPONSIVE_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkipUnresponsiveHosts(Boolean skipUnresponsiveHosts) {
    this.skipUnresponsiveHosts = skipUnresponsiveHosts;
  }


  public CollectFreeipaDiagnosticsRequest includeNginxReport(Boolean includeNginxReport) {
    this.includeNginxReport = includeNginxReport;
    return this;
  }

   /**
   * Include Nginx report generated by GoAccess (if available).
   * @return includeNginxReport
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCLUDE_NGINX_REPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIncludeNginxReport() {
    return includeNginxReport;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE_NGINX_REPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncludeNginxReport(Boolean includeNginxReport) {
    this.includeNginxReport = includeNginxReport;
  }


  public CollectFreeipaDiagnosticsRequest includeSaltLogs(Boolean includeSaltLogs) {
    this.includeSaltLogs = includeSaltLogs;
    return this;
  }

   /**
   * Include salt minion/master/api system logs in the diagnostics collection.
   * @return includeSaltLogs
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCLUDE_SALT_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIncludeSaltLogs() {
    return includeSaltLogs;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE_SALT_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncludeSaltLogs(Boolean includeSaltLogs) {
    this.includeSaltLogs = includeSaltLogs;
  }


  public CollectFreeipaDiagnosticsRequest includeSarOutput(Boolean includeSarOutput) {
    this.includeSarOutput = includeSarOutput;
    return this;
  }

   /**
   * Include SAR (System Activity Report) generated outputs in the diagnostics collection (if available).
   * @return includeSarOutput
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCLUDE_SAR_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIncludeSarOutput() {
    return includeSarOutput;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE_SAR_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncludeSarOutput(Boolean includeSarOutput) {
    this.includeSarOutput = includeSarOutput;
  }


  public CollectFreeipaDiagnosticsRequest updatePackage(Boolean updatePackage) {
    this.updatePackage = updatePackage;
    return this;
  }

   /**
   * If enabled, required package (cdp-telemetry) will be upgraded or installed on the nodes. (useful if package is not installed or needs to be upgraded) Network is required for this operation.
   * @return updatePackage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATE_PACKAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUpdatePackage() {
    return updatePackage;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_PACKAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdatePackage(Boolean updatePackage) {
    this.updatePackage = updatePackage;
  }


  public CollectFreeipaDiagnosticsRequest storageValidation(Boolean storageValidation) {
    this.storageValidation = storageValidation;
    return this;
  }

   /**
   * Enable/disable node level storage validation (can be disabled for example, if you have too many hosts and do not want to do too much parallel writes to s3/abfs)
   * @return storageValidation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STORAGE_VALIDATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStorageValidation() {
    return storageValidation;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_VALIDATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorageValidation(Boolean storageValidation) {
    this.storageValidation = storageValidation;
  }


  /**
   * Return true if this CollectFreeipaDiagnosticsRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectFreeipaDiagnosticsRequest collectFreeipaDiagnosticsRequest = (CollectFreeipaDiagnosticsRequest) o;
    return Objects.equals(this.environmentName, collectFreeipaDiagnosticsRequest.environmentName) &&
        Objects.equals(this.destination, collectFreeipaDiagnosticsRequest.destination) &&
        Objects.equals(this.description, collectFreeipaDiagnosticsRequest.description) &&
        Objects.equals(this.caseNumber, collectFreeipaDiagnosticsRequest.caseNumber) &&
        Objects.equals(this.labels, collectFreeipaDiagnosticsRequest.labels) &&
        Objects.equals(this.startDate, collectFreeipaDiagnosticsRequest.startDate) &&
        Objects.equals(this.endDate, collectFreeipaDiagnosticsRequest.endDate) &&
        Objects.equals(this.additionalLogs, collectFreeipaDiagnosticsRequest.additionalLogs) &&
        Objects.equals(this.hosts, collectFreeipaDiagnosticsRequest.hosts) &&
        Objects.equals(this.hostGroups, collectFreeipaDiagnosticsRequest.hostGroups) &&
        Objects.equals(this.excludeHosts, collectFreeipaDiagnosticsRequest.excludeHosts) &&
        Objects.equals(this.skipUnresponsiveHosts, collectFreeipaDiagnosticsRequest.skipUnresponsiveHosts) &&
        Objects.equals(this.includeNginxReport, collectFreeipaDiagnosticsRequest.includeNginxReport) &&
        Objects.equals(this.includeSaltLogs, collectFreeipaDiagnosticsRequest.includeSaltLogs) &&
        Objects.equals(this.includeSarOutput, collectFreeipaDiagnosticsRequest.includeSarOutput) &&
        Objects.equals(this.updatePackage, collectFreeipaDiagnosticsRequest.updatePackage) &&
        Objects.equals(this.storageValidation, collectFreeipaDiagnosticsRequest.storageValidation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environmentName, destination, description, caseNumber, labels, startDate, endDate, additionalLogs, hosts, hostGroups, excludeHosts, skipUnresponsiveHosts, includeNginxReport, includeSaltLogs, includeSarOutput, updatePackage, storageValidation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectFreeipaDiagnosticsRequest {\n");
    sb.append("    environmentName: ").append(toIndentedString(environmentName)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    caseNumber: ").append(toIndentedString(caseNumber)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    additionalLogs: ").append(toIndentedString(additionalLogs)).append("\n");
    sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
    sb.append("    hostGroups: ").append(toIndentedString(hostGroups)).append("\n");
    sb.append("    excludeHosts: ").append(toIndentedString(excludeHosts)).append("\n");
    sb.append("    skipUnresponsiveHosts: ").append(toIndentedString(skipUnresponsiveHosts)).append("\n");
    sb.append("    includeNginxReport: ").append(toIndentedString(includeNginxReport)).append("\n");
    sb.append("    includeSaltLogs: ").append(toIndentedString(includeSaltLogs)).append("\n");
    sb.append("    includeSarOutput: ").append(toIndentedString(includeSarOutput)).append("\n");
    sb.append("    updatePackage: ").append(toIndentedString(updatePackage)).append("\n");
    sb.append("    storageValidation: ").append(toIndentedString(storageValidation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `environmentName` to the URL query string
    if (getEnvironmentName() != null) {
      joiner.add(String.format("%senvironmentName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnvironmentName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `destination` to the URL query string
    if (getDestination() != null) {
      joiner.add(String.format("%sdestination%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDestination()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `caseNumber` to the URL query string
    if (getCaseNumber() != null) {
      joiner.add(String.format("%scaseNumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCaseNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `labels` to the URL query string
    if (getLabels() != null) {
      int i = 0;
      for (String _item : getLabels()) {
        joiner.add(String.format("%slabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(_item), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
      i++;
    }

    // add `startDate` to the URL query string
    if (getStartDate() != null) {
      joiner.add(String.format("%sstartDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartDate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `endDate` to the URL query string
    if (getEndDate() != null) {
      joiner.add(String.format("%sendDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEndDate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `additionalLogs` to the URL query string
    if (getAdditionalLogs() != null) {
      for (int i = 0; i < getAdditionalLogs().size(); i++) {
        if (getAdditionalLogs().get(i) != null) {
          joiner.add(getAdditionalLogs().get(i).toUrlQueryString(String.format("%sadditionalLogs%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `hosts` to the URL query string
    if (getHosts() != null) {
      int i = 0;
      for (String _item : getHosts()) {
        joiner.add(String.format("%shosts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(_item), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
      i++;
    }

    // add `hostGroups` to the URL query string
    if (getHostGroups() != null) {
      int i = 0;
      for (String _item : getHostGroups()) {
        joiner.add(String.format("%shostGroups%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(_item), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
      i++;
    }

    // add `excludeHosts` to the URL query string
    if (getExcludeHosts() != null) {
      int i = 0;
      for (String _item : getExcludeHosts()) {
        joiner.add(String.format("%sexcludeHosts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(_item), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
      i++;
    }

    // add `skipUnresponsiveHosts` to the URL query string
    if (getSkipUnresponsiveHosts() != null) {
      joiner.add(String.format("%sskipUnresponsiveHosts%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSkipUnresponsiveHosts()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `includeNginxReport` to the URL query string
    if (getIncludeNginxReport() != null) {
      joiner.add(String.format("%sincludeNginxReport%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIncludeNginxReport()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `includeSaltLogs` to the URL query string
    if (getIncludeSaltLogs() != null) {
      joiner.add(String.format("%sincludeSaltLogs%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIncludeSaltLogs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `includeSarOutput` to the URL query string
    if (getIncludeSarOutput() != null) {
      joiner.add(String.format("%sincludeSarOutput%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIncludeSarOutput()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `updatePackage` to the URL query string
    if (getUpdatePackage() != null) {
      joiner.add(String.format("%supdatePackage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdatePackage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `storageValidation` to the URL query string
    if (getStorageValidation() != null) {
      joiner.add(String.format("%sstorageValidation%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStorageValidation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

