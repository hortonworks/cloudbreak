/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.cdp.environments2.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Object containing details of encryption parameters for Azure cloud.
 */
@JsonPropertyOrder({
  AzureResourceEncryptionParameters.JSON_PROPERTY_ENCRYPTION_KEY_URL,
  AzureResourceEncryptionParameters.JSON_PROPERTY_ENCRYPTION_KEY_RESOURCE_GROUP_NAME,
  AzureResourceEncryptionParameters.JSON_PROPERTY_DISK_ENCRYPTION_SET_ID,
  AzureResourceEncryptionParameters.JSON_PROPERTY_USER_MANAGED_IDENTITY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-02T16:36:31.330723+02:00[Europe/Budapest]", comments = "Generator version: 7.5.0")
public class AzureResourceEncryptionParameters {
  public static final String JSON_PROPERTY_ENCRYPTION_KEY_URL = "encryptionKeyUrl";
  private String encryptionKeyUrl;

  public static final String JSON_PROPERTY_ENCRYPTION_KEY_RESOURCE_GROUP_NAME = "encryptionKeyResourceGroupName";
  private String encryptionKeyResourceGroupName;

  public static final String JSON_PROPERTY_DISK_ENCRYPTION_SET_ID = "diskEncryptionSetId";
  private String diskEncryptionSetId;

  public static final String JSON_PROPERTY_USER_MANAGED_IDENTITY = "userManagedIdentity";
  private String userManagedIdentity;

  public AzureResourceEncryptionParameters() { 
  }

  public AzureResourceEncryptionParameters encryptionKeyUrl(String encryptionKeyUrl) {
    this.encryptionKeyUrl = encryptionKeyUrl;
    return this;
  }

   /**
   * URL of the key which is used to encrypt the Azure Managed Disks.
   * @return encryptionKeyUrl
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENCRYPTION_KEY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncryptionKeyUrl() {
    return encryptionKeyUrl;
  }


  @JsonProperty(JSON_PROPERTY_ENCRYPTION_KEY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncryptionKeyUrl(String encryptionKeyUrl) {
    this.encryptionKeyUrl = encryptionKeyUrl;
  }


  public AzureResourceEncryptionParameters encryptionKeyResourceGroupName(String encryptionKeyResourceGroupName) {
    this.encryptionKeyResourceGroupName = encryptionKeyResourceGroupName;
    return this;
  }

   /**
   * Name of the existing Azure resource group hosting the Azure Key Vault containing customer managed key which is used to encrypt the Azure Managed Disks.
   * @return encryptionKeyResourceGroupName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENCRYPTION_KEY_RESOURCE_GROUP_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncryptionKeyResourceGroupName() {
    return encryptionKeyResourceGroupName;
  }


  @JsonProperty(JSON_PROPERTY_ENCRYPTION_KEY_RESOURCE_GROUP_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncryptionKeyResourceGroupName(String encryptionKeyResourceGroupName) {
    this.encryptionKeyResourceGroupName = encryptionKeyResourceGroupName;
  }


  public AzureResourceEncryptionParameters diskEncryptionSetId(String diskEncryptionSetId) {
    this.diskEncryptionSetId = diskEncryptionSetId;
    return this;
  }

   /**
   * ID of the Disk Encryption Set created in Azure which is used to encrypt Managed Disks of FreeIPA, Data Lake, Data Hub and PostgreSQL.
   * @return diskEncryptionSetId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISK_ENCRYPTION_SET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDiskEncryptionSetId() {
    return diskEncryptionSetId;
  }


  @JsonProperty(JSON_PROPERTY_DISK_ENCRYPTION_SET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiskEncryptionSetId(String diskEncryptionSetId) {
    this.diskEncryptionSetId = diskEncryptionSetId;
  }


  public AzureResourceEncryptionParameters userManagedIdentity(String userManagedIdentity) {
    this.userManagedIdentity = userManagedIdentity;
    return this;
  }

   /**
   * User managed identity for encryption.
   * @return userManagedIdentity
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_MANAGED_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserManagedIdentity() {
    return userManagedIdentity;
  }


  @JsonProperty(JSON_PROPERTY_USER_MANAGED_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserManagedIdentity(String userManagedIdentity) {
    this.userManagedIdentity = userManagedIdentity;
  }


  /**
   * Return true if this AzureResourceEncryptionParameters object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureResourceEncryptionParameters azureResourceEncryptionParameters = (AzureResourceEncryptionParameters) o;
    return Objects.equals(this.encryptionKeyUrl, azureResourceEncryptionParameters.encryptionKeyUrl) &&
        Objects.equals(this.encryptionKeyResourceGroupName, azureResourceEncryptionParameters.encryptionKeyResourceGroupName) &&
        Objects.equals(this.diskEncryptionSetId, azureResourceEncryptionParameters.diskEncryptionSetId) &&
        Objects.equals(this.userManagedIdentity, azureResourceEncryptionParameters.userManagedIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptionKeyUrl, encryptionKeyResourceGroupName, diskEncryptionSetId, userManagedIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureResourceEncryptionParameters {\n");
    sb.append("    encryptionKeyUrl: ").append(toIndentedString(encryptionKeyUrl)).append("\n");
    sb.append("    encryptionKeyResourceGroupName: ").append(toIndentedString(encryptionKeyResourceGroupName)).append("\n");
    sb.append("    diskEncryptionSetId: ").append(toIndentedString(diskEncryptionSetId)).append("\n");
    sb.append("    userManagedIdentity: ").append(toIndentedString(userManagedIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `encryptionKeyUrl` to the URL query string
    if (getEncryptionKeyUrl() != null) {
      joiner.add(String.format("%sencryptionKeyUrl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEncryptionKeyUrl()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `encryptionKeyResourceGroupName` to the URL query string
    if (getEncryptionKeyResourceGroupName() != null) {
      joiner.add(String.format("%sencryptionKeyResourceGroupName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEncryptionKeyResourceGroupName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `diskEncryptionSetId` to the URL query string
    if (getDiskEncryptionSetId() != null) {
      joiner.add(String.format("%sdiskEncryptionSetId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDiskEncryptionSetId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `userManagedIdentity` to the URL query string
    if (getUserManagedIdentity() != null) {
      joiner.add(String.format("%suserManagedIdentity%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserManagedIdentity()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

