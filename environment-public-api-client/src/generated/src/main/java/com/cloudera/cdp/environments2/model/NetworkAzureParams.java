/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.cdp.environments2.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Azure network parameters.
 */
@JsonPropertyOrder({
  NetworkAzureParams.JSON_PROPERTY_NETWORK_ID,
  NetworkAzureParams.JSON_PROPERTY_RESOURCE_GROUP_NAME,
  NetworkAzureParams.JSON_PROPERTY_USE_PUBLIC_IP,
  NetworkAzureParams.JSON_PROPERTY_NETWORK_NAME,
  NetworkAzureParams.JSON_PROPERTY_DATABASE_PRIVATE_DNS_ZONE_ID,
  NetworkAzureParams.JSON_PROPERTY_AKS_PRIVATE_DNS_ZONE_ID,
  NetworkAzureParams.JSON_PROPERTY_ENABLE_OUTBOUND_LOAD_BALANCER,
  NetworkAzureParams.JSON_PROPERTY_FLEXIBLE_SERVER_SUBNET_IDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-02T16:36:31.330723+02:00[Europe/Budapest]", comments = "Generator version: 7.5.0")
public class NetworkAzureParams {
  public static final String JSON_PROPERTY_NETWORK_ID = "networkId";
  private String networkId;

  public static final String JSON_PROPERTY_RESOURCE_GROUP_NAME = "resourceGroupName";
  private String resourceGroupName;

  public static final String JSON_PROPERTY_USE_PUBLIC_IP = "usePublicIp";
  private Boolean usePublicIp;

  public static final String JSON_PROPERTY_NETWORK_NAME = "networkName";
  private String networkName;

  public static final String JSON_PROPERTY_DATABASE_PRIVATE_DNS_ZONE_ID = "databasePrivateDnsZoneId";
  private String databasePrivateDnsZoneId;

  public static final String JSON_PROPERTY_AKS_PRIVATE_DNS_ZONE_ID = "aksPrivateDnsZoneId";
  private String aksPrivateDnsZoneId;

  public static final String JSON_PROPERTY_ENABLE_OUTBOUND_LOAD_BALANCER = "enableOutboundLoadBalancer";
  private Boolean enableOutboundLoadBalancer;

  public static final String JSON_PROPERTY_FLEXIBLE_SERVER_SUBNET_IDS = "flexibleServerSubnetIds";
  private List<String> flexibleServerSubnetIds = new ArrayList<>();

  public NetworkAzureParams() { 
  }

  public NetworkAzureParams networkId(String networkId) {
    this.networkId = networkId;
    return this;
  }

   /**
   * The id of the Azure VNet.
   * @return networkId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NETWORK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNetworkId() {
    return networkId;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }


  public NetworkAzureParams resourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
    return this;
  }

   /**
   * The name of the resource group associated with the VNet.
   * @return resourceGroupName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESOURCE_GROUP_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getResourceGroupName() {
    return resourceGroupName;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_GROUP_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
  }


  public NetworkAzureParams usePublicIp(Boolean usePublicIp) {
    this.usePublicIp = usePublicIp;
    return this;
  }

   /**
   * Whether to associate public ip&#39;s to the resources within the network.
   * @return usePublicIp
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USE_PUBLIC_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getUsePublicIp() {
    return usePublicIp;
  }


  @JsonProperty(JSON_PROPERTY_USE_PUBLIC_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUsePublicIp(Boolean usePublicIp) {
    this.usePublicIp = usePublicIp;
  }


  public NetworkAzureParams networkName(String networkName) {
    this.networkName = networkName;
    return this;
  }

   /**
   * The name of the Azure VNet.
   * @return networkName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NETWORK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNetworkName() {
    return networkName;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkName(String networkName) {
    this.networkName = networkName;
  }


  public NetworkAzureParams databasePrivateDnsZoneId(String databasePrivateDnsZoneId) {
    this.databasePrivateDnsZoneId = databasePrivateDnsZoneId;
    return this;
  }

   /**
   * The full Azure resource ID of the existing Private DNS Zone used for Flexible Server and Single Server Databases.
   * @return databasePrivateDnsZoneId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATABASE_PRIVATE_DNS_ZONE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDatabasePrivateDnsZoneId() {
    return databasePrivateDnsZoneId;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE_PRIVATE_DNS_ZONE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatabasePrivateDnsZoneId(String databasePrivateDnsZoneId) {
    this.databasePrivateDnsZoneId = databasePrivateDnsZoneId;
  }


  public NetworkAzureParams aksPrivateDnsZoneId(String aksPrivateDnsZoneId) {
    this.aksPrivateDnsZoneId = aksPrivateDnsZoneId;
    return this;
  }

   /**
   * The full Azure resource ID of an existing Private DNS zone used for the AKS.
   * @return aksPrivateDnsZoneId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AKS_PRIVATE_DNS_ZONE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAksPrivateDnsZoneId() {
    return aksPrivateDnsZoneId;
  }


  @JsonProperty(JSON_PROPERTY_AKS_PRIVATE_DNS_ZONE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAksPrivateDnsZoneId(String aksPrivateDnsZoneId) {
    this.aksPrivateDnsZoneId = aksPrivateDnsZoneId;
  }


  public NetworkAzureParams enableOutboundLoadBalancer(Boolean enableOutboundLoadBalancer) {
    this.enableOutboundLoadBalancer = enableOutboundLoadBalancer;
    return this;
  }

   /**
   * Whether the outbound load balancer was created for this environment.
   * @return enableOutboundLoadBalancer
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_OUTBOUND_LOAD_BALANCER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableOutboundLoadBalancer() {
    return enableOutboundLoadBalancer;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_OUTBOUND_LOAD_BALANCER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableOutboundLoadBalancer(Boolean enableOutboundLoadBalancer) {
    this.enableOutboundLoadBalancer = enableOutboundLoadBalancer;
  }


  public NetworkAzureParams flexibleServerSubnetIds(List<String> flexibleServerSubnetIds) {
    this.flexibleServerSubnetIds = flexibleServerSubnetIds;
    return this;
  }

  public NetworkAzureParams addFlexibleServerSubnetIdsItem(String flexibleServerSubnetIdsItem) {
    if (this.flexibleServerSubnetIds == null) {
      this.flexibleServerSubnetIds = new ArrayList<>();
    }
    this.flexibleServerSubnetIds.add(flexibleServerSubnetIdsItem);
    return this;
  }

   /**
   * The subnets delegated for Flexible Server database. Accepts either the name or the full resource id.
   * @return flexibleServerSubnetIds
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FLEXIBLE_SERVER_SUBNET_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getFlexibleServerSubnetIds() {
    return flexibleServerSubnetIds;
  }


  @JsonProperty(JSON_PROPERTY_FLEXIBLE_SERVER_SUBNET_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFlexibleServerSubnetIds(List<String> flexibleServerSubnetIds) {
    this.flexibleServerSubnetIds = flexibleServerSubnetIds;
  }


  /**
   * Return true if this NetworkAzureParams object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkAzureParams networkAzureParams = (NetworkAzureParams) o;
    return Objects.equals(this.networkId, networkAzureParams.networkId) &&
        Objects.equals(this.resourceGroupName, networkAzureParams.resourceGroupName) &&
        Objects.equals(this.usePublicIp, networkAzureParams.usePublicIp) &&
        Objects.equals(this.networkName, networkAzureParams.networkName) &&
        Objects.equals(this.databasePrivateDnsZoneId, networkAzureParams.databasePrivateDnsZoneId) &&
        Objects.equals(this.aksPrivateDnsZoneId, networkAzureParams.aksPrivateDnsZoneId) &&
        Objects.equals(this.enableOutboundLoadBalancer, networkAzureParams.enableOutboundLoadBalancer) &&
        Objects.equals(this.flexibleServerSubnetIds, networkAzureParams.flexibleServerSubnetIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkId, resourceGroupName, usePublicIp, networkName, databasePrivateDnsZoneId, aksPrivateDnsZoneId, enableOutboundLoadBalancer, flexibleServerSubnetIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkAzureParams {\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    resourceGroupName: ").append(toIndentedString(resourceGroupName)).append("\n");
    sb.append("    usePublicIp: ").append(toIndentedString(usePublicIp)).append("\n");
    sb.append("    networkName: ").append(toIndentedString(networkName)).append("\n");
    sb.append("    databasePrivateDnsZoneId: ").append(toIndentedString(databasePrivateDnsZoneId)).append("\n");
    sb.append("    aksPrivateDnsZoneId: ").append(toIndentedString(aksPrivateDnsZoneId)).append("\n");
    sb.append("    enableOutboundLoadBalancer: ").append(toIndentedString(enableOutboundLoadBalancer)).append("\n");
    sb.append("    flexibleServerSubnetIds: ").append(toIndentedString(flexibleServerSubnetIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `networkId` to the URL query string
    if (getNetworkId() != null) {
      joiner.add(String.format("%snetworkId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNetworkId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `resourceGroupName` to the URL query string
    if (getResourceGroupName() != null) {
      joiner.add(String.format("%sresourceGroupName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResourceGroupName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `usePublicIp` to the URL query string
    if (getUsePublicIp() != null) {
      joiner.add(String.format("%susePublicIp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUsePublicIp()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `networkName` to the URL query string
    if (getNetworkName() != null) {
      joiner.add(String.format("%snetworkName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNetworkName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `databasePrivateDnsZoneId` to the URL query string
    if (getDatabasePrivateDnsZoneId() != null) {
      joiner.add(String.format("%sdatabasePrivateDnsZoneId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDatabasePrivateDnsZoneId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `aksPrivateDnsZoneId` to the URL query string
    if (getAksPrivateDnsZoneId() != null) {
      joiner.add(String.format("%saksPrivateDnsZoneId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAksPrivateDnsZoneId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `enableOutboundLoadBalancer` to the URL query string
    if (getEnableOutboundLoadBalancer() != null) {
      joiner.add(String.format("%senableOutboundLoadBalancer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnableOutboundLoadBalancer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `flexibleServerSubnetIds` to the URL query string
    if (getFlexibleServerSubnetIds() != null) {
      for (int i = 0; i < getFlexibleServerSubnetIds().size(); i++) {
        joiner.add(String.format("%sflexibleServerSubnetIds%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getFlexibleServerSubnetIds().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

