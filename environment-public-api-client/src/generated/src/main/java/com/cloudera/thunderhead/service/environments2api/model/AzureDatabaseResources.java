/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Object containing details of database resources for Azure cloud.
 */
@JsonPropertyOrder({
  AzureDatabaseResources.JSON_PROPERTY_DATABASE_PRIVATE_DNS_ZONE_ID,
  AzureDatabaseResources.JSON_PROPERTY_FLEXIBLE_SERVER_SUBNET_IDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class AzureDatabaseResources {
  public static final String JSON_PROPERTY_DATABASE_PRIVATE_DNS_ZONE_ID = "databasePrivateDnsZoneId";
  private String databasePrivateDnsZoneId;

  public static final String JSON_PROPERTY_FLEXIBLE_SERVER_SUBNET_IDS = "flexibleServerSubnetIds";
  private List<String> flexibleServerSubnetIds = new ArrayList<>();

  public AzureDatabaseResources() { 
  }

  public AzureDatabaseResources databasePrivateDnsZoneId(String databasePrivateDnsZoneId) {
    this.databasePrivateDnsZoneId = databasePrivateDnsZoneId;
    return this;
  }

   /**
   * The full Azure resource ID of the existing Private DNS Zone used for Flexible Server and Single Server Databases.
   * @return databasePrivateDnsZoneId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATABASE_PRIVATE_DNS_ZONE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDatabasePrivateDnsZoneId() {
    return databasePrivateDnsZoneId;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE_PRIVATE_DNS_ZONE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatabasePrivateDnsZoneId(String databasePrivateDnsZoneId) {
    this.databasePrivateDnsZoneId = databasePrivateDnsZoneId;
  }


  public AzureDatabaseResources flexibleServerSubnetIds(List<String> flexibleServerSubnetIds) {
    this.flexibleServerSubnetIds = flexibleServerSubnetIds;
    return this;
  }

  public AzureDatabaseResources addFlexibleServerSubnetIdsItem(String flexibleServerSubnetIdsItem) {
    if (this.flexibleServerSubnetIds == null) {
      this.flexibleServerSubnetIds = new ArrayList<>();
    }
    this.flexibleServerSubnetIds.add(flexibleServerSubnetIdsItem);
    return this;
  }

   /**
   * The subnets delegated for Flexible Server database. Accepts either the name or the full resource id.
   * @return flexibleServerSubnetIds
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FLEXIBLE_SERVER_SUBNET_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getFlexibleServerSubnetIds() {
    return flexibleServerSubnetIds;
  }


  @JsonProperty(JSON_PROPERTY_FLEXIBLE_SERVER_SUBNET_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFlexibleServerSubnetIds(List<String> flexibleServerSubnetIds) {
    this.flexibleServerSubnetIds = flexibleServerSubnetIds;
  }


  /**
   * Return true if this AzureDatabaseResources object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureDatabaseResources azureDatabaseResources = (AzureDatabaseResources) o;
    return Objects.equals(this.databasePrivateDnsZoneId, azureDatabaseResources.databasePrivateDnsZoneId) &&
        Objects.equals(this.flexibleServerSubnetIds, azureDatabaseResources.flexibleServerSubnetIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databasePrivateDnsZoneId, flexibleServerSubnetIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureDatabaseResources {\n");
    sb.append("    databasePrivateDnsZoneId: ").append(toIndentedString(databasePrivateDnsZoneId)).append("\n");
    sb.append("    flexibleServerSubnetIds: ").append(toIndentedString(flexibleServerSubnetIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `databasePrivateDnsZoneId` to the URL query string
    if (getDatabasePrivateDnsZoneId() != null) {
      joiner.add(String.format("%sdatabasePrivateDnsZoneId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDatabasePrivateDnsZoneId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `flexibleServerSubnetIds` to the URL query string
    if (getFlexibleServerSubnetIds() != null) {
      for (int i = 0; i < getFlexibleServerSubnetIds().size(); i++) {
        joiner.add(String.format("%sflexibleServerSubnetIds%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getFlexibleServerSubnetIds().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

