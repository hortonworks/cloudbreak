/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Request object to check connectivity to private cloud environment.
 */
@JsonPropertyOrder({
  CheckEnvironmentConnectivityRequest.JSON_PROPERTY_ADDRESS,
  CheckEnvironmentConnectivityRequest.JSON_PROPERTY_USER,
  CheckEnvironmentConnectivityRequest.JSON_PROPERTY_AUTHENTICATION_TOKEN,
  CheckEnvironmentConnectivityRequest.JSON_PROPERTY_AUTHENTICATION_TOKEN_TYPE,
  CheckEnvironmentConnectivityRequest.JSON_PROPERTY_CLUSTER_NAMES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class CheckEnvironmentConnectivityRequest {
  public static final String JSON_PROPERTY_ADDRESS = "address";
  private String address;

  public static final String JSON_PROPERTY_USER = "user";
  private String user;

  public static final String JSON_PROPERTY_AUTHENTICATION_TOKEN = "authenticationToken";
  private String authenticationToken;

  /**
   * How to interpret the authenticationToken field. Defaults to CLEARTEXT_PASSWORD.
   */
  public enum AuthenticationTokenTypeEnum {
    CLEARTEXT_PASSWORD("CLEARTEXT_PASSWORD");

    private String value;

    AuthenticationTokenTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AuthenticationTokenTypeEnum fromValue(String value) {
      for (AuthenticationTokenTypeEnum b : AuthenticationTokenTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AUTHENTICATION_TOKEN_TYPE = "authenticationTokenType";
  private AuthenticationTokenTypeEnum authenticationTokenType;

  public static final String JSON_PROPERTY_CLUSTER_NAMES = "clusterNames";
  private List<String> clusterNames = new ArrayList<>();

  public CheckEnvironmentConnectivityRequest() { 
  }

  public CheckEnvironmentConnectivityRequest address(String address) {
    this.address = address;
    return this;
  }

   /**
   * The address of the Cloudera Manager managing the Datalake cluster.
   * @return address
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAddress(String address) {
    this.address = address;
  }


  public CheckEnvironmentConnectivityRequest user(String user) {
    this.user = user;
    return this;
  }

   /**
   * User name for accessing the Cloudera Manager.
   * @return user
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUser(String user) {
    this.user = user;
  }


  public CheckEnvironmentConnectivityRequest authenticationToken(String authenticationToken) {
    this.authenticationToken = authenticationToken;
    return this;
  }

   /**
   * A string (text or json) used to authenticate to the Cloudera Manager.
   * @return authenticationToken
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAuthenticationToken() {
    return authenticationToken;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAuthenticationToken(String authenticationToken) {
    this.authenticationToken = authenticationToken;
  }


  public CheckEnvironmentConnectivityRequest authenticationTokenType(AuthenticationTokenTypeEnum authenticationTokenType) {
    this.authenticationTokenType = authenticationTokenType;
    return this;
  }

   /**
   * How to interpret the authenticationToken field. Defaults to CLEARTEXT_PASSWORD.
   * @return authenticationTokenType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TOKEN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AuthenticationTokenTypeEnum getAuthenticationTokenType() {
    return authenticationTokenType;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TOKEN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthenticationTokenType(AuthenticationTokenTypeEnum authenticationTokenType) {
    this.authenticationTokenType = authenticationTokenType;
  }


  public CheckEnvironmentConnectivityRequest clusterNames(List<String> clusterNames) {
    this.clusterNames = clusterNames;
    return this;
  }

  public CheckEnvironmentConnectivityRequest addClusterNamesItem(String clusterNamesItem) {
    if (this.clusterNames == null) {
      this.clusterNames = new ArrayList<>();
    }
    this.clusterNames.add(clusterNamesItem);
    return this;
  }

   /**
   * The name of the cluster(s) to use as a Datalake for the environment.
   * @return clusterNames
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLUSTER_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getClusterNames() {
    return clusterNames;
  }


  @JsonProperty(JSON_PROPERTY_CLUSTER_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClusterNames(List<String> clusterNames) {
    this.clusterNames = clusterNames;
  }


  /**
   * Return true if this CheckEnvironmentConnectivityRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckEnvironmentConnectivityRequest checkEnvironmentConnectivityRequest = (CheckEnvironmentConnectivityRequest) o;
    return Objects.equals(this.address, checkEnvironmentConnectivityRequest.address) &&
        Objects.equals(this.user, checkEnvironmentConnectivityRequest.user) &&
        Objects.equals(this.authenticationToken, checkEnvironmentConnectivityRequest.authenticationToken) &&
        Objects.equals(this.authenticationTokenType, checkEnvironmentConnectivityRequest.authenticationTokenType) &&
        Objects.equals(this.clusterNames, checkEnvironmentConnectivityRequest.clusterNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, user, authenticationToken, authenticationTokenType, clusterNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckEnvironmentConnectivityRequest {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    authenticationToken: ").append(toIndentedString(authenticationToken)).append("\n");
    sb.append("    authenticationTokenType: ").append(toIndentedString(authenticationTokenType)).append("\n");
    sb.append("    clusterNames: ").append(toIndentedString(clusterNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `address` to the URL query string
    if (getAddress() != null) {
      joiner.add(String.format("%saddress%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `user` to the URL query string
    if (getUser() != null) {
      joiner.add(String.format("%suser%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUser()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `authenticationToken` to the URL query string
    if (getAuthenticationToken() != null) {
      joiner.add(String.format("%sauthenticationToken%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAuthenticationToken()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `authenticationTokenType` to the URL query string
    if (getAuthenticationTokenType() != null) {
      joiner.add(String.format("%sauthenticationTokenType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAuthenticationTokenType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `clusterNames` to the URL query string
    if (getClusterNames() != null) {
      for (int i = 0; i < getClusterNames().size(); i++) {
        joiner.add(String.format("%sclusterNames%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getClusterNames().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

