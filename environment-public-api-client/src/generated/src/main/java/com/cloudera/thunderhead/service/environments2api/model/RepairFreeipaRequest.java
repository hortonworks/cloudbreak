/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Request object for repairing the FreeIPA servers.
 */
@JsonPropertyOrder({
  RepairFreeipaRequest.JSON_PROPERTY_ENVIRONMENT_NAME,
  RepairFreeipaRequest.JSON_PROPERTY_FORCE,
  RepairFreeipaRequest.JSON_PROPERTY_INSTANCES,
  RepairFreeipaRequest.JSON_PROPERTY_REPAIR_TYPE
})

public class RepairFreeipaRequest {
  public static final String JSON_PROPERTY_ENVIRONMENT_NAME = "environmentName";
  @javax.annotation.Nonnull
  private String environmentName;

  public static final String JSON_PROPERTY_FORCE = "force";
  @javax.annotation.Nullable
  private Boolean force = false;

  public static final String JSON_PROPERTY_INSTANCES = "instances";
  @javax.annotation.Nullable
  private List<String> instances = new ArrayList<>();

  /**
   * The type of FreeIPA repair to perform. * AUTO - Currently, this is the same as reboot but this may change in the future. * REBOOT - Repair the failed instances by rebooting them. * REBUILD - Repair the failed instances by deleting them and creating new instances, then replicate data from an existing instance to the new instances.
   */
  public enum RepairTypeEnum {
    AUTO(String.valueOf("AUTO")),
    
    REBOOT(String.valueOf("REBOOT")),
    
    REBUILD(String.valueOf("REBUILD"));

    private String value;

    RepairTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RepairTypeEnum fromValue(String value) {
      for (RepairTypeEnum b : RepairTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REPAIR_TYPE = "repairType";
  @javax.annotation.Nullable
  private RepairTypeEnum repairType;

  public RepairFreeipaRequest() {
  }

  public RepairFreeipaRequest environmentName(@javax.annotation.Nonnull String environmentName) {
    
    this.environmentName = environmentName;
    return this;
  }

  /**
   * The environment name or CRN of the FreeIPA to repair
   * @return environmentName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENVIRONMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEnvironmentName() {
    return environmentName;
  }


  @JsonProperty(JSON_PROPERTY_ENVIRONMENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnvironmentName(@javax.annotation.Nonnull String environmentName) {
    this.environmentName = environmentName;
  }

  public RepairFreeipaRequest force(@javax.annotation.Nullable Boolean force) {
    
    this.force = force;
    return this;
  }

  /**
   * Force the repair even if the status if the FreeIPA nodes are good.
   * @return force
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getForce() {
    return force;
  }


  @JsonProperty(JSON_PROPERTY_FORCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForce(@javax.annotation.Nullable Boolean force) {
    this.force = force;
  }

  public RepairFreeipaRequest instances(@javax.annotation.Nullable List<String> instances) {
    
    this.instances = instances;
    return this;
  }

  public RepairFreeipaRequest addInstancesItem(String instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

  /**
   * The instance Ids to repair. If not provided then all instances are looked at for repair.
   * @return instances
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getInstances() {
    return instances;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstances(@javax.annotation.Nullable List<String> instances) {
    this.instances = instances;
  }

  public RepairFreeipaRequest repairType(@javax.annotation.Nullable RepairTypeEnum repairType) {
    
    this.repairType = repairType;
    return this;
  }

  /**
   * The type of FreeIPA repair to perform. * AUTO - Currently, this is the same as reboot but this may change in the future. * REBOOT - Repair the failed instances by rebooting them. * REBUILD - Repair the failed instances by deleting them and creating new instances, then replicate data from an existing instance to the new instances.
   * @return repairType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPAIR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RepairTypeEnum getRepairType() {
    return repairType;
  }


  @JsonProperty(JSON_PROPERTY_REPAIR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepairType(@javax.annotation.Nullable RepairTypeEnum repairType) {
    this.repairType = repairType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepairFreeipaRequest repairFreeipaRequest = (RepairFreeipaRequest) o;
    return Objects.equals(this.environmentName, repairFreeipaRequest.environmentName) &&
        Objects.equals(this.force, repairFreeipaRequest.force) &&
        Objects.equals(this.instances, repairFreeipaRequest.instances) &&
        Objects.equals(this.repairType, repairFreeipaRequest.repairType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environmentName, force, instances, repairType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepairFreeipaRequest {\n");
    sb.append("    environmentName: ").append(toIndentedString(environmentName)).append("\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    repairType: ").append(toIndentedString(repairType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

