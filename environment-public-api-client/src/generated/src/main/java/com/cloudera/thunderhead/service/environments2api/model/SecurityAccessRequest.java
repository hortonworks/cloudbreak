/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Security control configuration for FreeIPA and Datalake deployment. Choosing a CIDR will automatically create security groups. Alternatively existing security groups can be specified.
 */
@JsonPropertyOrder({
  SecurityAccessRequest.JSON_PROPERTY_CIDR,
  SecurityAccessRequest.JSON_PROPERTY_SECURITY_GROUP_ID_FOR_KNOX,
  SecurityAccessRequest.JSON_PROPERTY_DEFAULT_SECURITY_GROUP_ID,
  SecurityAccessRequest.JSON_PROPERTY_SECURITY_GROUP_I_DS_FOR_KNOX,
  SecurityAccessRequest.JSON_PROPERTY_DEFAULT_SECURITY_GROUP_I_DS
})

public class SecurityAccessRequest {
  public static final String JSON_PROPERTY_CIDR = "cidr";
  @javax.annotation.Nullable
  private String cidr;

  public static final String JSON_PROPERTY_SECURITY_GROUP_ID_FOR_KNOX = "securityGroupIdForKnox";
  @javax.annotation.Nullable
  private String securityGroupIdForKnox;

  public static final String JSON_PROPERTY_DEFAULT_SECURITY_GROUP_ID = "defaultSecurityGroupId";
  @javax.annotation.Nullable
  private String defaultSecurityGroupId;

  public static final String JSON_PROPERTY_SECURITY_GROUP_I_DS_FOR_KNOX = "securityGroupIDsForKnox";
  @javax.annotation.Nullable
  private Set<String> securityGroupIDsForKnox = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_DEFAULT_SECURITY_GROUP_I_DS = "defaultSecurityGroupIDs";
  @javax.annotation.Nullable
  private Set<String> defaultSecurityGroupIDs = new LinkedHashSet<>();

  public SecurityAccessRequest() {
  }

  public SecurityAccessRequest cidr(@javax.annotation.Nullable String cidr) {
    
    this.cidr = cidr;
    return this;
  }

  /**
   * CIDR range which is allowed for inbound traffic. Either IPv4 or IPv6 is allowed.
   * @return cidr
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CIDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCidr() {
    return cidr;
  }


  @JsonProperty(JSON_PROPERTY_CIDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCidr(@javax.annotation.Nullable String cidr) {
    this.cidr = cidr;
  }

  public SecurityAccessRequest securityGroupIdForKnox(@javax.annotation.Nullable String securityGroupIdForKnox) {
    
    this.securityGroupIdForKnox = securityGroupIdForKnox;
    return this;
  }

  /**
   * Security group where Knox-enabled hosts are placed. Mutually exclusive with cidr.
   * @return securityGroupIdForKnox
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY_GROUP_ID_FOR_KNOX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecurityGroupIdForKnox() {
    return securityGroupIdForKnox;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY_GROUP_ID_FOR_KNOX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurityGroupIdForKnox(@javax.annotation.Nullable String securityGroupIdForKnox) {
    this.securityGroupIdForKnox = securityGroupIdForKnox;
  }

  public SecurityAccessRequest defaultSecurityGroupId(@javax.annotation.Nullable String defaultSecurityGroupId) {
    
    this.defaultSecurityGroupId = defaultSecurityGroupId;
    return this;
  }

  /**
   * Security group where all other hosts are placed. Mutually exclusive with cidr.
   * @return defaultSecurityGroupId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_SECURITY_GROUP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultSecurityGroupId() {
    return defaultSecurityGroupId;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_SECURITY_GROUP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultSecurityGroupId(@javax.annotation.Nullable String defaultSecurityGroupId) {
    this.defaultSecurityGroupId = defaultSecurityGroupId;
  }

  public SecurityAccessRequest securityGroupIDsForKnox(@javax.annotation.Nullable Set<String> securityGroupIDsForKnox) {
    
    this.securityGroupIDsForKnox = securityGroupIDsForKnox;
    return this;
  }

  public SecurityAccessRequest addSecurityGroupIDsForKnoxItem(String securityGroupIDsForKnoxItem) {
    if (this.securityGroupIDsForKnox == null) {
      this.securityGroupIDsForKnox = new LinkedHashSet<>();
    }
    this.securityGroupIDsForKnox.add(securityGroupIDsForKnoxItem);
    return this;
  }

  /**
   * Security group IDs where Knox-enabled hosts are placed. Mutually exclusive with CIDR.
   * @return securityGroupIDsForKnox
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY_GROUP_I_DS_FOR_KNOX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getSecurityGroupIDsForKnox() {
    return securityGroupIDsForKnox;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_SECURITY_GROUP_I_DS_FOR_KNOX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurityGroupIDsForKnox(@javax.annotation.Nullable Set<String> securityGroupIDsForKnox) {
    this.securityGroupIDsForKnox = securityGroupIDsForKnox;
  }

  public SecurityAccessRequest defaultSecurityGroupIDs(@javax.annotation.Nullable Set<String> defaultSecurityGroupIDs) {
    
    this.defaultSecurityGroupIDs = defaultSecurityGroupIDs;
    return this;
  }

  public SecurityAccessRequest addDefaultSecurityGroupIDsItem(String defaultSecurityGroupIDsItem) {
    if (this.defaultSecurityGroupIDs == null) {
      this.defaultSecurityGroupIDs = new LinkedHashSet<>();
    }
    this.defaultSecurityGroupIDs.add(defaultSecurityGroupIDsItem);
    return this;
  }

  /**
   * Security group IDs where all other hosts are placed. Mutually exclusive with CIDR.
   * @return defaultSecurityGroupIDs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_SECURITY_GROUP_I_DS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getDefaultSecurityGroupIDs() {
    return defaultSecurityGroupIDs;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_DEFAULT_SECURITY_GROUP_I_DS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultSecurityGroupIDs(@javax.annotation.Nullable Set<String> defaultSecurityGroupIDs) {
    this.defaultSecurityGroupIDs = defaultSecurityGroupIDs;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityAccessRequest securityAccessRequest = (SecurityAccessRequest) o;
    return Objects.equals(this.cidr, securityAccessRequest.cidr) &&
        Objects.equals(this.securityGroupIdForKnox, securityAccessRequest.securityGroupIdForKnox) &&
        Objects.equals(this.defaultSecurityGroupId, securityAccessRequest.defaultSecurityGroupId) &&
        Objects.equals(this.securityGroupIDsForKnox, securityAccessRequest.securityGroupIDsForKnox) &&
        Objects.equals(this.defaultSecurityGroupIDs, securityAccessRequest.defaultSecurityGroupIDs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cidr, securityGroupIdForKnox, defaultSecurityGroupId, securityGroupIDsForKnox, defaultSecurityGroupIDs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityAccessRequest {\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    securityGroupIdForKnox: ").append(toIndentedString(securityGroupIdForKnox)).append("\n");
    sb.append("    defaultSecurityGroupId: ").append(toIndentedString(defaultSecurityGroupId)).append("\n");
    sb.append("    securityGroupIDsForKnox: ").append(toIndentedString(securityGroupIDsForKnox)).append("\n");
    sb.append("    defaultSecurityGroupIDs: ").append(toIndentedString(defaultSecurityGroupIDs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

