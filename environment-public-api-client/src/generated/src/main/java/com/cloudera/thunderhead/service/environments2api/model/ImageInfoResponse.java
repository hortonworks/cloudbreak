/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Information about FreeIPA image.
 */
@JsonPropertyOrder({
  ImageInfoResponse.JSON_PROPERTY_CATALOG,
  ImageInfoResponse.JSON_PROPERTY_ID,
  ImageInfoResponse.JSON_PROPERTY_OS,
  ImageInfoResponse.JSON_PROPERTY_IMAGE_NAME,
  ImageInfoResponse.JSON_PROPERTY_DATE,
  ImageInfoResponse.JSON_PROPERTY_CATALOG_NAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class ImageInfoResponse {
  public static final String JSON_PROPERTY_CATALOG = "catalog";
  private String catalog;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_OS = "os";
  private String os;

  public static final String JSON_PROPERTY_IMAGE_NAME = "imageName";
  private String imageName;

  public static final String JSON_PROPERTY_DATE = "date";
  private String date;

  public static final String JSON_PROPERTY_CATALOG_NAME = "catalogName";
  private String catalogName;

  public ImageInfoResponse() {
  }

  public ImageInfoResponse catalog(String catalog) {
    
    this.catalog = catalog;
    return this;
  }

   /**
   * Image catalog URL.
   * @return catalog
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATALOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCatalog() {
    return catalog;
  }


  @JsonProperty(JSON_PROPERTY_CATALOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCatalog(String catalog) {
    this.catalog = catalog;
  }


  public ImageInfoResponse id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Virtual machine image ID from ImageCatalog, machines of the cluster will be started from this image.
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public ImageInfoResponse os(String os) {
    
    this.os = os;
    return this;
  }

   /**
   * OS type of the image, this property is only considered when no specific image ID is provided.
   * @return os
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOs() {
    return os;
  }


  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOs(String os) {
    this.os = os;
  }


  public ImageInfoResponse imageName(String imageName) {
    
    this.imageName = imageName;
    return this;
  }

   /**
   * Image name
   * @return imageName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImageName() {
    return imageName;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageName(String imageName) {
    this.imageName = imageName;
  }


  public ImageInfoResponse date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * Creation date of the image from catalog.
   * @return date
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(String date) {
    this.date = date;
  }


  public ImageInfoResponse catalogName(String catalogName) {
    
    this.catalogName = catalogName;
    return this;
  }

   /**
   * Image catalog name.
   * @return catalogName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATALOG_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCatalogName() {
    return catalogName;
  }


  @JsonProperty(JSON_PROPERTY_CATALOG_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCatalogName(String catalogName) {
    this.catalogName = catalogName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageInfoResponse imageInfoResponse = (ImageInfoResponse) o;
    return Objects.equals(this.catalog, imageInfoResponse.catalog) &&
        Objects.equals(this.id, imageInfoResponse.id) &&
        Objects.equals(this.os, imageInfoResponse.os) &&
        Objects.equals(this.imageName, imageInfoResponse.imageName) &&
        Objects.equals(this.date, imageInfoResponse.date) &&
        Objects.equals(this.catalogName, imageInfoResponse.catalogName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalog, id, os, imageName, date, catalogName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageInfoResponse {\n");
    sb.append("    catalog: ").append(toIndentedString(catalog)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    catalogName: ").append(toIndentedString(catalogName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

