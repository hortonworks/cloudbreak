/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Azure-specific log storage configuration information.
 */
@JsonPropertyOrder({
  LogStorageAzureDetails.JSON_PROPERTY_STORAGE_LOCATION_BASE,
  LogStorageAzureDetails.JSON_PROPERTY_MANAGED_IDENTITY
})
@JsonTypeName("LogStorage_azureDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class LogStorageAzureDetails {
  public static final String JSON_PROPERTY_STORAGE_LOCATION_BASE = "storageLocationBase";
  private String storageLocationBase;

  public static final String JSON_PROPERTY_MANAGED_IDENTITY = "managedIdentity";
  private String managedIdentity;

  public LogStorageAzureDetails() {
  }

  public LogStorageAzureDetails storageLocationBase(String storageLocationBase) {
    
    this.storageLocationBase = storageLocationBase;
    return this;
  }

   /**
   * The storage location to use. The location has to be in the following format abfs://filesystem@storage-account-name.dfs.core.windows.net.
   * @return storageLocationBase
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STORAGE_LOCATION_BASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStorageLocationBase() {
    return storageLocationBase;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_LOCATION_BASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorageLocationBase(String storageLocationBase) {
    this.storageLocationBase = storageLocationBase;
  }


  public LogStorageAzureDetails managedIdentity(String managedIdentity) {
    
    this.managedIdentity = managedIdentity;
    return this;
  }

   /**
   * The managed identity associated with the logger. This identity should have Storage Blob Data Contributor role on the given storage account.
   * @return managedIdentity
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MANAGED_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getManagedIdentity() {
    return managedIdentity;
  }


  @JsonProperty(JSON_PROPERTY_MANAGED_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManagedIdentity(String managedIdentity) {
    this.managedIdentity = managedIdentity;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogStorageAzureDetails logStorageAzureDetails = (LogStorageAzureDetails) o;
    return Objects.equals(this.storageLocationBase, logStorageAzureDetails.storageLocationBase) &&
        Objects.equals(this.managedIdentity, logStorageAzureDetails.managedIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storageLocationBase, managedIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogStorageAzureDetails {\n");
    sb.append("    storageLocationBase: ").append(toIndentedString(storageLocationBase)).append("\n");
    sb.append("    managedIdentity: ").append(toIndentedString(managedIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

