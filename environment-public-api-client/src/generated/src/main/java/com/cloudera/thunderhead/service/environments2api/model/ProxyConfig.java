/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A proxy config object.
 */
@JsonPropertyOrder({
  ProxyConfig.JSON_PROPERTY_PROXY_CONFIG_NAME,
  ProxyConfig.JSON_PROPERTY_CRN,
  ProxyConfig.JSON_PROPERTY_PROTOCOL,
  ProxyConfig.JSON_PROPERTY_HOST,
  ProxyConfig.JSON_PROPERTY_PORT,
  ProxyConfig.JSON_PROPERTY_DESCRIPTION,
  ProxyConfig.JSON_PROPERTY_NO_PROXY_HOSTS,
  ProxyConfig.JSON_PROPERTY_USER,
  ProxyConfig.JSON_PROPERTY_PASSWORD,
  ProxyConfig.JSON_PROPERTY_INBOUND_PROXY_CIDR
})

public class ProxyConfig {
  public static final String JSON_PROPERTY_PROXY_CONFIG_NAME = "proxyConfigName";
  @javax.annotation.Nonnull
  private String proxyConfigName;

  public static final String JSON_PROPERTY_CRN = "crn";
  @javax.annotation.Nonnull
  private String crn;

  public static final String JSON_PROPERTY_PROTOCOL = "protocol";
  @javax.annotation.Nonnull
  private String protocol;

  public static final String JSON_PROPERTY_HOST = "host";
  @javax.annotation.Nonnull
  private String host;

  public static final String JSON_PROPERTY_PORT = "port";
  @javax.annotation.Nonnull
  private Integer port;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_NO_PROXY_HOSTS = "noProxyHosts";
  @javax.annotation.Nullable
  private String noProxyHosts;

  public static final String JSON_PROPERTY_USER = "user";
  @javax.annotation.Nullable
  private String user;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  @javax.annotation.Nullable
  private String password;

  public static final String JSON_PROPERTY_INBOUND_PROXY_CIDR = "inboundProxyCidr";
  @javax.annotation.Nullable
  private List<String> inboundProxyCidr = new ArrayList<>();

  public ProxyConfig() {
  }

  public ProxyConfig proxyConfigName(@javax.annotation.Nonnull String proxyConfigName) {
    
    this.proxyConfigName = proxyConfigName;
    return this;
  }

  /**
   * The name of the proxy config.
   * @return proxyConfigName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROXY_CONFIG_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProxyConfigName() {
    return proxyConfigName;
  }


  @JsonProperty(JSON_PROPERTY_PROXY_CONFIG_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProxyConfigName(@javax.annotation.Nonnull String proxyConfigName) {
    this.proxyConfigName = proxyConfigName;
  }

  public ProxyConfig crn(@javax.annotation.Nonnull String crn) {
    
    this.crn = crn;
    return this;
  }

  /**
   * The CRN of the proxy config.
   * @return crn
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CRN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCrn() {
    return crn;
  }


  @JsonProperty(JSON_PROPERTY_CRN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCrn(@javax.annotation.Nonnull String crn) {
    this.crn = crn;
  }

  public ProxyConfig protocol(@javax.annotation.Nonnull String protocol) {
    
    this.protocol = protocol;
    return this;
  }

  /**
   * The protocol.
   * @return protocol
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProtocol(@javax.annotation.Nonnull String protocol) {
    this.protocol = protocol;
  }

  public ProxyConfig host(@javax.annotation.Nonnull String host) {
    
    this.host = host;
    return this;
  }

  /**
   * The proxy host.
   * @return host
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHost() {
    return host;
  }


  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHost(@javax.annotation.Nonnull String host) {
    this.host = host;
  }

  public ProxyConfig port(@javax.annotation.Nonnull Integer port) {
    
    this.port = port;
    return this;
  }

  /**
   * The proxy port.
   * @return port
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPort(@javax.annotation.Nonnull Integer port) {
    this.port = port;
  }

  public ProxyConfig description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * A description for the proxy config.
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public ProxyConfig noProxyHosts(@javax.annotation.Nullable String noProxyHosts) {
    
    this.noProxyHosts = noProxyHosts;
    return this;
  }

  /**
   * Comma-separated list of &#39;CIDR&#39;, &#39;[.]host[:port]&#39; (can be a subdomain as well) and &#39;IP[:port]&#39; entries that should not be proxied. Wildcards are not accepted. For example .cloudera.com,192.168.1.1
   * @return noProxyHosts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NO_PROXY_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNoProxyHosts() {
    return noProxyHosts;
  }


  @JsonProperty(JSON_PROPERTY_NO_PROXY_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNoProxyHosts(@javax.annotation.Nullable String noProxyHosts) {
    this.noProxyHosts = noProxyHosts;
  }

  public ProxyConfig user(@javax.annotation.Nullable String user) {
    
    this.user = user;
    return this;
  }

  /**
   * The proxy user.
   * @return user
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(@javax.annotation.Nullable String user) {
    this.user = user;
  }

  public ProxyConfig password(@javax.annotation.Nullable String password) {
    
    this.password = password;
    return this;
  }

  /**
   * The proxy password.
   * @return password
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }

  public ProxyConfig inboundProxyCidr(@javax.annotation.Nullable List<String> inboundProxyCidr) {
    
    this.inboundProxyCidr = inboundProxyCidr;
    return this;
  }

  public ProxyConfig addInboundProxyCidrItem(String inboundProxyCidrItem) {
    if (this.inboundProxyCidr == null) {
      this.inboundProxyCidr = new ArrayList<>();
    }
    this.inboundProxyCidr.add(inboundProxyCidrItem);
    return this;
  }

  /**
   * Allow these CIDR for Inbound communication.
   * @return inboundProxyCidr
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INBOUND_PROXY_CIDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getInboundProxyCidr() {
    return inboundProxyCidr;
  }


  @JsonProperty(JSON_PROPERTY_INBOUND_PROXY_CIDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInboundProxyCidr(@javax.annotation.Nullable List<String> inboundProxyCidr) {
    this.inboundProxyCidr = inboundProxyCidr;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProxyConfig proxyConfig = (ProxyConfig) o;
    return Objects.equals(this.proxyConfigName, proxyConfig.proxyConfigName) &&
        Objects.equals(this.crn, proxyConfig.crn) &&
        Objects.equals(this.protocol, proxyConfig.protocol) &&
        Objects.equals(this.host, proxyConfig.host) &&
        Objects.equals(this.port, proxyConfig.port) &&
        Objects.equals(this.description, proxyConfig.description) &&
        Objects.equals(this.noProxyHosts, proxyConfig.noProxyHosts) &&
        Objects.equals(this.user, proxyConfig.user) &&
        Objects.equals(this.password, proxyConfig.password) &&
        Objects.equals(this.inboundProxyCidr, proxyConfig.inboundProxyCidr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(proxyConfigName, crn, protocol, host, port, description, noProxyHosts, user, password, inboundProxyCidr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProxyConfig {\n");
    sb.append("    proxyConfigName: ").append(toIndentedString(proxyConfigName)).append("\n");
    sb.append("    crn: ").append(toIndentedString(crn)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    noProxyHosts: ").append(toIndentedString(noProxyHosts)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    inboundProxyCidr: ").append(toIndentedString(inboundProxyCidr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

