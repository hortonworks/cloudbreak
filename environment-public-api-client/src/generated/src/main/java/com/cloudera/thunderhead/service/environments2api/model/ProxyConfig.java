/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A proxy config object.
 */
@JsonPropertyOrder({
  ProxyConfig.JSON_PROPERTY_PROXY_CONFIG_NAME,
  ProxyConfig.JSON_PROPERTY_CRN,
  ProxyConfig.JSON_PROPERTY_PROTOCOL,
  ProxyConfig.JSON_PROPERTY_HOST,
  ProxyConfig.JSON_PROPERTY_PORT,
  ProxyConfig.JSON_PROPERTY_DESCRIPTION,
  ProxyConfig.JSON_PROPERTY_NO_PROXY_HOSTS,
  ProxyConfig.JSON_PROPERTY_USER,
  ProxyConfig.JSON_PROPERTY_PASSWORD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class ProxyConfig {
  public static final String JSON_PROPERTY_PROXY_CONFIG_NAME = "proxyConfigName";
  private String proxyConfigName;

  public static final String JSON_PROPERTY_CRN = "crn";
  private String crn;

  public static final String JSON_PROPERTY_PROTOCOL = "protocol";
  private String protocol;

  public static final String JSON_PROPERTY_HOST = "host";
  private String host;

  public static final String JSON_PROPERTY_PORT = "port";
  private Integer port;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_NO_PROXY_HOSTS = "noProxyHosts";
  private String noProxyHosts;

  public static final String JSON_PROPERTY_USER = "user";
  private String user;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public ProxyConfig() { 
  }

  public ProxyConfig proxyConfigName(String proxyConfigName) {
    this.proxyConfigName = proxyConfigName;
    return this;
  }

   /**
   * The name of the proxy config.
   * @return proxyConfigName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROXY_CONFIG_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProxyConfigName() {
    return proxyConfigName;
  }


  @JsonProperty(JSON_PROPERTY_PROXY_CONFIG_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProxyConfigName(String proxyConfigName) {
    this.proxyConfigName = proxyConfigName;
  }


  public ProxyConfig crn(String crn) {
    this.crn = crn;
    return this;
  }

   /**
   * The CRN of the proxy config.
   * @return crn
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CRN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCrn() {
    return crn;
  }


  @JsonProperty(JSON_PROPERTY_CRN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCrn(String crn) {
    this.crn = crn;
  }


  public ProxyConfig protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * The protocol.
   * @return protocol
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public ProxyConfig host(String host) {
    this.host = host;
    return this;
  }

   /**
   * The proxy host.
   * @return host
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHost() {
    return host;
  }


  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHost(String host) {
    this.host = host;
  }


  public ProxyConfig port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * The proxy port.
   * @return port
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPort(Integer port) {
    this.port = port;
  }


  public ProxyConfig description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description for the proxy config.
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public ProxyConfig noProxyHosts(String noProxyHosts) {
    this.noProxyHosts = noProxyHosts;
    return this;
  }

   /**
   * Comma-separated list of &#39;CIDR&#39;, &#39;[.]host[:port]&#39; (can be a subdomain as well) and &#39;IP[:port]&#39; entries that should not be proxied. Wildcards are not accepted. For example .cloudera.com,192.168.1.1
   * @return noProxyHosts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NO_PROXY_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNoProxyHosts() {
    return noProxyHosts;
  }


  @JsonProperty(JSON_PROPERTY_NO_PROXY_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNoProxyHosts(String noProxyHosts) {
    this.noProxyHosts = noProxyHosts;
  }


  public ProxyConfig user(String user) {
    this.user = user;
    return this;
  }

   /**
   * The proxy user.
   * @return user
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }


  public ProxyConfig password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The proxy password.
   * @return password
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(String password) {
    this.password = password;
  }


  /**
   * Return true if this ProxyConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProxyConfig proxyConfig = (ProxyConfig) o;
    return Objects.equals(this.proxyConfigName, proxyConfig.proxyConfigName) &&
        Objects.equals(this.crn, proxyConfig.crn) &&
        Objects.equals(this.protocol, proxyConfig.protocol) &&
        Objects.equals(this.host, proxyConfig.host) &&
        Objects.equals(this.port, proxyConfig.port) &&
        Objects.equals(this.description, proxyConfig.description) &&
        Objects.equals(this.noProxyHosts, proxyConfig.noProxyHosts) &&
        Objects.equals(this.user, proxyConfig.user) &&
        Objects.equals(this.password, proxyConfig.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(proxyConfigName, crn, protocol, host, port, description, noProxyHosts, user, password);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProxyConfig {\n");
    sb.append("    proxyConfigName: ").append(toIndentedString(proxyConfigName)).append("\n");
    sb.append("    crn: ").append(toIndentedString(crn)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    noProxyHosts: ").append(toIndentedString(noProxyHosts)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `proxyConfigName` to the URL query string
    if (getProxyConfigName() != null) {
      joiner.add(String.format("%sproxyConfigName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProxyConfigName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `crn` to the URL query string
    if (getCrn() != null) {
      joiner.add(String.format("%scrn%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCrn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `protocol` to the URL query string
    if (getProtocol() != null) {
      joiner.add(String.format("%sprotocol%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProtocol()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `host` to the URL query string
    if (getHost() != null) {
      joiner.add(String.format("%shost%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHost()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `port` to the URL query string
    if (getPort() != null) {
      joiner.add(String.format("%sport%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPort()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `noProxyHosts` to the URL query string
    if (getNoProxyHosts() != null) {
      joiner.add(String.format("%snoProxyHosts%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNoProxyHosts()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `user` to the URL query string
    if (getUser() != null) {
      joiner.add(String.format("%suser%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUser()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `password` to the URL query string
    if (getPassword() != null) {
      joiner.add(String.format("%spassword%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPassword()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

