/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.util.Objects;
import java.util.Arrays;
import com.cloudera.thunderhead.service.environments2api.model.ImageInfoResponse;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The response object with available FreeIPA upgrade candidates.
 */
@JsonPropertyOrder({
  GetFreeipaUpgradeOptionsResponse.JSON_PROPERTY_IMAGES,
  GetFreeipaUpgradeOptionsResponse.JSON_PROPERTY_CURRENT_IMAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class GetFreeipaUpgradeOptionsResponse {
  public static final String JSON_PROPERTY_IMAGES = "images";
  private List<ImageInfoResponse> images = new ArrayList<>();

  public static final String JSON_PROPERTY_CURRENT_IMAGE = "currentImage";
  private ImageInfoResponse currentImage;

  public GetFreeipaUpgradeOptionsResponse() {
  }

  public GetFreeipaUpgradeOptionsResponse images(List<ImageInfoResponse> images) {
    
    this.images = images;
    return this;
  }

  public GetFreeipaUpgradeOptionsResponse addImagesItem(ImageInfoResponse imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * The list of the upgrade candidates.
   * @return images
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ImageInfoResponse> getImages() {
    return images;
  }


  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImages(List<ImageInfoResponse> images) {
    this.images = images;
  }


  public GetFreeipaUpgradeOptionsResponse currentImage(ImageInfoResponse currentImage) {
    
    this.currentImage = currentImage;
    return this;
  }

   /**
   * Get currentImage
   * @return currentImage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImageInfoResponse getCurrentImage() {
    return currentImage;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentImage(ImageInfoResponse currentImage) {
    this.currentImage = currentImage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetFreeipaUpgradeOptionsResponse getFreeipaUpgradeOptionsResponse = (GetFreeipaUpgradeOptionsResponse) o;
    return Objects.equals(this.images, getFreeipaUpgradeOptionsResponse.images) &&
        Objects.equals(this.currentImage, getFreeipaUpgradeOptionsResponse.currentImage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(images, currentImage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetFreeipaUpgradeOptionsResponse {\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    currentImage: ").append(toIndentedString(currentImage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

