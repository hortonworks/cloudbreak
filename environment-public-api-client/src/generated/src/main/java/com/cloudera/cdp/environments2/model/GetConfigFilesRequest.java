/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.cdp.environments2.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Request object for Datalake client configs.
 */
@JsonPropertyOrder({
  GetConfigFilesRequest.JSON_PROPERTY_DATALAKE_CRN,
  GetConfigFilesRequest.JSON_PROPERTY_CONFIG_SET,
  GetConfigFilesRequest.JSON_PROPERTY_SERVICE_OVERRIDE_LIST,
  GetConfigFilesRequest.JSON_PROPERTY_ADDITIONAL_SERVICES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-02T16:36:31.330723+02:00[Europe/Budapest]", comments = "Generator version: 7.5.0")
public class GetConfigFilesRequest {
  public static final String JSON_PROPERTY_DATALAKE_CRN = "datalakeCrn";
  private String datalakeCrn;

  /**
   * config file set to retrieve.
   */
  public enum ConfigSetEnum {
    CLIENT("CLIENT"),
    
    KRB("KRB"),
    
    TRUSTSTORE_PEM("TRUSTSTORE_PEM"),
    
    TRUSTSTORE_JKS("TRUSTSTORE_JKS"),
    
    VAULT_TRUSTSTORE_PEM("VAULT_TRUSTSTORE_PEM"),
    
    VAULT_TRUSTSTORE_JKS("VAULT_TRUSTSTORE_JKS"),
    
    DATABASE_TRUSTSTORE_PEM("DATABASE_TRUSTSTORE_PEM"),
    
    DOCKER_TRUSTSTORE_PEM("DOCKER_TRUSTSTORE_PEM"),
    
    DWX_DB_HOST("DWX_DB_HOST"),
    
    DWX_DB_PORT("DWX_DB_PORT"),
    
    DWX_DB_NAME("DWX_DB_NAME"),
    
    DWX_DB_USERNAME("DWX_DB_USERNAME"),
    
    DWX_DB_PASSWORD("DWX_DB_PASSWORD");

    private String value;

    ConfigSetEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConfigSetEnum fromValue(String value) {
      for (ConfigSetEnum b : ConfigSetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONFIG_SET = "configSet";
  private ConfigSetEnum configSet;

  public static final String JSON_PROPERTY_SERVICE_OVERRIDE_LIST = "serviceOverrideList";
  private List<String> serviceOverrideList = new ArrayList<>();

  public static final String JSON_PROPERTY_ADDITIONAL_SERVICES = "additionalServices";
  private String additionalServices;

  public GetConfigFilesRequest() { 
  }

  public GetConfigFilesRequest datalakeCrn(String datalakeCrn) {
    this.datalakeCrn = datalakeCrn;
    return this;
  }

   /**
   * The CRN of the Datalake
   * @return datalakeCrn
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATALAKE_CRN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDatalakeCrn() {
    return datalakeCrn;
  }


  @JsonProperty(JSON_PROPERTY_DATALAKE_CRN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDatalakeCrn(String datalakeCrn) {
    this.datalakeCrn = datalakeCrn;
  }


  public GetConfigFilesRequest configSet(ConfigSetEnum configSet) {
    this.configSet = configSet;
    return this;
  }

   /**
   * config file set to retrieve.
   * @return configSet
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONFIG_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConfigSetEnum getConfigSet() {
    return configSet;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigSet(ConfigSetEnum configSet) {
    this.configSet = configSet;
  }


  public GetConfigFilesRequest serviceOverrideList(List<String> serviceOverrideList) {
    this.serviceOverrideList = serviceOverrideList;
    return this;
  }

  public GetConfigFilesRequest addServiceOverrideListItem(String serviceOverrideListItem) {
    if (this.serviceOverrideList == null) {
      this.serviceOverrideList = new ArrayList<>();
    }
    this.serviceOverrideList.add(serviceOverrideListItem);
    return this;
  }

   /**
   * The Datalakservices to collect client configs.
   * @return serviceOverrideList
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_OVERRIDE_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getServiceOverrideList() {
    return serviceOverrideList;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_OVERRIDE_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceOverrideList(List<String> serviceOverrideList) {
    this.serviceOverrideList = serviceOverrideList;
  }


  public GetConfigFilesRequest additionalServices(String additionalServices) {
    this.additionalServices = additionalServices;
    return this;
  }

   /**
   * A list of service types and role types to get their process configs. The input format must be \&quot;serviceType1,roleType1;serviceType2,roleType2\&quot;. Each service type and its role type maps to a process. Different service type and role type groups are separated by \&quot;;\&quot; and each service type and its associated role type is separated by \&quot;,\&quot;. The input is case sensitive. If the format is wrong or service is not found, exceptions will be thrown. If no roles are found for the service, no config files for that role and service will be returned. e.g. \&quot;HIVE,HIVESERVER2;HUE,HUE_SERVER\&quot;.
   * @return additionalServices
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_SERVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdditionalServices() {
    return additionalServices;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_SERVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalServices(String additionalServices) {
    this.additionalServices = additionalServices;
  }


  /**
   * Return true if this GetConfigFilesRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetConfigFilesRequest getConfigFilesRequest = (GetConfigFilesRequest) o;
    return Objects.equals(this.datalakeCrn, getConfigFilesRequest.datalakeCrn) &&
        Objects.equals(this.configSet, getConfigFilesRequest.configSet) &&
        Objects.equals(this.serviceOverrideList, getConfigFilesRequest.serviceOverrideList) &&
        Objects.equals(this.additionalServices, getConfigFilesRequest.additionalServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datalakeCrn, configSet, serviceOverrideList, additionalServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetConfigFilesRequest {\n");
    sb.append("    datalakeCrn: ").append(toIndentedString(datalakeCrn)).append("\n");
    sb.append("    configSet: ").append(toIndentedString(configSet)).append("\n");
    sb.append("    serviceOverrideList: ").append(toIndentedString(serviceOverrideList)).append("\n");
    sb.append("    additionalServices: ").append(toIndentedString(additionalServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `datalakeCrn` to the URL query string
    if (getDatalakeCrn() != null) {
      joiner.add(String.format("%sdatalakeCrn%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDatalakeCrn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `configSet` to the URL query string
    if (getConfigSet() != null) {
      joiner.add(String.format("%sconfigSet%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConfigSet()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `serviceOverrideList` to the URL query string
    if (getServiceOverrideList() != null) {
      for (int i = 0; i < getServiceOverrideList().size(); i++) {
        joiner.add(String.format("%sserviceOverrideList%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getServiceOverrideList().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `additionalServices` to the URL query string
    if (getAdditionalServices() != null) {
      joiner.add(String.format("%sadditionalServices%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAdditionalServices()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

