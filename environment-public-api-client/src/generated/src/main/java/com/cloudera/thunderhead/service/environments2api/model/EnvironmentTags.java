/*
 * Cloudera Environments Service
 * Cloudera Environments Service is a web service that manages cloud provider access.
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.thunderhead.service.environments2api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Environment tags object containing the tag values defined for the environment.
 */
@JsonPropertyOrder({
  EnvironmentTags.JSON_PROPERTY_USER_DEFINED,
  EnvironmentTags.JSON_PROPERTY_DEFAULTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class EnvironmentTags {
  public static final String JSON_PROPERTY_USER_DEFINED = "userDefined";
  private Map<String, String> userDefined = new HashMap<>();

  public static final String JSON_PROPERTY_DEFAULTS = "defaults";
  private Map<String, String> defaults = new HashMap<>();

  public EnvironmentTags() {
  }

  public EnvironmentTags userDefined(Map<String, String> userDefined) {
    
    this.userDefined = userDefined;
    return this;
  }

  public EnvironmentTags putUserDefinedItem(String key, String userDefinedItem) {
    if (this.userDefined == null) {
      this.userDefined = new HashMap<>();
    }
    this.userDefined.put(key, userDefinedItem);
    return this;
  }

   /**
   * Map of tag names to values, for user-defined tags.
   * @return userDefined
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_DEFINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getUserDefined() {
    return userDefined;
  }


  @JsonProperty(JSON_PROPERTY_USER_DEFINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserDefined(Map<String, String> userDefined) {
    this.userDefined = userDefined;
  }


  public EnvironmentTags defaults(Map<String, String> defaults) {
    
    this.defaults = defaults;
    return this;
  }

  public EnvironmentTags putDefaultsItem(String key, String defaultsItem) {
    if (this.defaults == null) {
      this.defaults = new HashMap<>();
    }
    this.defaults.put(key, defaultsItem);
    return this;
  }

   /**
   * Map of tag names to values, for default tags.
   * @return defaults
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getDefaults() {
    return defaults;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaults(Map<String, String> defaults) {
    this.defaults = defaults;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvironmentTags environmentTags = (EnvironmentTags) o;
    return Objects.equals(this.userDefined, environmentTags.userDefined) &&
        Objects.equals(this.defaults, environmentTags.defaults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userDefined, defaults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvironmentTags {\n");
    sb.append("    userDefined: ").append(toIndentedString(userDefined)).append("\n");
    sb.append("    defaults: ").append(toIndentedString(defaults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

