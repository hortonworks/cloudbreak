<?xml version="1.0" encoding="UTF-8"?>

{# If you update this file, please add the same changes into topology_api.xml.j2 too #}
{# They have to be the same except the authentication/federation provider they use #}

<topology>
    <name>{{ topology_name }}-token</name>
    <gateway>

        <provider>
           <role>federation</role>
           <name>JWTProvider</name>
           <enabled>true</enabled>
           <param>
               <name>knox.token.exp.server-managed</name>
               <value>true</value>
           </param>
           <param>
               <name>knox.token.audiences</name>
               <value>cdp-proxy-token</value>
           </param>
        </provider>

{%- if salt['pillar.get']('gateway:enable_knox_ranger_authorizer') == True -%}
    {% set aclsauthz_prefix = 'AclsAuthz.' %}
{%- else -%}
    {% set aclsauthz_prefix = '' %}
{%- endif -%}

{% if salt['pillar.get']('gateway:envAccessGroup') is defined and salt['pillar.get']('gateway:envAccessGroup') | length > 0 %}
        <provider>
            <role>identity-assertion</role>
            <name>HadoopGroupProvider</name>
            <enabled>true</enabled>
            <param>
                <name>CENTRAL_GROUP_CONFIG_PREFIX</name>
                <value>gateway.group.config.</value>
            </param>
            <param>
                <name>group.mapping.{{ salt['pillar.get']('gateway:envAccessGroup') }}</name>
                <value>(!= 0 (size groups))</value>
            </param>
        </provider>
        <provider>
        {%- if salt['pillar.get']('gateway:enable_knox_ranger_authorizer') == True %}
            <role>authorization</role>
            <name>CompositeAuthz</name>
            <enabled>true</enabled>
            <param>
                <name>composite.provider.names</name>
                <value>AclsAuthz,XASecurePDPKnox</value>
            </param>
        {%- else %}
            <role>authorization</role>
            <name>AclsAuthz</name>
            <enabled>true</enabled>
        {%- endif %}
            <param>
                <name>{{ aclsauthz_prefix ~ "knox.acl.mode" }}</name>
                <value>AND</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "atlas-api.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "avatica.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "cm-api.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "hive.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "impala.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "jobtracker.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "resourcemanagerapi.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "livyserver.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "livy_for_spark3.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "namenode.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "nifi.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "nifi-registry.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "oozie.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "ranger.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "resourcemanager.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "smm-api.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "solr.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "webhbase.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                <name>{{ aclsauthz_prefix ~ "webhdfs.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                 <name>{{ aclsauthz_prefix ~ "hbasejars.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                 <name>{{ aclsauthz_prefix ~ "ssb-mve-api.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                 <name>{{ aclsauthz_prefix ~ "ssb-sse-api.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                 <name>{{ aclsauthz_prefix ~ "ssb-sse-ui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                 <name>{{ aclsauthz_prefix ~ "ssb-sse-ws.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                 <name>{{ aclsauthz_prefix ~ "kafka_connect.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
            <param>
                 <name>{{ aclsauthz_prefix ~ "opdb_agent.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
            </param>
        </provider>
{%- endif %}

        <provider>
            <role>ha</role>
            <name>HaProvider</name>
            <enabled>true</enabled>
            {% if 'ATLAS_API' in exposed and 'ATLAS_SERVER' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>ATLAS-API</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'CM-API' in exposed and 'CM-API' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>CM-API</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'HIVE' in exposed and 'HIVESERVER2' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>HIVE</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'LIVYSERVER_API' in exposed and 'LIVY_SERVER' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>LIVYSERVER</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'NAMENODE' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>NAMENODE</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'WEBHDFS' in exposed and 'NAMENODE' in salt['pillar.get']('gateway:location')  -%}
            <param>
                <name>WEBHDFS</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'OOZIE' in exposed and 'OOZIE_SERVER' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>OOZIE</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'RANGER' in exposed and 'RANGER_ADMIN' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>RANGER</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'YARNUIV2' in exposed and 'RESOURCEMANAGER' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>RESOURCEMANAGER</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'RESOURCEMANAGERAPI' in exposed and 'RESOURCEMANAGER' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>RESOURCEMANAGERAPI</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'WEBHBASE' in exposed and 'HBASERESTSERVER' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>WEBHBASE</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'SOLR' in exposed and 'SOLR_SERVER' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>SOLR</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'IMPALA' in exposed and 'IMPALAD' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>IMPALA</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'NIFI_REST' in exposed and 'NIFI_NODE' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>NIFI</name>
                 <value>enabled=true;maxFailoverAttempts=0;failoverSleep=1000</value>
             </param>
            {%- endif %}
            {% if 'AVATICA' in exposed and 'PHOENIX_QUERY_SERVER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>AVATICA</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
            {% if 'NIFI-REGISTRY-REST' in exposed and 'NIFI_REGISTRY_SERVER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>NIFI-REGISTRY</name>
                 <value>enabled=true;maxFailoverAttempts=0;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'SCHEMA-REGISTRY' in exposed and 'SCHEMA_REGISTRY_SERVER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>SCHEMA-REGISTRY</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000;enableLoadBalancing=true</value>
             </param>
             {%- endif %}
             {% if 'HBASEJARS' in exposed and 'MASTER' in salt['pillar.get']('gateway:location') -%}
             <param>
                <name>HBASEJARS</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'LIVY_FOR_SPARK3_API' in exposed and 'LIVY_SERVER_FOR_SPARK3' in salt['pillar.get']('gateway:location') -%}
             <param>
               <name>LIVYFORSPARK3API</name>
               <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
            {%- endif %}
            {% if 'KAFKA_CONNECT' in exposed and 'KAFKA_CONNECT' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>KAFKA_CONNECT</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
            {% if 'OPDB-AGENT' in exposed and 'OPDB_AGENT' in salt['pillar.get']('gateway:location') -%}
            <param>
                <name>OPDB-AGENT</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
            </param>
            {%- endif %}
        </provider>
    </gateway>

    {% if 'ATLAS_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'ATLAS_API' in exposed -%}
    <service>
        <role>ATLAS-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['ATLAS_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['ATLAS_API'] }}</url>
        {%- endfor %}
        <param>
              <name>replayBufferSize</name>
              <value>128</value>
        </param>
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'CM-API' in salt['pillar.get']('gateway:location') -%}
    {% if 'CM-API' in exposed -%}
    <service>
        <role>CM-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['CM-API'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['CM-API'] }}/api</url>
        <param>
            <name>httpclient.connectionTimeout</name>
            <value>5m</value>
        </param>
        <param>
            <name>httpclient.socketTimeout</name>
            <value>5m</value>
        </param>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'HIVESERVER2' in salt['pillar.get']('gateway:location') -%}
    {% if 'HIVE' in exposed -%}
    <service>
        <role>HIVE</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['HIVESERVER2'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['HIVE'] }}/cliservice</url>
        {%- endfor %}
        <param>
            <name>httpclient.connectionTimeout</name>
            <value>5m</value>
        </param>
        <param>
            <name>httpclient.socketTimeout</name>
            <value>5m</value>
        </param>
        <param>
             <name>replayBufferSize</name>
             <value>128</value>
        </param>
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'LIVY_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'LIVYSERVER_API' in exposed -%}
    <service>
        <role>LIVYSERVER</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['LIVY_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['LIVYSERVER_API'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'OOZIE_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'OOZIE' in exposed -%}
    <service>
        <role>OOZIE</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['OOZIE_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['OOZIE'] }}/oozie/</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'RANGER_ADMIN' in salt['pillar.get']('gateway:location') -%}
    {% if 'RANGER' in exposed -%}
    <service>
        <role>RANGER</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['RANGER_ADMIN'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['RANGER'] }}</url>
        {%- endfor %}
        <param>
            <name>replayBufferSize</name>
            <value>128</value>
        </param>
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'RESOURCEMANAGER' in salt['pillar.get']('gateway:location') -%}
    {% if 'YARNUIV2' in exposed -%}
    <service>
        <role>RESOURCEMANAGER</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['RESOURCEMANAGER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['YARNUIV2'] }}/ws</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if 'JOBTRACKER' in exposed -%}
    <service>
        <role>JOBTRACKER</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['RESOURCEMANAGER'] -%}
        <url>rpc://{{ hostloc }}:{{ ports['JOBTRACKER'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if 'RESOURCEMANAGERAPI' in exposed -%}
    <service>
        <role>RESOURCEMANAGERAPI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['RESOURCEMANAGER'] -%}
        <url>rpc://{{ hostloc }}:{{ ports['RESOURCEMANAGERAPI'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'SOLR_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'SOLR' in exposed -%}
    <service>
        <role>SOLR</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['SOLR_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SOLR'] }}/solr</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'NAMENODE' in salt['pillar.get']('gateway:location') -%}
    {% if 'WEBHDFS' in exposed -%}
    <service>
        <role>WEBHDFS</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['NAMENODE'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['WEBHDFS'] }}/webhdfs</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if 'NAMENODE' in exposed -%}
    <service>
        <role>NAMENODE</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['NAMENODE'] -%}
        <url>hdfs://{{ hostloc }}:{{ ports['NAMENODE'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'HBASERESTSERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'WEBHBASE' in exposed -%}
    <service>
        <role>WEBHBASE</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['HBASERESTSERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['WEBHBASE'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'IMPALAD' in salt['pillar.get']('gateway:location') -%}
    {% if 'IMPALA' in exposed -%}
    <service>
        <role>IMPALA</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['IMPALAD'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['IMPALA'] }}</url>
        {%- endfor %}
        <param>
            <name>httpclient.connectionTimeout</name>
            <value>5m</value>
        </param>
        <param>
            <name>httpclient.socketTimeout</name>
            <value>5m</value>
        </param>
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'NIFI_NODE' in salt['pillar.get']('gateway:location') -%}
    {% if 'NIFI_REST' in exposed -%}
    <service>
        <role>NIFI</role>
        <param name="useTwoWaySsl" value="true" />
        <param>
            <name>httpclient.connectionTimeout</name>
            <value>2m</value>
        </param>
        <param>
            <name>httpclient.socketTimeout</name>
            <value>2m</value>
        </param>
        {% for hostloc in salt['pillar.get']('gateway:location')['NIFI_NODE'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['NIFI_REST'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'NIFI_REGISTRY_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'NIFI-REGISTRY-REST' in exposed -%}
    <service>
        <role>NIFI-REGISTRY</role>
        <param name="useTwoWaySsl" value="true" />
        <param>
            <name>httpclient.connectionTimeout</name>
            <value>2m</value>
        </param>
        <param>
            <name>httpclient.socketTimeout</name>
            <value>2m</value>
        </param>
        {% for hostloc in salt['pillar.get']('gateway:location')['NIFI_REGISTRY_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['NIFI-REGISTRY'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'STREAMS_MESSAGING_MANAGER_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'SMM-API' in exposed -%}
    <service>
        <role>SMM-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['STREAMS_MESSAGING_MANAGER_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SMM-API'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'SCHEMA_REGISTRY_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'SCHEMA-REGISTRY' in exposed -%}
    <service>
        <role>SCHEMA-REGISTRY</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['SCHEMA_REGISTRY_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SCHEMA-REGISTRY'] }}</url>
        {%- endfor %}
        <param>
            <name>replayBufferSize</name>
            <value>512</value>
        </param>
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'KAFKA_CONNECT' in salt['pillar.get']('gateway:location') -%}
    {% if 'KAFKA_CONNECT' in exposed -%}
    <service>
        <role>KAFKA_CONNECT</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['KAFKA_CONNECT'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['KAFKA_CONNECT'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'PHOENIX_QUERY_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'AVATICA' in exposed -%}
    <service>
        <role>AVATICA</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['PHOENIX_QUERY_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['AVATICA'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'MASTER' in salt['pillar.get']('gateway:location') -%}
    {% if 'HBASEJARS' in exposed -%}
    <service>
        <role>HBASEJARS</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['MASTER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['HBASEJARS'] }}/static/maven</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'LIVY_SERVER_FOR_SPARK3' in salt['pillar.get']('gateway:location') -%}
    {% if 'LIVY_FOR_SPARK3_API' in exposed -%}
    <service>
        <role>LIVY_FOR_SPARK3</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['LIVY_SERVER_FOR_SPARK3'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['LIVY_FOR_SPARK3_API'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'MATERIALIZED_VIEW_ENGINE' in salt['pillar.get']('gateway:location') -%}
    {% if 'SSB-MVE-API' in exposed -%}
    <service>
        <role>SSB-MVE-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['MATERIALIZED_VIEW_ENGINE'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SSB-MVE-API'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'STREAMING_SQL_ENGINE' in salt['pillar.get']('gateway:location') -%}
    {% if 'SSB-SSE-API' in exposed -%}
    <service>
        <role>SSB-SSE-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['STREAMING_SQL_ENGINE'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SSB-SSE-API'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {% if 'SSB-SSE-UI' in exposed -%}
    <service>
        <role>SSB-SSE-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['STREAMING_SQL_ENGINE'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SSB-SSE-UI'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {% if 'SSB-SSE-WS' in exposed -%}
    <service>
        <role>SSB-SSE-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['STREAMING_SQL_ENGINE'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SSB-SSE-WS'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'OPDB_AGENT' in salt['pillar.get']('gateway:location') -%}
    {% if 'OPDB-AGENT' in exposed -%}
    <service>
        <role>OPDB-AGENT</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['OPDB_AGENT'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['OPDB-AGENT'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}
</topology>
