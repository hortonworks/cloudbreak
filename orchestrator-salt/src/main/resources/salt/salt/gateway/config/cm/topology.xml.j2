<?xml version="1.0" encoding="UTF-8"?>
<topology>
    <name>{{ topology_name }}</name>
    <gateway>

        <!-- {{ exposed }} -->

        <provider>
           <role>federation</role>
           <name>SSOCookieProvider</name>
           <enabled>true</enabled>
           <param>
              <name>sso.authentication.provider.url</name>
              <value>/{{ salt['pillar.get']('gateway:path') }}/knoxsso/api/v1/websso</value>
           </param>
        </provider>

{%- if salt['pillar.get']('gateway:enable_knox_ranger_authorizer') == True -%}
    {% set aclsauthz_prefix = 'AclsAuthz.' %}
{%- else -%}
    {% set aclsauthz_prefix = '' %}
{%- endif -%}

{% if salt['pillar.get']('gateway:envAccessGroup') is defined and salt['pillar.get']('gateway:envAccessGroup') | length > 0 %}
    <provider>
        <role>identity-assertion</role>
        <name>HadoopGroupProvider</name>
        <enabled>true</enabled>
        <param>
            <name>CENTRAL_GROUP_CONFIG_PREFIX</name>
            <value>gateway.group.config.</value>
        </param>
        <param>
            <name>group.mapping.{{ salt['pillar.get']('gateway:envAccessGroup') }}</name>
            <value>(!= 0 (size groups))</value>
        </param>
    </provider>
    <provider>
    {%- if salt['pillar.get']('gateway:enable_knox_ranger_authorizer') == True %}
             <role>authorization</role>
             <name>CompositeAuthz</name>
             <enabled>true</enabled>
             <param>
                 <name>composite.provider.names</name>
                 <value>AclsAuthz,XASecurePDPKnox</value>
              </param>
    {%- else %}
             <role>authorization</role>
             <name>AclsAuthz</name>
             <enabled>true</enabled>
    {%- endif %}
             <param>
                 <name>{{ aclsauthz_prefix ~ "knox.acl.mode" }}</name>
                 <value>AND</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "atlas.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "atlas-api.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "cm-api.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "cm-ui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "das.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "query_processor.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "hbaseui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "hdfsui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "hive.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "hue.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "impalaui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "kuduui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "jobhistoryui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "livyserver.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                <name>{{ aclsauthz_prefix ~ "livy_for_spark3.acl" }}</name>
                <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "nifi.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "nifi-registry.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "oozie.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "oozieui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "data-discovery-service-api.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "profiler-admin-api.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "profiler-metrics-api.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "profiler-scheduler-api.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "ranger.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "rangerui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "schema-registry.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "smm-ui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "solr.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "sparkhistoryui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "spark3historyui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "webhdfs.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "yarnuiv2.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "resourcemanager.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "zeppelinui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "zeppelinws.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "flink.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "ssb-ssc-ui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "ssb-ssc-ws.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "ssb-sse-ui.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
             <param>
                 <name>{{ aclsauthz_prefix ~ "ssb-sse-ws.acl" }}</name>
                 <value>*;{{ salt['pillar.get']('gateway:envAccessGroup') }};*</value>
             </param>
         </provider>
    {%- endif %}
         <provider>
             <role>ha</role>
             <name>HaProvider</name>
             <enabled>true</enabled>
             {% if 'ATLAS' in exposed and 'ATLAS_SERVER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>ATLAS</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             <param>
                 <name>ATLAS-API</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'CM-API' in exposed and 'CM-API' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>CM-API</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             <param>
                 <name>CM-UI</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'HIVE' in exposed and 'HIVESERVER2' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>HIVE</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'LIVYSERVER1' in exposed and 'LIVY_SERVER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>LIVYSERVER</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'LIVY_FOR_SPARK3' in exposed and 'LIVY_SERVER_FOR_SPARK3' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>LIVY_FOR_SPARK3</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'NAMENODE' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>NAMENODE</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'WEBHDFS' in exposed and 'NAMENODE' in salt['pillar.get']('gateway:location')  -%}
             <param>
                 <name>WEBHDFS</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'OOZIE' in exposed and 'OOZIE_SERVER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>OOZIEUI</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000;enableStickySession=false;noFallback=false;enableLoadBalancing=true</value>
             </param>
             <param>
                 <name>OOZIE</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000;enableStickySession=false;noFallback=false;enableLoadBalancing=true</value>
             </param>
             {%- endif %}
             {% if 'RANGER' in exposed and 'RANGER_ADMIN' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>RANGER</name>
                 <value>enableStickySession=false;noFallback=false;enableLoadBalancing=true</value>
             </param>
             <param>
                 <name>RANGERUI</name>
                 <value>enableStickySession=true;noFallback=true;enableLoadBalancing=true</value>
             </param>
             {%- endif %}
             {% if 'YARNUIV2' in exposed and 'RESOURCEMANAGER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>YARNUIV2</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             <param>
                <name>RESOURCEMANAGER</name>
                <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'SOLR' in exposed and 'SOLR_SERVER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>SOLR</name>
                 <value>enableStickySession=false;noFallback=false;enableLoadBalancing=true</value>
             </param>
             {%- endif %}
             {% if 'JOBHISTORYUI' in exposed and 'JOBHISTORY' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>JOBHISTORYUI</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'SPARKHISTORYUI' in exposed and 'SPARK_YARN_HISTORY_SERVER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>SPARKHISTORYUI</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'ZEPPELIN' in exposed and 'ZEPPELIN_SERVER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>ZEPPELINUI</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             <param>
                 <name>ZEPPELINWS</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'HUE' in exposed and 'HUE_LOAD_BALANCER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>HUE</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'HBASEUI' in exposed and 'MASTER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>HBASEUI</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'NIFI' in exposed and 'NIFI_NODE' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>NIFI</name>
                 <value>enabled=true;maxFailoverAttempts=0;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'NIFI-REGISTRY' in exposed and 'NIFI_REGISTRY_SERVER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>NIFI-REGISTRY</name>
                 <value>enabled=true;maxFailoverAttempts=0;failoverSleep=1000</value>
             </param>
             {%- endif %}
             {% if 'DATA-DISCOVERY-SERVICE-API' in exposed and 'DATA_DISCOVERY_SERVICE_AGENT' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>DATA-DISCOVERY-SERVICE-API</name>
                 <value>enableStickySession=false;noFallback=false;enableLoadBalancing=true</value>
             </param>
             {%- endif %}
             {% if 'PROFILER-ADMIN-API' in exposed and 'PROFILER_ADMIN_AGENT' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>PROFILER-ADMIN-API</name>
                 <value>enableStickySession=false;noFallback=false;enableLoadBalancing=true</value>
             </param>
             {%- endif %}
             {% if 'PROFILER-METRICS-API' in exposed and 'PROFILER_METRICS_AGENT' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>PROFILER-METRICS-API</name>
                 <value>enableStickySession=false;noFallback=false;enableLoadBalancing=true</value>
             </param>
             {%- endif %}
             {% if 'PROFILER-SCHEDULER-API' in exposed and 'PROFILER_SCHEDULER_AGENT' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>PROFILER-SCHEDULER-API</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}

             {% if 'IMPALA_DEBUG_UI' in exposed and 'IMPALA_DEBUG_UI' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>IMPALAUI</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}

             {% if 'KUDUUI' in exposed and ('KUDU_MASTER' in salt['pillar.get']('gateway:location') and 'KUDU_TSERVER' in salt['pillar.get']('gateway:location')) -%}
             <param>
                <name>KUDUUI</name>
                    <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
                </param>
             {%- endif %}

             {% if 'DAS' in exposed and 'DAS_WEBAPP' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>DAS</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}

             {% if 'QUERY_PROCESSOR' in exposed and 'QUERY_PROCESSOR' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>QUERY_PROCESSOR</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000</value>
             </param>
             {%- endif %}

             {% if 'SCHEMA-REGISTRY' in exposed and 'SCHEMA_REGISTRY_SERVER' in salt['pillar.get']('gateway:location') -%}
             <param>
                 <name>SCHEMA-REGISTRY</name>
                 <value>enabled=true;maxFailoverAttempts=3;failoverSleep=1000;enableLoadBalancing=true</value>
             </param>
             {%- endif %}
         </provider>

    </gateway>

    {% if 'CM-API' in salt['pillar.get']('gateway:location') -%}
    {% if 'CM-API' in exposed -%}
    <service>
        <role>CM-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['CM-API'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['CM-API'] }}/api</url>
        <param>
            <name>httpclient.connectionTimeout</name>
            <value>5m</value>
        </param>
        <param>
            <name>httpclient.socketTimeout</name>
            <value>5m</value>
        </param>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'CM-API' in salt['pillar.get']('gateway:location') -%}
    {% if 'CM-UI' in exposed -%}
    <service>
        <role>CM-UI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['CM-API'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['CM-UI'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'NAMENODE' in salt['pillar.get']('gateway:location') -%}
    {% if 'WEBHDFS' in exposed -%}
    <service>
        <role>WEBHDFS</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['NAMENODE'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['WEBHDFS'] }}/webhdfs</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'NAMENODE' in salt['pillar.get']('gateway:location') -%}
    {% if 'HDFSUI' in exposed -%}
    <service>
        <role>HDFSUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['NAMENODE'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['HDFSUI'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'RANGER_ADMIN' in salt['pillar.get']('gateway:location') -%}
    {% if 'RANGER' in exposed -%}
    <service>
        <role>RANGER</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['RANGER_ADMIN'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['RANGER'] }}</url>
        {%- endfor %}
        <param>
            <name>replayBufferSize</name>
            <value>128</value>
        </param>
    </service>
    <service>
        <role>RANGERUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['RANGER_ADMIN'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['RANGER'] }}</url>
        {%- endfor %}
        <param>
             <name>replayBufferSize</name>
             <value>128</value>
        </param>
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'HIVESERVER2' in salt['pillar.get']('gateway:location') -%}
    {% if 'HIVE' in exposed -%}
    <service>
        <role>HIVE</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['HIVESERVER2'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['HIVE'] }}/cliservice</url>
        {%- endfor %}
        <param>
            <name>replayBufferSize</name>
            <value>128</value>
        </param>
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'RESOURCEMANAGER' in salt['pillar.get']('gateway:location') -%}
    {% if 'YARNUIV2' in exposed -%}
    <service>
        <role>YARNUIV2</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['RESOURCEMANAGER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['YARNUIV2'] }}</url>
        {%- endfor %}
    </service>
    <service>
        <role>RESOURCEMANAGER</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['RESOURCEMANAGER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['YARNUIV2'] }}/ws</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'JOBHISTORY' in salt['pillar.get']('gateway:location') -%}
    {% if 'JOBHISTORYUI' in exposed -%}
    <service>
        <role>JOBHISTORYUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['JOBHISTORY'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['JOBHISTORYUI'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'SPARK_YARN_HISTORY_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'SPARKHISTORYUI' in exposed -%}
    <service>
        <role>SPARKHISTORYUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['SPARK_YARN_HISTORY_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SPARKHISTORYUI'] }}/</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'SPARK3_YARN_HISTORY_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'SPARK3HISTORYUI' in exposed -%}
    <service>
        <role>SPARK3HISTORYUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['SPARK3_YARN_HISTORY_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SPARK3HISTORYUI'] }}/</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'ZEPPELIN_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'ZEPPELIN' in exposed -%}
    <service>
        <role>ZEPPELINUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['ZEPPELIN_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['ZEPPELIN'] }}</url>
        {%- endfor %}
    </service>
    <service>
        <role>ZEPPELINWS</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['ZEPPELIN_SERVER'] -%}
        <url>{% if protocol == 'https' %}wss{% else %}ws{% endif %}://{{ hostloc }}:{{ ports['ZEPPELIN'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'OOZIE_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'OOZIE' in exposed -%}
    <service>
        <role>OOZIEUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['OOZIE_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['OOZIE'] }}/oozie/</url>
        {%- endfor %}
    </service>
    <service>
        <role>OOZIE</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['OOZIE_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['OOZIE'] }}/oozie/</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'ATLAS_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'ATLAS' in exposed -%}
    <service>
        <role>ATLAS</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['ATLAS_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['ATLAS'] }}</url>
        {%- endfor %}
        <param>
              <name>replayBufferSize</name>
              <value>128</value>
        </param>
        <param>
              <name>httpclient.connectionTimeout</name>
              <value>5m</value>
        </param>
        <param>
               <name>httpclient.socketTimeout</name>
               <value>15m</value>
        </param>
    </service>
    <service>
        <role>ATLAS-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['ATLAS_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['ATLAS'] }}</url>
        {%- endfor %}
        <param>
              <name>replayBufferSize</name>
              <value>128</value>
        </param>
        <param>
              <name>httpclient.connectionTimeout</name>
              <value>5m</value>
        </param>
        <param>
               <name>httpclient.socketTimeout</name>
               <value>15m</value>
        </param>
    </service>
    {%- endif %}
    {%- endif %}

   {% if 'LIVY_SERVER' in salt['pillar.get']('gateway:location') -%}
   {% if 'LIVYSERVER1' in exposed -%}
   <service>
        <role>LIVYSERVER</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['LIVY_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['LIVYSERVER1'] }}</url>
        {%- endfor %}
   </service>
   {%- endif %}
   {%- endif %}

   {% if 'LIVY_SERVER_FOR_SPARK3' in salt['pillar.get']('gateway:location') -%}
   {% if 'LIVY_FOR_SPARK3' in exposed -%}
   <service>
        <role>LIVY_FOR_SPARK3</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['LIVY_SERVER_FOR_SPARK3'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['LIVY_FOR_SPARK3'] }}</url>
        {%- endfor %}
   </service>
   {%- endif %}
   {%- endif %}

    {% if 'SOLR_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'SOLR' in exposed -%}
    <service>
        <role>SOLR</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['SOLR_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SOLR'] }}/solr</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'HUE_LOAD_BALANCER' in salt['pillar.get']('gateway:location') -%}
    {% if 'HUE' in exposed -%}
    <service>
        <role>HUE</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['HUE_LOAD_BALANCER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['HUE'] }}</url>
        <param>
            <name>httpclient.connectionTimeout</name>
            <value>5m</value>
        </param>
        <param>
            <name>httpclient.socketTimeout</name>
            <value>15m</value>
        </param>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'MASTER' in salt['pillar.get']('gateway:location') -%}
    {% if 'HBASEUI' in exposed -%}
    <service>
        <role>HBASEUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['MASTER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['HBASEUI'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'NIFI_NODE' in salt['pillar.get']('gateway:location') -%}
    {% if 'NIFI' in exposed -%}
    <service>
        <role>NIFI</role>
        <param name="useTwoWaySsl" value="true" />
        <param>
            <name>httpclient.connectionTimeout</name>
            <value>2m</value>
        </param>
        <param>
            <name>httpclient.socketTimeout</name>
            <value>2m</value>
        </param>
        {% for hostloc in salt['pillar.get']('gateway:location')['NIFI_NODE'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['NIFI'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'NIFI_REGISTRY_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'NIFI-REGISTRY' in exposed -%}
        <service>
            <role>NIFI-REGISTRY</role>
            <param name="useTwoWaySsl" value="true" />
            <param>
                <name>httpclient.connectionTimeout</name>
                <value>2m</value>
            </param>
            <param>
                <name>httpclient.socketTimeout</name>
                <value>2m</value>
            </param>
            {% for hostloc in salt['pillar.get']('gateway:location')['NIFI_REGISTRY_SERVER'] -%}
            <url>{{ protocol }}://{{ hostloc }}:{{ ports['NIFI-REGISTRY'] }}</url>
            {%- endfor %}
        </service>
    {%- endif %}
    {%- endif %}

    {% if 'STREAMS_MESSAGING_MANAGER_UI' in salt['pillar.get']('gateway:location') -%}
        {% if 'SMM-UI' in exposed -%}
            <service>
                <role>SMM-UI</role>
                {% for hostloc in salt['pillar.get']('gateway:location')['STREAMS_MESSAGING_MANAGER_UI'] -%}
                <url>{{ protocol }}://{{ hostloc }}:{{ ports['SMM-UI'] }}</url>
                {%- endfor %}
            </service>
        {%- endif %}
     {%- endif %}

     {% if 'SCHEMA_REGISTRY_SERVER' in salt['pillar.get']('gateway:location') -%}
        {% if 'SCHEMA-REGISTRY' in exposed -%}
            <service>
                <role>SCHEMA-REGISTRY</role>
                {% for hostloc in salt['pillar.get']('gateway:location')['SCHEMA_REGISTRY_SERVER'] -%}
                <url>{{ protocol }}://{{ hostloc }}:{{ ports['SCHEMA-REGISTRY'] }}</url>
                {%- endfor %}
                <param>
                    <name>replayBufferSize</name>
                    <value>512</value>
                </param>
            </service>
        {%- endif %}
     {%- endif %}

    {% if 'DATA_DISCOVERY_SERVICE_AGENT' in salt['pillar.get']('gateway:location') -%}
    {% if 'DATA-DISCOVERY-SERVICE-API' in exposed -%}
    <service>
        <role>DATA-DISCOVERY-SERVICE-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['DATA_DISCOVERY_SERVICE_AGENT'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['DATA-DISCOVERY-SERVICE-API'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'PROFILER_ADMIN_AGENT' in salt['pillar.get']('gateway:location') -%}
    {% if 'PROFILER-ADMIN-API' in exposed -%}
    <service>
        <role>PROFILER-ADMIN-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['PROFILER_ADMIN_AGENT'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['PROFILER-ADMIN-API'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'PROFILER_METRICS_AGENT' in salt['pillar.get']('gateway:location') -%}
    {% if 'PROFILER-METRICS-API' in exposed -%}
    <service>
        <role>PROFILER-METRICS-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['PROFILER_METRICS_AGENT'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['PROFILER-METRICS-API'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'PROFILER_SCHEDULER_AGENT' in salt['pillar.get']('gateway:location') -%}
    {% if 'PROFILER-SCHEDULER-API' in exposed -%}
    <service>
        <role>PROFILER-SCHEDULER-API</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['PROFILER_SCHEDULER_AGENT'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['PROFILER-SCHEDULER-API'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'IMPALA_DEBUG_UI' in salt['pillar.get']('gateway:location') -%}
    {% if 'IMPALA_DEBUG_UI' in exposed -%}
    <service>
        <role>IMPALAUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['IMPALA_DEBUG_UI'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['IMPALA_DEBUG_UI'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'KUDU_MASTER' in salt['pillar.get']('gateway:location') -%}
    {% if 'KUDUUI' in exposed -%}
    <service>
        <role>KUDUUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['KUDU_MASTER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['KUDUUI'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}
    {% if 'KUDU_TSERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'KUDUUI' in exposed -%}
        <service>
            <role>KUDUUI</role>
            {% for hostloc in salt['pillar.get']('gateway:location')['KUDU_TSERVER'] -%}
            <url>{{ protocol }}://{{ hostloc }}:{{ ports['KUDUUIT'] }}</url>
            {%- endfor %}
        </service>
    {%- endif %}
    {%- endif %}

    {% if 'DAS_WEBAPP' in salt['pillar.get']('gateway:location') -%}
    {% if 'DAS' in exposed -%}
    <service>
        <role>DAS</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['DAS_WEBAPP'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['DAS'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'QUERY_PROCESSOR' in salt['pillar.get']('gateway:location') -%}
    {% if 'QUERY_PROCESSOR' in exposed -%}
    <service>
        <role>QUERY_PROCESSOR</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['QUERY_PROCESSOR'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['QUERY_PROCESSOR'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'FLINK_HISTORY_SERVER' in salt['pillar.get']('gateway:location') -%}
    {% if 'FLINK' in exposed -%}
    <service>
        <role>FLINK</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['FLINK_HISTORY_SERVER'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['FLINK'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'STREAMING_SQL_CONSOLE' in salt['pillar.get']('gateway:location') -%}
    {% if 'SSB-SSC-UI' in exposed -%}
    <service>
        <role>SSB-SSC-UI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['STREAMING_SQL_CONSOLE'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SSB-SSC-UI'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {% if 'SSB-SSC-WS' in exposed -%}
    <service>
        <role>SSB-SSC-WS</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['STREAMING_SQL_CONSOLE'] -%}
        <url>{% if protocol == 'https' %}wss{% else %}ws{% endif %}://{{ hostloc }}:{{ ports['SSB-SSC-WS'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}

    {% if 'STREAMING_SQL_ENGINE' in salt['pillar.get']('gateway:location') -%}
    {% if 'SSB-SSE-UI' in exposed -%}
    <service>
        <role>SSB-SSE-UI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['STREAMING_SQL_ENGINE'] -%}
        <url>{{ protocol }}://{{ hostloc }}:{{ ports['SSB-SSE-UI'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {% if 'SSB-SSE-WS' in exposed -%}
    <service>
        <role>SSB-SSE-WS</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['STREAMING_SQL_ENGINE'] -%}
        <url>{% if protocol == 'https' %}wss{% else %}ws{% endif %}://{{ hostloc }}:{{ ports['SSB-SSE-WS'] }}</url>
        {%- endfor %}
    </service>
    {%- endif %}
    {%- endif %}
</topology>
