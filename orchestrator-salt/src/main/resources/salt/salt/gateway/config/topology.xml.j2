<?xml version="1.0" encoding="UTF-8"?>
<topology>
    <gateway>
        <provider>
            <role>authentication</role>
            <name>ShiroProvider</name>
            <enabled>true</enabled>
            <param>
                <name>sessionTimeout</name>
                <value>30</value>
            </param>
            <param>
                <name>main.ldapRealm</name>
                <value>org.apache.hadoop.gateway.shirorealm.KnoxLdapRealm</value>
            </param>
            <param>
                <name>main.ldapContextFactory</name>
                <value>org.apache.hadoop.gateway.shirorealm.KnoxLdapContextFactory</value>
            </param>
            <param>
                <name>main.ldapRealm.contextFactory</name>
                <value>$ldapContextFactory</value>
            </param>
            <param>
                <name>main.ldapRealm.userDnTemplate</name>
                <value>{{ salt['pillar.get']('ldap:userSearchFilter') }}={0},{{ salt['pillar.get']('ldap:userSearchBase') }}</value>
            </param>
            <param>
                <name>main.ldapRealm.contextFactory.url</name>
                <value>{{ salt['pillar.get']('ldap:serverHost') }}:{{ salt['pillar.get']('ldap:serverPort') }}</value>
            </param>
            <param>
                <name>main.ldapRealm.contextFactory.authenticationMechanism</name>
                <value>simple</value>
            </param>
            <param>
                <name>urls./**</name>
                <value>authcBasic</value>
            </param>
        </provider>

        <provider>
            <role>identity-assertion</role>
            <name>Default</name>
            <enabled>true</enabled>
        </provider>

        <!--
        Defines rules for mapping host names internal to a Hadoop cluster to externally accessible host names.
        For example, a hadoop service running in AWS may return a response that includes URLs containing the
        some AWS internal host name.  If the client needs to make a subsequent request to the host identified
        in those URLs they need to be mapped to external host names that the client Knox can use to connect.

        If the external hostname and internal host names are same turn of this provider by setting the value of
        enabled parameter as false.

        The name parameter specifies the external host names in a comma separated list.
        The value parameter specifies corresponding internal host names in a comma separated list.

        Note that when you are using Sandbox, the external hostname needs to be localhost, as seen in out
        of box sandbox.xml.  This is because Sandbox uses port mapping to allow clients to connect to the
        Hadoop services using localhost.  In real clusters, external host names would almost never be localhost.
        -->
        <provider>
            <role>hostmap</role>
            <name>static</name>
            <enabled>true</enabled>
            <param><name>localhost</name><value>sandbox,sandbox.hortonworks.com</value></param>
        </provider>

    </gateway>

    {% if ('WEBHDFS' in salt['pillar.get']('gateway:exposed')) and ('NAMENODE' in salt['pillar.get']('gateway:location')) -%}
    <!-- curl -iku {{ salt['pillar.get']('ambari:username') }}:{{ salt['pillar.get']('ambari:password') }} -X GET 'https://{{ salt['pillar.get']('gateway:address') }}:8443/gateway/hdc/webhdfs/v1/?op=LISTSTATUS' -->
    <service>
        <role>WEBHDFS</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['NAMENODE'] -%}
        <url>http://{{ hostloc }}:50070/webhdfs</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if 'AMBARI' in salt['pillar.get']('gateway:exposed') -%}
    <service>
        <role>AMBARI</role>
        <url>http://{{ salt['grains.get']('fqdn') }}:8080</url>
    </service>
    {%- endif %}

    {% if ('ZEPPELINWS' in salt['pillar.get']('gateway:exposed')) and ('ZEPPELIN_MASTER' in salt['pillar.get']('gateway:location')) -%}
    <service>
        <role>ZEPPELINWS</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['ZEPPELIN_MASTER'] -%}
        <url>ws://{{ hostloc }}:9995/ws</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if ('RANGER' in salt['pillar.get']('gateway:exposed')) and ('RANGER_ADMIN' in salt['pillar.get']('gateway:location')) -%}
    <service>
        <role>RANGER</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['RANGER_ADMIN'] -%}
        <url>http://{{ hostloc }}:6080</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if ('HIVE' in salt['pillar.get']('gateway:exposed')) and ('HIVE_SERVER' in salt['pillar.get']('gateway:location')) -%}
    <!-- beeline -u "jdbc:hive2://{{ salt['pillar.get']('gateway:address') }}:8443/;ssl=true;sslTrustStore=/usr/hdp/current/knox-server/data/security/keystores/gateway.jks;trustStorePassword={{ salt['pillar.get']('gateway:password') }};transportMode=http;httpPath=gateway/hdc/hive" -d org.apache.hive.jdbc.HiveDriver -n {{ salt['pillar.get']('gateway:username') }} -p {{ salt['pillar.get']('gateway:password') }} -e "show databases;" -->
    <!-- beeline -u "jdbc:hive2://localhost:10001/;transportMode=http;httpPath=cliservice" -d org.apache.hive.jdbc.HiveDriver -n hive -p {{ salt['pillar.get']('gateway:password') }} -e "show databases;" -->
    <!-- docker run -ti -v $(pwd):/cert akanto/beeline -u "jdbc:hive2://{{ salt['pillar.get']('gateway:address') }}:8443/;ssl=true;sslTrustStore=/cert/gateway.jks;trustStorePassword={{ salt['pillar.get']('gateway:password') }};transportMode=http;httpPath=gateway/hdc/hive" -d org.apache.hive.jdbc.HiveDriver -n {{ salt['pillar.get']('gateway:username') }} -p {{ salt['pillar.get']('gateway:password') }} -e "show databases;" -->

    <service>
        <role>HIVE</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['HIVE_SERVER'] -%}
        <url>http://{{ salt['grains.get']('fqdn') }}:10001/cliservice</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if ('HIVE_INTERACTIVE' in salt['pillar.get']('gateway:exposed')) and ('HIVE_SERVER_INTERACTIVE' in salt['pillar.get']('gateway:location')) -%}
    <!-- beeline -u "jdbc:hive2://{{ salt['pillar.get']('gateway:address') }}:8443/;ssl=true;sslTrustStore=/usr/hdp/current/knox-server/data/security/keystores/gateway.jks;trustStorePassword={{ salt['pillar.get']('gateway:password') }};transportMode=http;httpPath=gateway/hdc/hive" -d org.apache.hive.jdbc.HiveDriver -n {{ salt['pillar.get']('gateway:username') }} -p {{ salt['pillar.get']('gateway:password') }} -e "show databases;" -->
    <!-- beeline -u "jdbc:hive2://localhost:10001/;transportMode=http;httpPath=cliservice" -d org.apache.hive.jdbc.HiveDriver -n hive -p {{ salt['pillar.get']('gateway:password') }} -e "show databases;" -->
    <!-- docker run -ti -v $(pwd):/cert akanto/beeline -u "jdbc:hive2://{{ salt['pillar.get']('gateway:address') }}:8443/;ssl=true;sslTrustStore=/cert/gateway.jks;trustStorePassword={{ salt['pillar.get']('gateway:password') }};transportMode=http;httpPath=gateway/hdc/hive" -d org.apache.hive.jdbc.HiveDriver -n {{ salt['pillar.get']('gateway:username') }} -p {{ salt['pillar.get']('gateway:password') }} -e "show databases;" -->

    <service>
        <role>HIVE</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['HIVE_SERVER_INTERACTIVE'] -%}
        <url>http://{{ salt['grains.get']('fqdn') }}:10501/cliservice</url>
        {%- endfor %}
    </service>
    {%- endif %}

    <!-- UI -->
    {% if ('HDFSUI' in salt['pillar.get']('gateway:exposed')) and ('NAMENODE' in salt['pillar.get']('gateway:location')) -%}
    <!-- https://{{ salt['pillar.get']('gateway:address') }}:8443/gateway/hdc/hdfs/ -->
    <service>
        <role>HDFSUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['NAMENODE'] -%}
        <url>http://{{ salt['grains.get']('fqdn') }}:50070</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if 'AMBARIUI' in salt['pillar.get']('gateway:exposed') -%}
    <!-- https://{{ salt['pillar.get']('gateway:address') }}:8443/gateway/hdc/ambari/ -->

    <service>
        <role>AMBARIUI</role>
        <url>http://{{ salt['grains.get']('fqdn') }}:8080</url>
    </service>
    {%- endif %}

    {% if ('YARNUI' in salt['pillar.get']('gateway:exposed')) and ('RESOURCEMANAGER' in salt['pillar.get']('gateway:location')) -%}
    <!-- https://{{ salt['pillar.get']('gateway:address') }}:8443/gateway/hdc/yarn/ -->

    <service>
        <role>YARNUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['RESOURCEMANAGER'] -%}
        <url>http://{{ hostloc }}:8088</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if ('JOBHISTORYUI' in salt['pillar.get']('gateway:exposed')) and ('HISTORYSERVER' in salt['pillar.get']('gateway:location')) -%}
    <!-- https://{{ salt['pillar.get']('gateway:address') }}:8443/gateway/hdc/jobhistory/ -->

    <service>
        <role>JOBHISTORYUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['HISTORYSERVER'] -%}
        <url>http://{{ hostloc }}:19888</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if ('SPARKHISTORYUI' in salt['pillar.get']('gateway:exposed')) and ('SPARK_JOBHISTORYSERVER' in salt['pillar.get']('gateway:location')) -%}
    <!-- https://{{ salt['pillar.get']('gateway:address') }}:8443/gateway/hdc/sparkhistory/ -->

    <service>
        <role>SPARKHISTORYUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['SPARK_JOBHISTORYSERVER'] -%}
        <url>http://{{ hostloc }}:18080/</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if ('ZEPPELINUI' in salt['pillar.get']('gateway:exposed')) and ('ZEPPELIN_MASTER' in salt['pillar.get']('gateway:location')) -%}
    <!-- https://{{ salt['pillar.get']('gateway:address') }}:8443/gateway/hdc/zeppelin/ -->

    <service>
        <role>ZEPPELINUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['ZEPPELIN_MASTER'] -%}
        <url>http://{{ hostloc }}:9995</url>
        {%- endfor %}
    </service>
    {%- endif %}

    {% if ('RANGERUI' in salt['pillar.get']('gateway:exposed')) and ('RANGER_ADMIN' in salt['pillar.get']('gateway:location')) -%}
    <!-- https://{{ salt['pillar.get']('gateway:address') }}:8443/gateway/hdc/ranger/ -->

    <service>
        <role>RANGERUI</role>
        {% for hostloc in salt['pillar.get']('gateway:location')['RANGER_ADMIN'] -%}
        <url>http://{{ hostloc }}:6080</url>
        {%- endfor %}
    </service>
    {%- endif %}

</topology>