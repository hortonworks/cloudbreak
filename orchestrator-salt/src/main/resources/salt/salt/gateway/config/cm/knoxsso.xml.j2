<?xml version="1.0" encoding="utf-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<topology>
    <gateway>
      {% if 'SSO_PROVIDER_FROM_UMS' == salt['pillar.get']('gateway:ssotype') -%}
        <provider>
            <role>federation</role>
            <name>pac4j</name>
            <enabled>true</enabled>
            <param>
                <name>clientName</name>
                <value>SAML2Client</value>
            </param>
            <param>
                <name>saml.identityProviderMetadataPath</name>
                <value>{{ salt['pillar.get']('gateway:knoxDataRoot') }}/cdp-idp-metadata.xml</value>
            </param>
            <param>
                <!--
                    Need to include a value for the saml.serviceProviderMetadataPath - the file location here doesn't need to exist.
                    There is a bug that will throw a NPE if saml.serviceProviderMetadataPath is not included even though the actual metadata
                    will be served up to the IdP via request.
                -->
                <name>saml.serviceProviderMetadataPath</name>
                <value>/tmp/sp-metadata.xml</value>
            </param>

            {% if salt['pillar.get']('gateway:userfacingfqdn') is defined and salt['pillar.get']('gateway:userfacingfqdn')|length > 1 %}
            <param>
                <name>pac4j.callbackUrl</name>
                <value>https://{{ salt['pillar.get']('gateway:userfacingfqdn') }}/{{ salt['pillar.get']('gateway:path') }}/knoxsso/api/v1/websso</value>
            </param>
            <param>
                <name>saml.serviceProviderEntityId</name>
                <value>https://{{ salt['pillar.get']('gateway:userfacingfqdn') }}/{{ salt['pillar.get']('gateway:path') }}/knoxsso/api/v1/websso?pac4jCallback=true&amp;client_name=SAML2Client</value>
            </param>
            {% else %}
            <param>
                <name>pac4j.callbackUrl</name>
                <value>https://{{ salt['pillar.get']('gateway:address') }}:443/{{ salt['pillar.get']('gateway:path') }}/knoxsso/api/v1/websso</value>
            </param>
            <param>
                <name>saml.serviceProviderEntityId</name>
                <value>https://{{ salt['pillar.get']('gateway:address') }}:443/{{ salt['pillar.get']('gateway:path') }}/knoxsso/api/v1/websso?pac4jCallback=true&amp;client_name=SAML2Client</value>
            </param>
            {% endif %}
        </provider>
      {% else %}
      <provider>
        <role>webappsec</role>
        <name>WebAppSec</name>
        <enabled>true</enabled>
        <param><name>xframe.options.enabled</name><value>true</value></param>
      </provider>

        <provider>
            <role>authentication</role>
            <name>ShiroProvider</name>
            <enabled>true</enabled>
            <param>
                <!--
                session timeout in minutes,  this is really idle timeout,
                defaults to 30mins, if the property value is not defined,,
                current client authentication would expire if client idles contiuosly for more than this value
                -->
                <name>sessionTimeout</name>
                <value>30</value>
            </param>
            <param>
                <name>redirectToUrl</name>
                <value>/{{ salt['pillar.get']('gateway:path') }}/knoxsso/knoxauth/login.html</value>
            </param>
            <param>
                <name>restrictedCookies</name>
                <value>rememberme,WWW-Authenticate</value>
            </param>
            <param>
                <name>main.pamRealm</name>
                <value>org.apache.hadoop.gateway.shirorealm.KnoxPamRealm</value>
            </param>
            <param>
                <name>main.pamRealm.service</name>
                <value>login</value>
            </param>
            <param>
                <name>urls./**</name>
                <value>authcBasic</value>
            </param>
        </provider>
        {% endif %}

        <provider>
            <role>identity-assertion</role>
            <name>Default</name>
            <enabled>true</enabled>
        </provider>

    </gateway>

    <application>
      <name>knoxauth</name>
    </application>

    <service>
        <role>KNOXSSO</role>
        <param>
            <name>knoxsso.cookie.secure.only</name>
            <value>true</value>
        </param>
        <param>
            <name>knoxsso.token.ttl</name>
            <value>-1</value>
        </param>
        <param>
           <name>knoxsso.redirect.whitelist.regex</name>
           <value>.*</value>
        </param>
    </service>

</topology>