#!/usr/bin/env bash

if [ -n "$1" ]
  then
    VDF_URL=$1
  else
    echo "Please specify a vdf-url"
    exit 1
fi

if [ -n "$2" ]
  then
    OS_FAMILY=$2
  else
    echo "Please specify an OS family type"
    exit 1
fi

echo "Using vdf url $VDF_URL"

{% if pillar['proxy'] is defined and pillar['proxy']['host'] is defined and pillar['proxy']['port'] is defined and pillar['proxy']['protocol'] is defined %}
{% if 'user' in pillar['proxy'] %}
curl -x {{ pillar['proxy']['protocol'] }}://{{ pillar['proxy']['user'] }}:{{ pillar['proxy']['password'] }}@{{ pillar['proxy']['host'] }}:{{ pillar['proxy']['port'] }} $VDF_URL -o vdf.xml
{% else %}
curl -x {{ pillar['proxy']['protocol'] }}://{{ pillar['proxy']['host'] }}:{{ pillar['proxy']['port'] }} $VDF_URL -o vdf.xml
{% endif%}
{% else %}
{% if pillar['paywall'] is defined %}
curl -u {{ pillar['paywall']['paywallUser'] }}:{{ pillar['paywall']['paywallPassword'] }} $VDF_URL -o vdf.xml
{% else %}
curl $VDF_URL -o vdf.xml
{% endif%}
{% endif%}


function getRepoBaseUrl()
{
    local repoName=$1
    local REPO_DATA=$(xmllint --xpath "//repository-version/repository-info/os/repo[reponame='$repoName']" vdf.xml)
    local BASE_URL=$(xmllint --xpath "//baseurl/text()" - <<<"$REPO_DATA")
    echo $BASE_URL
}

function generateDebianRepo()
{
    #define the template.
    local repoUrl=$1
    local repoName=$2
    cat << EOF
deb $repoUrl $repoName main
EOF
}

function generateYumRepo()
{
    #define the template.
    local repoUrl=$1
    local repoName=$2
    cat << EOF
[$repoName]
name=$repoName
baseurl=$repoUrl
path=/
enabled=1
gpgcheck=0
{% if pillar['paywall'] is defined %}
username={{ pillar['paywall']['paywallUser'] }}
password={{ pillar['paywall']['paywallPassword'] }}
{% endif%}
EOF
}

function generateZypperRepo()
{
    #define the template.
    local repoUrl=$1
    local repoName=$2
    cat << EOF
[$repoName]
name=$repoName
baseurl=$repoUrl
path=/
type=yast2
enabled=1
gpgcheck=0
EOF
}

function generateDebianRepoIfPresent(){
    local repoUrl=$1
    local repoName=$2
    if [ -n "$repoUrl" ]
      then
        generateDebianRepo $repoUrl $repoName > "/etc/apt/sources.list.d/$repoName.list"
    fi
}

function generateYumRepoIfPresent(){
    local repoUrl=$1
    local repoName=$2
    if [ -n "$repoUrl" ]
      then
        generateYumRepo $repoUrl $repoName > "/etc/yum.repos.d/$repoName.repo"
    fi
}

function generateZypperRepoIfPresent(){
    local repoUrl=$1
    local repoName=$2
    if [ -n "$repoUrl" ]
      then
        generateZypperRepo $repoUrl $repoName > "/etc/zypp/repos.d/$repoName.repo"
    fi
}

hdp_repo=$(getRepoBaseUrl 'HDP')
hdf_repo=$(getRepoBaseUrl 'HDF')
hdp_utils_repo=$(getRepoBaseUrl 'HDP-UTILS')

case $OS_FAMILY in
  "Debian")
      generateDebianRepoIfPresent $hdp_repo 'HDP'
      generateDebianRepoIfPresent $hdf_repo 'HDF'
      generateDebianRepoIfPresent $hdp_utils_repo 'HDP-UTILS'
      apt-get update
  ;;
  "RedHat")
      generateYumRepoIfPresent $hdp_repo 'HDP'
      generateYumRepoIfPresent $hdf_repo 'HDF'
      generateYumRepoIfPresent $hdp_utils_repo 'HDP-UTILS'
  ;;
  "Suse")
      generateZypperRepoIfPresent $hdp_repo 'HDP'
      generateZypperRepoIfPresent $hdf_repo 'HDF'
      generateZypperRepoIfPresent $hdp_utils_repo 'HDP-UTILS'
      zypper ref
  ;;
esac


rm vdf.xml
echo "Removed vdf.xml file"
