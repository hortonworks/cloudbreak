{%- set manager_server_hostname = salt['grains.get']('host') %}
{%- set manager_server_fqdn = salt['grains.get']('fqdn') %}
{%- set internal_loadbalancer_san = salt['pillar.get']('cloudera-manager:communication:internal_loadbalancer_san') %}
{%- set gov_cloud = salt['pillar.get']('cluster:gov_cloud', False) %}
#!/bin/bash

set -ex

function cleanup() {
  kdestroy
}

trap cleanup EXIT

HOSTNAME={{ manager_server_hostname }}
FQDN={{ manager_server_fqdn }}
LOADBALANCER_SAN={{ internal_loadbalancer_san }}
CM_KEYTAB_FILE={{ cm_keytab.path }}
CM_PRINCIPAL={{ cm_keytab.principal }}
CERTMANAGER_DIR="/etc/cloudera-scm-server/certs"
CERTMANAGER_ARGS=
CACERTS_DIR=/opt/cacerts
OUT_FILE=`mktemp -t signed_ca_chain.XXXXXX.pem`

OVERRIDES="--override ca_dn=CN=${HOSTNAME} "
{% if gov_cloud == True %}
OVERRIDES+="--override keystore_type=BCFKS "
{% endif %}

rm -rf $CERTMANAGER_DIR

source /bin/activate_salt_env

kinit -kt $CM_KEYTAB_FILE $CM_PRINCIPAL

mkdir -p ${CACERTS_DIR}

rm -f ${CACERTS_DIR}/cacerts.p12
rm -f ${CACERTS_DIR}/cacerts.pem
rm -f ${CACERTS_DIR}/cacerts.bcfks

keytool -importkeystore \
  -srckeystore ${JAVA_HOME}/jre/lib/security/cacerts \
  -srcstorepass changeit \
  -providerclass sun.security.pkcs11.SunPKCS11 \
  -providerarg ${JAVA_HOME}/jre/lib/security/nss.cfg \
  -destkeystore ${CACERTS_DIR}/cacerts.p12 \
  -deststorepass changeit \
  -deststoretype PKCS12
openssl pkcs12 -in ${CACERTS_DIR}/cacerts.p12 -passin pass:changeit -out ${CACERTS_DIR}/cacerts.pem
{% if gov_cloud == True %}
# ideally we would generate the pem from bcfks on gov cloud, but it is not possible until SafeLogic openssl is installed
keytool -importkeystore \
  -srckeystore ${JAVA_HOME}/jre/lib/security/cacerts \
  -srcstorepass changeit \
  -providerclass sun.security.pkcs11.SunPKCS11 \
  -providerarg ${JAVA_HOME}/jre/lib/security/nss.cfg \
  -destkeystore ${CACERTS_DIR}/cacerts.bcfks \
  -deststorepass changeit \
  -deststoretype BCFKS
rm -f ${CACERTS_DIR}/cacerts.p12
{% endif %}

ALTNAME=" --altname DNS:${FQDN} "
if [ -n "$LOADBALANCER_SAN" ]; then
  ALTNAME+="--altname ${LOADBALANCER_SAN} "
fi

/opt/cloudera/cm-agent/bin/certmanager --location $CERTMANAGER_DIR setup --skip-invalid-ca-certs --configure-services $CERTMANAGER_ARGS ${OVERRIDES} --stop-at-csr ${ALTNAME} --trusted-ca-certs ${CACERTS_DIR}/cacerts.pem
/opt/cloudera/cm/bin/generate_intermediate_ca_ipa.sh $CM_PRINCIPAL ${CERTMANAGER_DIR}/CMCA/private/ca_csr.pem $OUT_FILE
/opt/cloudera/cm-agent/bin/certmanager --location $CERTMANAGER_DIR setup --skip-invalid-ca-certs --configure-services $CERTMANAGER_ARGS ${OVERRIDES} --signed-ca-cert=$OUT_FILE --skip-cm-init ${ALTNAME} --trusted-ca-certs ${CACERTS_DIR}/cacerts.pem > $CERTMANAGER_DIR/auto-tls.init.txt
chmod 600 $CERTMANAGER_DIR/auto-tls.init.txt

rm -rf $OUT_FILE

echo "# Auto-tls related configurations" >> /etc/cloudera-scm-server/cm.settings
cat $CERTMANAGER_DIR/auto-tls.init.txt >> /etc/cloudera-scm-server/cm.settings

echo "Auto-TLS initialization completed successfully."

echo $(date +%Y-%m-%d:%H:%M:%S) >> $CERTMANAGER_DIR/autotls_setup_success
