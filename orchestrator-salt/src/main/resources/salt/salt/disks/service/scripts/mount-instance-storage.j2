#!/usr/bin/env bash

source /opt/salt/scripts/format-and-mount-common.sh

MOUNT_PATH="{{ (salt['pillar.get']('mount')[salt['grains.get']('fqdn')])['mount_path'] }}"
TEMPORARY_STORAGE="{{ (salt['pillar.get']('mount')[salt['grains.get']('fqdn')])['temporary_storage'] }}"
CLOUD_PLATFORM="{{ (salt['pillar.get']('mount')[salt['grains.get']('fqdn')])['cloud_platform'] }}"
LOG_FILE="/var/log/mount-instance-storage.log"
FS_TYPE=ext4

format_disks_if_unformatted() {
    local device_name_list=("$@")
    log $LOG_FILE "format disk arguments: ${device_name_list[@]}"
    local return_value=0
    for devicename in ${device_name_list[@]}; do
        log $LOG_FILE device: $devicename
        if [ -z "$(blkid $devicename)" ]; then
            log $LOG_FILE "formatting: $devicename"
            $(mkfs -E lazy_itable_init=1 -O uninit_bg -F -t $FS_TYPE $devicename >> $LOG_FILE 2>&1)
            if [ ! $? -eq 0 ]; then
            log $LOG_FILE "formatting of device $devicename failed"
            return_value=1
            fi
            log $LOG_FILE $format_result
        fi
    done
    return $((return_value))
}

mount_one() {
      local return_value=0
      local success=0
      local fstab_line=$1
      local path=$(echo $fstab_line | cut -d' ' -f2)

      log $LOG_FILE "mounting to path $path, line in fstab: $fstab_line"
      mkdir $path >> $LOG_FILE 2>&1
      echo $fstab_line >> /etc/fstab
      log $LOG_FILE result of editing fstab: $?
      mount $path >> $LOG_FILE 2>&1
      if [ ! $? -eq 0 ]; then
        log $LOG_FILE "error mounting device on $path"
        return_value=1
      fi
      log $LOG_FILE "result of mounting $path: $?"
      chmod 1777 $path >> $LOG_FILE 2>&1
      return $((return_value))
}

mount_all_sequential() {
    local device_uuids_arr=("$@")
    local return_value=0
    log $LOG_FILE "mounting storage devices ${device_uuids_arr[@]}"
    local hadoop_fs_dir_counter=1
    if [[ $MOUNT_PATH = *"ephfs"* ]]; then
      hadoop_fs_dir_counter=1
    else
      declare -a mountpoints_arr
      declare -a dirnum_arr
      mountpoints_arr=($(lsblk -n -oMOUNTPOINT))
      for mp in ${mountpoints_arr[@]}; do
        if [[ $mp == *"hadoopfs"* ]]; then
          num="${mp#/hadoopfs/fs*}"
          dirnum_arr+=($num)
        fi
      done
      max=${dirnum_arr[0]}
      for n in "${dirnum_arr[@]}" ; do
          ((n > max)) && max=$n
      done
      hadoop_fs_dir_counter=$((max+1))
    fi
    for uuid in ${device_uuids_arr[@]}; do
        mount_one "UUID=$uuid /hadoopfs/$MOUNT_PATH${hadoop_fs_dir_counter} $FS_TYPE defaults,noatime,nofail 0 2"
        ((hadoop_fs_dir_counter++))
        return_value=$(($? || return_value ))
    done

    log $LOG_FILE "mount all result: $return_value"
    return $((return_value))
}

clean_up_fstab() {
    log $LOG_FILE "clean up fstab"
    sed_expr="/"
    valid_uuids_expr=$(blkid -s UUID -o value | tr '\n' "|")
    sed_expr+=${valid_uuids_expr%?}'/!d'
    sed -i -E $sed_expr /etc/fstab
}

find_format_and_mount_tempstorage_azure() {
      local return_value=0

      declare -a inst_storage_devices_arr
      declare -a device_uuids_arr

      clean_up_fstab

      log $LOG_FILE "collecting NVMe temporary disks"
      readarray -t inst_storage_devices_arr < <(sudo nvme list -o json | jq -r  '.Devices[] | select(.ModelNumber == "Microsoft NVMe Direct Disk") | .DevicePath')

      format_disks_if_unformatted "${inst_storage_devices_arr[@]}"
      return_code=$?
      if [ ! $return_code -eq 0 ]; then
          log $LOG_FILE "could not format all NVMe temporary disks"
          return $((return_code))
      fi

      for device in "${inst_storage_devices_arr[@]}"; do
        local dev_uuid=$(blkid $device -s UUID -o value)
        log $LOG_FILE "NVMe temporary disks to be mounted: $device UUID: $dev_uuid"
        device_uuids_arr+=($dev_uuid)
      done

      local hadoop_ephfs_dir_counter=1

      if [ ${{ '{#' }}device_uuids_arr[@]} -eq 0 ]; then
        log $LOG_FILE "No NVMe temporary disks to mount"
      else
        for uuid in "${device_uuids_arr[@]}"; do
          mount_one "UUID=$uuid /hadoopfs/ephfs${hadoop_ephfs_dir_counter} $FS_TYPE defaults,noatime,nofail 0 2"
          ((hadoop_ephfs_dir_counter++))
          return_code=$?
          if [ ! $return_code -eq 0 ]; then
            log $LOG_FILE "Error mounting NVMe temporary disk"
            return $((return_code))
          fi
        done
        log $LOG_FILE "result of mounting NVMe temporary disks: $return_value"
      fi

      local path="/hadoopfs/ephfs${hadoop_ephfs_dir_counter}"

      log $LOG_FILE "Start mounting of regular temporary disk to path: $path"

      local device=""
      all_devices=$(blkid | awk '{print $1}' | sed 's/.$//')
      mounted_devices=$(df | tail -n +2 | awk '{print $1}')
      for dev in $all_devices; do
          if [[ ! ${mounted_devices[*]} =~ ${dev} ]]; then
              device=$dev
          fi
      done
      if [[ $device == "" ]]; then
        log $LOG_FILE No unmounted temporary disk found
        return_value=0
        return $((return_value))
      fi

      log $LOG_FILE "formatting: $device"
      $(mkfs -E lazy_itable_init=1 -O uninit_bg -F -t $FS_TYPE $device >> $LOG_FILE 2>&1)
      if [ ! $? -eq 0 ]; then
        log $LOG_FILE "formatting of device $device failed"
        return_value=1
        return $((return_value))
      fi

      log $LOG_FILE mounting $device temporary storage disk on path $path
      mkdir $path >> $LOG_FILE 2>&1
      log $LOG_FILE result of creating mount directory $path: $?
      mount -t $FS_TYPE -o defaults,noatime,nofail $device $path >> $LOG_FILE 2>&1
      if [ ! $? -eq 0 ]; then
        log $LOG_FILE error mounting temporary storage disk on $path
        return_value=1
        return $((return_value))
      fi
      log $LOG_FILE result of mounting $path: $?
      chmod 1777 $path >> $LOG_FILE 2>&1
      return $((return_value))
}

get_root_disk() {
    root_partition=$(lsblk | grep /$ | cut -f1 -d' ' )
    if [[ $root_partition =~ "nvme" ]]; then
        echo "/dev/$(lsblk | grep /$ | cut -f1 -d' ' | sed 's/p\w//g' | cut -c 3-)"
    else
        echo "/dev/$(lsblk | grep /$ | cut -f1 -d' ' | sed 's/[0-9]//g' | cut -c 3-)"
    fi
}

find_format_and_mount_ephemeral_storage_aws() {
    declare -a devices_arr
    declare -a inst_storage_devices_arr
    declare -a devices_log_arr
    declare -a device_uuids_arr

    clean_up_fstab

    log $LOG_FILE "collecting NVMe instance storage devices"
    readarray -t inst_storage_devices_arr < <(sudo nvme list -o json | jq -r  '.Devices[] | select(.ModelNumber == "Amazon EC2 NVMe Instance Storage") | .DevicePath')

    if [ ${{ '{#' }}inst_storage_devices_arr[@]} -eq 0 ]; then
        log $LOG_FILE "no NVMe instance storage found. Checking for other unmounted storage."
        readarray -t devices_arr < <(lsblk -n -oKNAME)
        devices_log=$(printf '%s ' "${devices_arr[@]}")
        log $LOG_FILE "All devices: $devices_log"

        root_disk=$(get_root_disk)
        for device in "${devices_arr[@]}"; do
            path="/dev/$device"
            if [[ $path == $root_disk* ]]; then
                log $LOG_FILE "skipping root disk/partition: $path"
            elif [[ -z $(grep "$path" /proc/mounts | cut -d ' ' -f1) ]]; then
                log $LOG_FILE "device '$path' is not mounted. Adding to devices to format and mount."
                inst_storage_devices_arr+=($path)
            fi
        done
        devices_log_arr=$(printf '%s ' "${inst_storage_devices_arr[@]}")
        log $LOG_FILE "unmounted devices: $devices_log_arr"
    else
        devices_log_arr=$(printf '%s ' "${inst_storage_devices_arr[@]}")
        log $LOG_FILE "NVMe instance storage devices: $devices_log_arr"
    fi

    format_disks_if_unformatted "${inst_storage_devices_arr[@]}"
    return_code=$?
    if [ ! $return_code -eq 0 ]; then
        log $LOG_FILE "could not format all devices"
        return $((return_code))
    fi

    for device in "${inst_storage_devices_arr[@]}"; do
      local dev_uuid=$(blkid $device -s UUID -o value)
      log $LOG_FILE "NVMe instance storage device: $device UUID: $dev_uuid"
      device_uuids_arr+=($dev_uuid)
    done

    mount_all_sequential ${device_uuids_arr[@]}
    return_code=$?
    if [ ! $return_code -eq 0 ]; then
        log $LOG_FILE "Not all devices were mounted"
        return $((return_code))
    fi

    return $((return_code))
}

is_there_a_volume_to_mount() {
    not_mounted_volume_names=$(lsblk_command | grep -v / | grep ^[a-z] | cut -f1 -d' ')
    root_disk=$(get_root_disk)
    for volume in $not_mounted_volume_names; do
      uuid=$(get_disk_uuid "/dev/$volume")
      if [[ $root_disk != "/dev/$volume" && "$uuid" = ""  ]]; then
        log $LOG_FILE "Found at least one volume which is not mounted."
        return
      fi
    done
    log $LOG_FILE "All volumes are mounted. Exiting"
    exit_with_code $LOG_FILE 0 "script 'mount-instance-storage' ended"
}

main () {
    log $LOG_FILE "script 'instance-storage-format-and-mount' starts"
    sleep 1

    if [[ "$CLOUD_PLATFORM" == "AZURE" && "$TEMPORARY_STORAGE" == "EPHEMERAL_VOLUMES" ]]; then
        log $LOG_FILE "Starting to remount Azure temporary storage device"
        find_format_and_mount_tempstorage_azure
        return_code=$?
        log $LOG_FILE result of remounting Azure temporary storage device: $return_code
        [[ ! $return_code -eq 0 ]] && exit_with_code $LOG_FILE $return_code "Error remounting Azure temporary storage device"
    elif [[ "$CLOUD_PLATFORM" == "AWS" ]]; then
        log $LOG_FILE "Starting to remount AWS ephemeral devices"
        is_there_a_volume_to_mount
        find_format_and_mount_ephemeral_storage_aws
        return_code=$?
        log $LOG_FILE result of remounting AWS ephemeral devices: $return_code
        [[ ! $return_code -eq 0 ]] && exit_with_code $LOG_FILE $return_code "Error remounting AWS ephemeral devices"
    fi

    exit_with_code $LOG_FILE 0 "script 'mount-instance-storage' ended"
}

[[ "$0" == "$BASH_SOURCE" ]] && main "$@"