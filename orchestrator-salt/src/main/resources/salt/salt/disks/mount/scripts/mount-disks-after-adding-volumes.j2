#!/usr/bin/env bash
set -x

DATABASE_VOLUME_INDEX="{{ (salt['pillar.get']('mount_data')[salt['grains.get']('fqdn')])['database_volume_index'] }}"
TEMPORARY_STORAGE="{{ (salt['pillar.get']('mount_data')[salt['grains.get']('fqdn')])['temporary_storage'] }}"
CLOUD_PLATFORM="{{ (salt['pillar.get']('mount_data')[salt['grains.get']('fqdn')])['cloud_platform'] }}"
PREVIOUS_FSTAB="{{ (salt['pillar.get']('mount_data')[salt['grains.get']('fqdn')])['previous_fstab'] }}"
FS_TYPE=ext4

source /opt/salt/scripts/format-and-mount-common.sh

LOG_FILE=/var/log/mount-disks-after-adding-volumes.log
VERSION="V1.0"

# OUTPUT
#   happy path:
#       exit code: 0
#
#   error:
#       exit code: not 0
#       stderr: a one line info. Details are in the log
format_disks_if_unformatted() {
    local device_name=$1
    local iter=$2
    log $LOG_FILE "format disk arguments: ${device_name}"
    local return_value=0
    log $LOG_FILE "device: ${device_name}"
    BLKID_OUTPUT=$(blkid "$device_name" 2>&1)
    log $LOG_FILE "blkid output: ${BLKID_OUTPUT}"
    if [ -z "$BLKID_OUTPUT" ]; then
        if [[ "$CLOUD_PLATFORM" == "GCP" ]]; then
          device_name=/dev/disk/by-id/google-local-nvme-ssd-${iter}
        fi
        log $LOG_FILE "formatting: ${device_name}"
        $(mkfs -E lazy_itable_init=1 -O uninit_bg -F -t $FS_TYPE ${device_name} >> $LOG_FILE 2>&1)
        if [ ! $? -eq 0 ]; then
        log $LOG_FILE "formatting of device ${device_name} failed"
        return_value=1
        fi
    fi
    return $((return_value))
}

unmount_instance_storage() {
  local counter=$(get_mounted_instance_storage_count)
  log $LOG_FILE number of ephemeral disks mounted under fs path: "$counter"
  while [[ counter -gt 0 ]]; do
      log $LOG_FILE unmounting ephemeral volume mounted under /fs"$counter"
      umount "/hadoopfs/fs${counter}" >> $LOG_FILE 2>&1
      log $LOG_FILE removing from fstab /hadoopfs/fs"$counter"
      sed -i -E "/hadoopfs\/fs${counter}/d" /etc/fstab
      sed -i -E "/hadoopfs\/ephfs${counter}/d" /etc/fstab
      ((counter--))
  done
}

unmount_storage() {
    local storage_path=$1
    local fs_path=$2
    if umount "${storage_path}" >> $LOG_FILE 2>&1; then
        sed -i -E "${fs_path}" /etc/fstab
    fi
}

unmount_and_mount_instance_store() {
    local counter=$1
    unmount_storage "/hadoopfs/ephfs${counter}" "/hadoopfs\/ephfs${counter}/d"
    if [ ! -z "$(nvme list | grep "Instance Storage")" ]; then
        mount_one "UUID=$uuid /hadoopfs/ephfs${counter} $FS_TYPE defaults,noatime,nofail 0 2"
        return_value=$(($? || return_value ))
        log $LOG_FILE "result of all mounting: $return_value"
        ((counter++))
    fi
    return $((counter))
}

unmount_and_mount_block_store() {
    local counter=$1
    unmount_storage "/hadoopfs/fs${counter}" "/hadoopfs\/fs${counter}/d"
    format_disks_if_unformatted "/dev/$volume" counter
    uuid=$(get_disk_uuid "/dev/$volume")
    log $LOG_FILE "mounting volume $volume with uuid ${uuid} to path /hadoopfs/fs${counter}"
    if [[ $uuid == $DATABASE_VOLUME_UUID ]]; then
        mount_one "UUID=$uuid /dbfs $FS_TYPE defaults,noatime,nofail 0 2"
    else
        mount_one "UUID=$uuid /hadoopfs/fs${counter} $FS_TYPE defaults,noatime,nofail 0 2"
        ((counter++))
    fi
    return $((counter))
}

mount_all_attached_disks_aws() {
      local hadoop_fs_dir_counter=1
      local hadoop_ephfs_dir_counter=1
      local return_value=0
      unmount_instance_storage
      not_mounted_volume_names=$(lsblk_command | grep -v part | grep ^[a-z] | cut -f1 -d' ')
      log $LOG_FILE remaining not mounted volumes: $not_mounted_volume_names
      root_disk=$(get_root_disk)
      for volume in $not_mounted_volume_names; do
          uuid=$(get_disk_uuid "/dev/$volume")
          if [[ $root_disk != "/dev/$volume" && "$uuid" != ""  ]] && not_elastic_block_store "/dev/$volume" $LOG_FILE; then
              unmount_and_mount_instance_store $hadoop_ephfs_dir_counter
              hadoop_ephfs_dir_counter=$?
          elif [[ "$root_disk" == "/dev/$volume" ]]; then
              log $LOG_FILE volume $volume is the root volume, skipping it
          elif ! not_elastic_block_store "/dev/$volume" $LOG_FILE ; then
              unmount_and_mount_block_store $hadoop_fs_dir_counter
              hadoop_fs_dir_counter=$?
          else
              log $LOG_FILE volume $volume has still no uuid, skipping it
              return_value=1
          fi
      done

    return $((return_value))
}

mount_all_attached_disks_azure() {
      local hadoop_fs_dir_counter=1
      local hadoop_ephfs_dir_counter=1
      local return_value=0
      local non_ebs_device_id=""
      not_mounted_volume_names=$(lsblk_command | grep -v part | grep ^[a-z] | cut -f1 -d' ')
      log $LOG_FILE remaining not mounted volumes: $not_mounted_volume_names
      if [[ "$TEMPORARY_STORAGE" == "EPHEMERAL_VOLUMES" ]]; then
           non_ebs_device_id="/dev/sdb"
      else
           non_ebs_device_id="/dev/sda"
      fi
      log $LOG_FILE non_ebs_device_id: $non_ebs_device_id
      for volume in $not_mounted_volume_names; do
          uuid=$(get_disk_uuid "/dev/$volume")
          if [[ "/dev/$volume" > "$non_ebs_device_id" ]]; then
              unmount_and_mount_block_store $hadoop_fs_dir_counter
              hadoop_fs_dir_counter=$?
          else
              log $LOG_FILE volume $volume is not EBS, skipping it
          fi
      done

    return $((return_value))
}

mount_one() {
      local return_value=0
      local fstab_line=$1
      local path=$(echo $fstab_line | cut -d' ' -f2)

      log $LOG_FILE "mounting to path $path, line in fstab: $fstab_line"
      mkdir $path >> $LOG_FILE 2>&1
      echo $fstab_line >> /etc/fstab
      log $LOG_FILE "result of editing fstab: $?"
      mount $path >> $LOG_FILE 2>&1
      if [ ! $? -eq 0 ]; then
        log $LOG_FILE "error mounting device on $path"
        return_value=1
      fi
      log $LOG_FILE "result of mounting $path: $?"
      chmod 1777 $path >> $LOG_FILE 2>&1
      return $((return_value))
}

mount_common() {
    local return_value
    mkdir /hadoopfs
    if [[ $DATABASE_VOLUME_INDEX != -1 ]]; then
      mkdir /dbfs
    fi
    if [[ "$CLOUD_PLATFORM" == "AZURE" ]]; then
      mount_all_attached_disks_azure
    else
      mount_all_attached_disks_aws
    fi
    return_value=$?
    return $((return_value))
}

create_directories() {
    if [ ! -d "/hadoopfs/fs1" ]; then
      log $LOG_FILE directory /hadoopfs/fs1 does not exists. Skipping log directory creation
      return 0
    fi

    cd /hadoopfs/fs1 && mkdir logs >> $LOG_FILE 2>&1

    fs1_logs_dir=/hadoopfs/fs1/logs
    [[ -d $fs1_logs_dir  ]] && return 0

    log $LOG_FILE there was an error creating log directories in /hadoopfs/fs1
    return 1
}

save_env_vars_to_log_file() {
    log $LOG_FILE environment variables:
    log $LOG_FILE TEMPORARY_STORAGE=$TEMPORARY_STORAGE
    log $LOG_FILE DATABASE_VOLUME_UUID=$DATABASE_VOLUME_UUID
    log $LOG_FILE CLOUD_PLATFORM=$CLOUD_PLATFORM
    log $LOG_FILE PREVIOUS_FSTAB=$PREVIOUS_FSTAB
}

main() {
    log $LOG_FILE "started, version: $VERSION"
    log $LOG_FILE We will calculate the device names and not using the ATTACHED_VOLUME_UUID_LIST which is $ATTACHED_VOLUME_UUID_LIST
    device_name_list=$(get_device_names $LOG_FILE)
    log $LOG_FILE The calculate device name list is $device_name_list
    export ATTACHED_VOLUME_UUID_LIST=$(get_uuid_list $LOG_FILE "$device_name_list") # ephemeral devices' uuid should not be returned
    log $LOG_FILE The calculated ATTACHED_VOLUME_UUID_LIST is $ATTACHED_VOLUME_UUID_LIST

    local attached_volume_uuid_array=($ATTACHED_VOLUME_UUID_LIST)
    if [[ $DATABASE_VOLUME_INDEX != -1 ]]; then
        export DATABASE_VOLUME_UUID=${attached_volume_uuid_array[DATABASE_VOLUME_INDEX]}
        log $LOG_FILE "database volume index is: $DATABASE_VOLUME_INDEX"
        log $LOG_FILE "database volume uuid based on its index: $DATABASE_VOLUME_UUID"
    else
        log $LOG_FILE "database volume uuid is not set as its index is -1."
    fi
    save_env_vars_to_log_file
    local script_name="mount-disk"

    mount_common
    return_code=$?
    [[ ! $return_code -eq 0 ]] && exit_with_code $LOG_FILE $return_code "Not all devices were mounted"

    create_directories
    return_code=$?
    [[ ! $return_code -eq 0 ]] && exit_with_code $LOG_FILE $return_code "Error creating directories on /hadoopfs/fs1"

    exit_with_code $LOG_FILE 0 "Script $script_name ended"
}

[[ "$0" == "$BASH_SOURCE" ]] && main "$@"