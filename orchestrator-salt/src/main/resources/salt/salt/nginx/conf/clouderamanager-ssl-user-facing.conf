map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

log_format main '$remote_addr - $remote_user [$time_local] '
                               '"$request" $status $bytes_sent '
                               '"$http_referer" "$http_user_agent" "$request_id" $request_time';
access_log /var/log/nginx/access.log main;

upstream knox {
    server 127.0.0.1:8443;
}

server {
    add_header x-response-nginx true always;
    listen       443 ssl;

    ssl_certificate      /etc/certs-user-facing/server.pem;
    ssl_certificate_key  /etc/certs-user-facing/server-key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;

    #If hadoop-jwt token is defined do not rewrite the path to go to clouderamanager -> go to knox
    if ($cookie_CLOUDERA_MANAGER_SESSIONID ~ .+) {
        set $rewritecondition  "cm-cookie";
    }
    if ($cookie_SESSION ~ .+) {
        set $rewritecondition  "cm-cookie";
    }
    if ($cookie_hadoop-jwt ~ .+) {
        set $rewritecondition  "${rewritecondition}+hadoop-jwt-cookie";
    }
    if ($rewritecondition = "cm-cookie") {
        rewrite ^([/](?!clouderamanager/).*$) /clouderamanager$1;
    }

{%- if 'HIVESERVER2' in salt['pillar.get']('gateway:location') %}
    rewrite ^/cliservice(.*)$ /{{ salt['pillar.get']('gateway:path') }}/cdp-proxy-api/hive$1;
    rewrite ^/hive2(.*)$ /{{ salt['pillar.get']('gateway:path') }}/cdp-proxy-api/hive$1;
{%- endif %}

{%- if 'IMPALAD' in salt['pillar.get']('gateway:location') %}
    rewrite ^/cliservice(.*)$ /{{ salt['pillar.get']('gateway:path') }}/cdp-proxy-api/impala$1;
    rewrite ^/hive2(.*)$ /{{ salt['pillar.get']('gateway:path') }}/cdp-proxy-api/impala$1;
{%- endif %}

    # If hadoop-jwt cookie not set and favicon is requested return 403.
    if ($cookie_hadoop-jwt !~ .+) {
        rewrite ^/favicon.ico$ /favicon.403;
    }
    location ~ ^/favicon.403$ {
        return 403;
    }

    location ~ .*/clouderamanager/(.*) {
        proxy_pass         {{ protocol }}://clouderamanager/$1$is_args$args;
        proxy_redirect     http:// https://;
        proxy_http_version 1.1;
        proxy_set_header   Host $host;
        proxy_set_header   X-Forwarded-Host $server_name;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection $connection_upgrade;
        proxy_set_header   Referer {{ protocol }}://$host/$1;
    }

    location ~ .*/ {
        proxy_pass         https://knox;
        proxy_connect_timeout       300;
        proxy_send_timeout          900;
        proxy_read_timeout          900;
        send_timeout                900;
        proxy_buffer_size  32k;
        proxy_buffers      8 32k;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   Referer https://$host/;
        proxy_set_header   X-Forwarded-Host $server_name;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   Expect $http_expect;
        # Ensure request_id/trace_id gets passed down to Knox
        proxy_set_header   X-Request-Id $request_id;
        # Ensure that websockets work
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        # Enable large uploads
        client_max_body_size 0;
    }
}
