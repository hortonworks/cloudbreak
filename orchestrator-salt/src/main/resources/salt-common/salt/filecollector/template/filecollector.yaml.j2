{%- from 'telemetry/settings.sls' import telemetry with context %}
{%- from 'filecollector/settings.sls' import filecollector with context %}
{%- from 'fluent/settings.sls' import fluent with context %}
collector:
    useFullPath: true
    outputLocation: "/var/lib/filecollector"
    files:{% for logfile in telemetry.logs %}{% if not ("type" in logfile and logfile["type"] == "salt" and not filecollector.includeSaltLogs) %}
    - path: {{ logfile["path"] }}{% if destination in ["CLOUD_STORAGE", "LOCAL", "SUPPORT"] %}
      compress: true{% endif %}
      folderPrefix: logs
      label: "{{ logfile["label"] }}"{% endif %}{% endfor %}
    - path: /var/log/cdp-logging-agent/cdp-logging-agent.log
      label: fluentd
      folderPrefix: logs{% if destination in ["CLOUD_STORAGE", "LOCAL", "SUPPORT"] %}
      compress: true{% endif %}
    - path: /var/log/td-agent/td-agent.log
      label: td-agent
      folderPrefix: logs{% if destination in ["CLOUD_STORAGE", "LOCAL", "SUPPORT"] %}
      compress: true{% endif %}
      useFullPath: false
      {% if destination in ["CLOUD_STORAGE", "LOCAL", "SUPPORT"] %}{% endif %}
    - path: /etc/unbound/conf.d/*
      label: unbound
      compress: true
      skipAnonymization: true
      folderPrefix: conf
    - path: /etc/resolv.conf
      label: resolv
      skipAnonymization: true
      useFullPath: false
      folderPrefix: conf
    - path: /etc/nginx/sites-enabled/**/**.conf
      label: nginx_sites_enabled
      skipAnonymization: true
      folderPrefix: conf{% if destination in ["CLOUD_STORAGE", "LOCAL", "SUPPORT"] %}
      compress: true{% endif %}
    - path: /var/lib/cdp-nodestatus/report/services_report.json
      label: nodestatus_services_report
      skipAnonymization: true
      useFullPath: false
      folderPrefix: report
      mandatory: true
    - path: /var/lib/cdp-nodestatus/report/network_report.json
      label: nodestatus_network_report
      skipAnonymization: true
      useFullPath: false
      folderPrefix: report
      mandatory: true
    - path: /var/lib/cdp-nodestatus/report/metering_report.json
      label: nodestatus_metering_report
      skipAnonymization: true
      useFullPath: false
      folderPrefix: report
      mandatory: true
    - path: /var/lib/cdp-nodestatus/report/system_metrics_report.json
      label: nodestatus_system_metrics_report
      skipAnonymization: true
      useFullPath: false
      folderPrefix: report
      mandatory: true
    - path: /var/lib/cdp-nodestatus/report/salt_report.json
      label: nodestatus_salt_report
      skipAnonymization: true
      useFullPath: false
      folderPrefix: report
      mandatory: true
    - path: /etc/nginx/nginx.conf
      label: nginx_conf
      skipAnonymization: true
      useFullPath: false
      folderPrefix: conf
    - path: /opt/cdp-telemetry/conf/diagnostics_request.json
      label: diagnostics_request
      mandatory: true
      skipLabelFromPath: true
      skipAnonymization: true
      useFullPath: false
    - path: /tmp/doctor*.txt
      label: doctor
      skipLabelFromPath: true
      skipAnonymization: true
      useFullPath: false
      folderPrefix: doctor{% if destination in ["CLOUD_STORAGE", "LOCAL"] %}
    - path: /tmp/cdp_report.html
      label: report
      skipLabelFromPath: true
      skipAnonymization: true
      useFullPath: false
      folderPrefix: report{% endif %}
{% if filecollector.additionalLogs %}{% for extra_log in filecollector.additionalLogs %}
    - path: "{{ extra_log["path"] }}"
      folderPrefix: logs{% if destination in ["CLOUD_STORAGE", "LOCAL", "SUPPORT"] %}
      compress: true{% endif %}
      label: {{ extra_log["label"] }}{% endfor %}{% endif %}
{% if destination in ["CLOUD_STORAGE", "LOCAL", "SUPPORT"] %}
    rules:{% for rule in telemetry.anonymizationRules %}{% set regex_value = rule["value"] %}{% set replacement = rule["replacement"] if rule["replacement"] else "[REDACTED]" %}
    - pattern: {{ regex_value }}
      replacement: "{{ replacement }}"{% endfor %}
    compress: true
    compressFormat: gztar
    deleteCompressedFile: false
    useExternalCommandForCompression: true
    usePerlScriptForAnonymization: false
    workspaceLimitBytes: 524288000
    workspaceWorkers: 1
    logProcessorWorkers: 1
    requiredDiskSpaceRatio: 1.7{% endif %}
    includeWorkspaceMetadata: true
    workspaceMetadataFileName: filecollector-metadata.json
    additionalWorkspaceMetadataFileNmae: bundle-info.json
    additionalWorkspaceMetadata:
        type: {{ filecollector.clusterType }}{% if filecollector.description %}
        name: {{ filecollector.description }}{% endif %}
        product-version: {{ filecollector.clusterVersion }}{% if filecollector.uuid %}
        uuid: {{ filecollector.uuid }} {% endif %}
        crns:
           Cloudera-Creator-Resource-Name: {{ filecollector.creatorCrn }}
           Cloudera-Resource-Name: {{ filecollector.resourceCrn }}
           Cloudera-Environment-Resource-Name: {{ filecollector.environmentCrn }}
        customer:
            accountId: {{ filecollector.accountId }}
            licenseId:{% if filecollector.issue %}
        Case_number: "{{ filecollector.issue }}"{% endif %}
{% if destination == "ENG" and fluent.dbusClusterLogsCollection %}
    compress: false
    deleteProcessedTempFilesOneByOne: true
    checkDiskSpace: false
    fluentProcessor:
        host: "localhost"
        port: {{ fluent.forwardPort }}
        additionalFieldsKey: "bundleContext"
        additionalFields:{% if filecollector.issue %}
            issue: "{{ filecollector.issue }}"{% endif%}{% if filecollector.description %}
            description: "{{ filecollector.description }}"{% endif%}
        tag: databus{% endif %}