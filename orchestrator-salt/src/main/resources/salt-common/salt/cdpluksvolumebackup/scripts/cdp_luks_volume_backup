#!/bin/bash
# Name: cdp_luks_volume_backup
# Description: Backup CDP LUKS volume and Upload backup to provided Cloud Location
################################################################
set -x

CONFIG_FILE=/etc/cdp_luks_volume_backup.conf
LUKS_BACKUP_DIR="$(date -I)"

LOCKFILE="/var/lock/$(basename "$0")"
LOCKFD=199
PRINT_DEBUG_MSGS=1

# PRIVATE
_lock()             { flock -"$1" ${LOCKFD}; }
_no_more_locking()  { _lock u; _lock xn && rm -f "${LOCKFILE}"; }
_prepare_locking()  { eval "exec ${LOCKFD}>\"${LOCKFILE}\""; trap _no_more_locking EXIT; }

# PUBLIC
exlock_now()        { _lock xn; }  # obtain an exclusive lock immediately or fail
exlock()            { _lock x; }   # obtain an exclusive lock
shlock()            { _lock s; }   # obtain a shared lock
unlock()            { _lock u; }   # drop a lock


# Config Defaults
typeset -A config # init array
config=( # set default values in config array
    [backup_location]=""
    [logfile]="/var/log/cdpluksvolumebackup.log"
    [luks_path]="/etc/cdp-luks"
    [aws_region]=""
    [aws_endpoint]=""
)

set +x
# Override defaults with config file
if [[ -f $CONFIG_FILE ]]; then
    while read -r line
    do
        if echo "${line}" | grep -F = &>/dev/null
        then
            varname=$(echo "${line}" | cut -d '=' -f 1)
            config[${varname}]=$(echo "${line}" | cut -d '=' -f 2-)
        fi
    done < $CONFIG_FILE
fi
set -x

LOGFILE="${config[logfile]}"
LUKS_BACKING_FILE=${config[luks_path]}/cdp-luks
LUKS_BACKUP_LOCATION="${config[luks_path]}/backup/${LUKS_BACKUP_DIR}"
CLOUD_BACKUP_LOCATION="${config[backup_location]}/$(hostname -f)/cdpluksvolumebackup/${LUKS_BACKUP_DIR}"
LOOP_DEVICE=$(losetup -j "$LUKS_BACKING_FILE" | cut -d ':' -f1)

doLog(){
    type_of_msg=$(echo "$*"|cut -d" " -f1)
    msg=$(echo "$*"|cut -d" " -f2-)
    [[ $type_of_msg == DEBUG ]] && [[ ${PRINT_DEBUG_MSGS} -ne 1 ]] && return
    [[ $type_of_msg == INFO ]] && type_of_msg="INFO " # one space for aligning
    [[ $type_of_msg == WARN ]] && type_of_msg="WARN " # as well

    echo "$(date "+%Y-%m-%dT%H:%M:%SZ") $type_of_msg $msg" >> "${LOGFILE}"
}

error_exit()
{
    doLog "ERROR $1"
    exit 1
}

remove_local_backups() {
    doLog "INFO Removing local backup copies"
    find "${config[luks_path]}/backup"/ -name "${LUKS_BACKUP_DIR}" -type d  -print0 | xargs -0 /usr/bin/rm -vrf >> "$LOGFILE" 2>&1 || error_exit "Unable to remove local backup copies"
}

upload_aws_backup() {
    echo "try to upload with default bucket encryption"
    # shellcheck disable=SC2086
    /usr/bin/aws ${REGION_OPTION} s3 cp --debug --recursive --no-progress "${LUKS_BACKUP_LOCATION}" "${CLOUD_BACKUP_LOCATION}" 2>&1 | /usr/local/bin/backup-log-filter.sh | tee -a "${LOGFILE}"
    ret_code=${PIPESTATUS[0]}

    if [[ "$ret_code" -ne "0" ]]
    then
        echo "try to upload with aws:kms encryption"
        # shellcheck disable=SC2086
        /usr/bin/aws ${REGION_OPTION} s3 cp --debug --recursive --sse aws:kms --no-progress "${LUKS_BACKUP_LOCATION}" "${CLOUD_BACKUP_LOCATION}" 2>&1 | /usr/local/bin/backup-log-filter.sh | tee -a "${LOGFILE}"
        ret_code=${PIPESTATUS[0]}
    fi

    if [[ "$ret_code" -ne "0" ]]
    then
        error_exit "Sync of backups to ${CLOUD_BACKUP_LOCATION} failed!"
    else
        echo "Uploaded successfully"
    fi
}

create_luks_backup() {
    if [[ -d ${LUKS_BACKUP_LOCATION} ]]; then
        doLog "${LUKS_BACKUP_LOCATION} already exists. Clean up the local backup"
        remove_local_backups
    fi
    mkdir -p "${LUKS_BACKUP_LOCATION}"
    cp ${LUKS_BACKING_FILE} "${LUKS_BACKUP_LOCATION}"
    cp ${config[luks_path]}/passphrase_ciphertext "${LUKS_BACKUP_LOCATION}"
    if ! cryptsetup luksHeaderBackup "$LOOP_DEVICE" \
                      --header-backup-file "$LUKS_BACKUP_LOCATION/luks_header" \
                      --debug; then
        error_exit "Failed to create backup of the header of the LUKS volume"
    fi
}


# ON START
_prepare_locking

doLog "INFO Running LUKS backup."
exlock_now || error_exit "A backup seems to be currently running. Lock file is at ${LOCKFILE}"

create_luks_backup

doLog "DEBUG Uploading backup to ${CLOUD_BACKUP_LOCATION} on AWS"

doLog "INFO Syncing backups to AWS S3"

REGION_OPTION=""
if [[ -n "${config[aws_region]}" ]]; then
  if [[ -n "${config[aws_endpoint]}" ]]; then
    doLog "INFO Using --endpoint-url for upload to S3"
    REGION_OPTION="--endpoint-url ${config[aws_endpoint]} --region ${config[aws_region]}"
  else
    doLog "INFO Using only --region and UseFIPS=true for upload to S3"
    export AWS_USE_FIPS_ENDPOINT=true
    REGION_OPTION="--region ${config[aws_region]}"
  fi
fi
upload_aws_backup
remove_local_backups
