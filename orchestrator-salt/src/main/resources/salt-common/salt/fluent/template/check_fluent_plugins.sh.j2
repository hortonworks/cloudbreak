{%- from 'fluent/settings.sls' import fluent with context %}
#!/bin/sh

function install_plugin() {
  local plugin=$1
  local custom_repo=$2
  local version=$3

  install_command="/opt/td-agent/embedded/bin/fluent-gem install ${plugin}"
  if [[ "${custom_repo}" == "true" ]]; then
     check_connection "{{ fluent.clouderaPublicGemRepo }}" "${plugin}" "${version}"
     install_command="${install_command} -s  {{ fluent.clouderaPublicGemRepo }}"
  else
     check_connection "https://api.rubygems.org" "${plugin}" "${version}"
  fi

  if [[ ! -z "${version}" ]]; then
     install_command="${install_command} -v ${version}"
     /opt/td-agent/embedded/bin/fluent-gem uninstall "${plugin}"
  fi

  if [[ -n "${https_proxy}" ]]; then
     install_command="${install_command} --http-proxy ${https_proxy}"
  fi
  echo "Run install command: ${install_command}"
  command_result=$(${install_command})
  echo "Install ${plugin} command output: ${command_result}"
}

function check_connection() {
  check_conn_res=$(curl -f -s -I "$1" &>/dev/null && echo OK || echo FAIL)
  plugin=$2
  version=$3
  if [[ "$check_conn_res" == "FAIL" ]]; then
    local plugin_error_message="required fluent gem: ${plugin}"
    if [[ ! -z "${version}" ]]; then
      plugin_error_message="required ${plugin} gem version is ${version}"
    fi
    echo "Connection has failed for $1. Please check your firewall or use a newer OS image (${plugin_error_message}) or reach out Cloudera (Cloudbreak) support!" >>/dev/stderr
    exit 1
  else
    echo "Connection Ok: $1"
  fi
}

function check_and_install_plugin() {
  local plugin=$1
  local custom_repo=$2
  local version=$3
  check_command="/opt/td-agent/embedded/bin/fluent-gem list -i ${plugin}"
  if [[ ! -z "${version}" ]]; then
    check_command="$check_command -v '>=${version}'"
    echo "Checking plugin ${plugin} with the right minimal version ${version}"
  fi
  echo "Run check command: $check_command"
  local result=$(eval "$check_command")
  echo "Check ${plugin} command output: $result"
  if [[ "$result" == "false" ]]; then
    echo "Plugin ${plugin} does not exist, installing it..."
    install_plugin "${plugin}" "${custom_repo}" "${version}"
  else
    echo "Plugin ${plugin} exists."
  fi
}

function main() {
  {% if fluent.platform == 'AZURE' %}
  check_and_install_plugin "fluent-plugin-azurestorage" "true" "{{ fluent.clouderaAzurePluginVersion }}"
  check_and_install_plugin "fluent-plugin-azurestorage-gen2" "false" "{{ fluent.clouderaAzureGen2PluginVersion }}"
  {% endif %}
  check_and_install_plugin "fluent-plugin-redaction" "false" "{{ fluent.redactionPluginVersion }}"
  check_and_install_plugin "fluent-plugin-detect-exceptions" "false" ""
  check_and_install_plugin "fluent-plugin-databus" "true" "{{ fluent.clouderaDatabusPluginVersion }}"
}

main ${1+"$@"}