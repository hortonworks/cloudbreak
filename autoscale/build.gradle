import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        maven { url = "$repoUrl" }
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarVersion}"
    }
}

plugins {
    id "org.sonarqube" version "${sonarVersion}"
    id 'maven-publish'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: "org.sonarqube"


sonar {
    properties {
        property("sonar.projectName", "cb-autoscale-service")
        property("sonar.projectKey", "cb-autoscale-service")
        property("sonar.java.coveragePlugin", "plugin")
        property("sonar.sourceEncoding", "UTF-8")
        property("sonar.sources", "src/main")
        property("sonar.tests", "src/test")
        property("sonar.java.binaries", "build/classes")
        property("sonar.project.reporting.outputEncoding", "UTF-8")
        property("sonar.host.url", "$System.env.SONAR_URL")
        property("sonar.token", "$System.env.SONAR_TOKEN")
        property("org.gradle.internal.http.socketTimeout", "600000")
        property("org.gradle.internal.http.connectionTimeout", "600000")
        property("sonar.coverage.exclusions", "**/proto/**,**/generated/**")
        property("sonar.exclusions", "**/proto/**,**/generated/**")
    }
}

bootRun {
    systemProperty 'spring.profiles.active', System.properties['spring.profiles.active']
    systemProperty 'spring.config.location', System.properties['spring.config.location']
    systemProperty 'spring.config.additional-location', System.properties['spring.config.additional-location']
    if (project.hasProperty('jvmArgs')) {
        jvmArgs += project.jvmArgs.split("\\s+").toList()
    }
    jvmArgs += ['--add-opens','java.base/java.util.concurrent=ALL-UNNAMED']
}

bootRun {
    mainClass = 'com.sequenceiq.periscope.PeriscopeApplication'
}

bootJar {
    archiveBaseName = 'periscope'
    archiveFileName = 'periscope.jar'
    manifest {
        def grgit = Grgit.open(currentDir: project.projectDir)
        attributes "Implementation-Version": grgit.describe()
    }
}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
            artifactId "periscope"
        }
    }
    repositories {
        maven {
            url = "$System.env.NEXUS_URL"
            allowInsecureProtocol = true
            credentials {
                username = "$System.env.NEXUS_USER"
                password = "$System.env.NEXUS_PASSWORD"
            }
        }
    }
}

configurations {
    implementation {
        resolutionStrategy {
            exclude group: 'org.testng'
        }
    }
}

project.tasks.named("bootJar") {
    duplicatesStrategy = 'include'
}

configurations.all {
    resolutionStrategy {
        force "net.bytebuddy:byte-buddy:${byteBuddyVersion}"
    }
}

dependencyManagement {
    dependencies {
        dependencySet(group: 'org.springframework.boot', version: springBootVersion) {
            entry 'spring-boot-starter'
            entry ('spring-boot-starter-web') {
                exclude group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
            }
            entry ('spring-boot-starter-actuator') {
                exclude group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
            }
            entry 'spring-boot-starter-data-jpa'
            entry 'spring-boot-starter-aop'
            entry 'spring-boot-starter-freemarker'
            entry ('spring-boot-starter-jersey') {
                exclude group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
            }
            entry 'spring-boot-starter-test'
            entry 'spring-boot-starter-freemarker'
        }

        dependency group: 'xerces',              name: 'xercesImpl',            version: xerces

        dependency group: 'com.fasterxml.jackson.core',    name: 'jackson-databind',               version: jacksonVersion
        dependency group: 'org.springframework',           name: 'spring-context-support',         version: springFrameworkVersion
        dependency group: 'com.zaxxer',                    name: 'HikariCP',                       version: hikariCPVersion

        dependency group: 'com.google.code.gson',               name: 'gson',                      version: gsonVersion
        dependency group: 'org.apache.hadoop',                  name: 'hadoop-yarn-api',           version: hadoopVersion
        dependency group: 'org.freemarker',                     name: 'freemarker',                version: freemarkerVersion
        dependency (group: 'org.quartz-scheduler',               name: 'quartz',                   version: quartzVersion) {
            exclude group: 'com.zaxxer', name: 'HikariCP-java7'
        }
        dependency group: 'org.postgresql',                     name: 'postgresql',                version: postgreSQLVersion
        dependency group: 'org.mybatis',                        name: 'mybatis-migrations',        version: mybatisMigrationVersion
        dependency group: 'org.mockito',                        name: 'mockito-core',              version: mockitoVersion
        dependency group: 'com.openpojo',                       name: 'openpojo',                  version: openPojoVersion
    }
}

dependencies {
  implementation group: 'org.springframework.data',           name: 'spring-data-envers',         version: springDataJpaFrameworkVersion


    implementation group: 'com.squareup.okhttp3',               name: 'okhttp',                     version: okhttpVersion
    implementation group: 'com.fasterxml.jackson.core',         name: 'jackson-databind'
    implementation group: 'org.springframework.boot',           name: 'spring-boot-starter'
    implementation group: 'org.springframework.boot',           name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot',           name: 'spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.boot',           name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot',           name: 'spring-boot-starter-freemarker'
    implementation group: 'org.springframework.boot',           name: 'spring-boot-starter-jersey'
    implementation group: 'org.glassfish.jersey.ext',           name: 'jersey-micrometer',              version: jerseyMicrometerVersion

    implementation group: 'com.google.code.gson',          name: 'gson'
    implementation group: 'org.apache.hadoop',             name: 'hadoop-yarn-api'
    implementation group: 'org.freemarker',                name: 'freemarker'
    implementation group: 'org.postgresql',                name: 'postgresql'
    implementation group: 'org.mybatis',                   name: 'mybatis-migrations'
    implementation group: 'org.quartz-scheduler',          name: 'quartz'
    implementation group: 'com.zaxxer',                    name: 'HikariCP'

    implementation group: 'io.swagger.core.v3',        name: 'swagger-jaxrs2-jakarta',                   version: swaggerCoreVersion
    implementation group: 'javax.xml.bind',            name: 'jaxb-api',                                 version: javaxXmlBindJaxbApiVersion

    implementation group: 'com.dyngr',                 name: 'polling',                                  version: dyngrPollingVersion

    testImplementation group: 'net.bytebuddy',             name: 'byte-buddy',                           version: byteBuddyVersion
    testImplementation group: 'org.springframework.boot',  name: 'spring-boot-starter-test'
    testImplementation group: 'org.mockito',               name: 'mockito-core'
    testImplementation group: 'com.openpojo',              name: 'openpojo'
    testImplementation group: "com.h2database",            name: "h2",     version: h2databaseVersion
    testImplementation project(path: ':common', configuration: 'tests')
    testImplementation project(path: ':authorization-common', configuration: 'tests')

    implementation project(':core-api')
    implementation project(':autoscale-api')
    implementation project(':freeipa-api')
    implementation project(':common')
    implementation project(':workspace')
    implementation project(':secret-engine')
    implementation project(':client-cm')
    implementation project(':authorization-common')
    implementation project(':usage-collection')
    implementation(project(":audit-connector")) {
      transitive = false
    }
    implementation project(':service-common')
}

test {
    include 'com/sequenceiq/**'
    testLogging.showStandardStreams = false
    ignoreFailures = false
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}
