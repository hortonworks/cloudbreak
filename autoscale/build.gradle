import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        mavenLocal()
        maven { url = "$repoUrl" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'info.solidsoft.pitest'

bootRun {
    systemProperty 'spring.profiles.active', System.properties['spring.profiles.active']
    systemProperty 'spring.config.location', System.properties['spring.config.location']
    systemProperty 'spring.config.additional-location', System.properties['spring.config.additional-location']
    if (project.hasProperty('jvmArgs')) {
        jvmArgs += project.jvmArgs.split("\\s+").toList()
    }
}

jar {
    baseName = 'periscope'
    archiveName = 'periscope.jar'
}

bootJar {
    baseName = 'periscope'
    archiveName = 'periscope.jar'
    manifest {
        def grgit = Grgit.open(currentDir: project.projectDir)
        attributes "Implementation-Version": grgit.describe()
    }
}

springBoot {
    mainClassName = 'com.sequenceiq.periscope.PeriscopeApplication'
}

dependencyManagement {
    dependencies {
        dependencySet(group: 'org.springframework.boot', version: springBootVersion) {
            entry 'spring-boot-starter'
            entry ('spring-boot-starter-web') {
                exclude group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
            }
            entry ('spring-boot-starter-actuator') {
                exclude group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
            }
            entry 'spring-boot-starter-data-jpa'
            entry 'spring-boot-starter-aop'
            entry 'spring-boot-starter-freemarker'
            entry 'spring-boot-starter-security'
            entry ('spring-boot-starter-jersey') {
                exclude group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
            }
            entry 'spring-boot-starter-test'
            entry 'spring-boot-starter-freemarker'
        }

        dependencySet(group: 'io.springfox', version: '2.9.2') {
            entry 'springfox-swagger2'
            entry 'springfox-core'
            entry 'springfox-swagger-ui'
        }

        dependencySet (group: 'org.powermock', version: powermockVersion) {
            entry 'powermock-module-junit4'
            entry('powermock-api-mockito2') {
                exclude group: 'org.hamcrest', name: '*'
            }
        }
        dependency group: 'xerces',              name: 'xercesImpl',            version: xerces

        dependency (group: 'io.swagger',                    name: 'swagger-jersey2-jaxrs',          version: swaggerVersion) {
          exclude 'org.yaml:snakeyaml'
        }
        dependency group: 'com.fasterxml.jackson.core',    name: 'jackson-databind',               version: jacksonDatabindVersion
        dependency group: 'javax.mail',                    name: 'mail',                           version: '1.5.0-b01'
        dependency group: 'dnsjava',                       name: 'dnsjava',                        version: '2.1.7'
        dependency group: 'javax.xml.bind',                name: 'jaxb-api',                       version: '2.3.0'
        dependency group: 'com.sun.xml.bind',              name: 'jaxb-impl',                      version: '2.3.0'
        dependency group: 'org.glassfish.jaxb',            name: 'jaxb-runtime',                   version: '2.3.0'
        dependency group: 'org.springframework',           name: 'spring-context-support',         version: springFrameworkVersion
        dependency group: 'com.zaxxer',                    name: 'HikariCP',                       version: '3.2.0'

        dependency group: 'com.google.code.gson',               name: 'gson',                      version: '2.6.2'
        dependency (group: 'org.codehaus.groovy',                name: 'groovy-all',                version: '2.5.6') {
            exclude 'org.testng:testng'
        }
        dependency group: 'org.apache.hadoop',                  name: 'hadoop-yarn-api',           version: hadoopVersion
        dependency group: 'org.freemarker',                     name: 'freemarker',                version: freemarkerVersion
        dependency (group: 'org.quartz-scheduler',               name: 'quartz',                    version: '2.3.1') {
            exclude 'com.zaxxer:HikariCP'
        }
        dependency group: 'org.postgresql',                     name: 'postgresql',                version: postgreSQLVersion
        dependency group: 'org.mybatis',                        name: 'mybatis-migrations',        version: '3.2.0'
        dependency group: 'org.mockito',                        name: 'mockito-core',              version: mockitoVersion
        dependency group: 'com.openpojo',                       name: 'openpojo',                  version: openPojoVersion
        dependency group: 'org.ow2.asm',                        name: 'asm',                       version: asmVersion
        dependency group: 'com.sequenceiq',                     name: 'consul-api',                version: '1.10'
    }
}

dependencies {
    compile("com.sequenceiq:${ambariClientName}:${ambariClientVersion}") {
        exclude group: 'org.slf4j'
        exclude group: 'xerces.xercesImpl'
    }

    compile group: 'com.fasterxml.jackson.core',         name: 'jackson-databind'
    compile group: 'org.springframework.boot',           name: 'spring-boot-starter'
    compile group: 'org.springframework.boot',           name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot',           name: 'spring-boot-starter-security'
    compile group: 'org.springframework.boot',           name: 'spring-boot-starter-data-jpa'
    compile group: 'org.springframework.boot',           name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot',           name: 'spring-boot-starter-freemarker'
    compile group: 'org.springframework.boot',           name: 'spring-boot-starter-jersey'

    compile group: 'com.google.code.gson',          name: 'gson'
    compile group: 'org.codehaus.groovy',           name: 'groovy-all'
    compile group: 'org.apache.hadoop',             name: 'hadoop-yarn-api'
    compile group: 'org.freemarker',                name: 'freemarker'
    compile group: 'org.postgresql',                name: 'postgresql'
    compile group: 'org.mybatis',                   name: 'mybatis-migrations'
    compile group: 'org.quartz-scheduler',          name: 'quartz'
    compile group: 'com.zaxxer',                    name: 'HikariCP' 
    compile group: 'javax.mail',                    name: 'mail'
    compile group: 'dnsjava',                       name: 'dnsjava'
    compile group: 'net.sf.ehcache',                name: 'ehcache'

    compile group: 'io.springfox',                  name: 'springfox-swagger2'
    compile group: 'io.springfox',                  name: 'springfox-core'
    compile group: 'io.springfox',                  name: 'springfox-swagger-ui'

    compile group: 'io.opentracing.contrib',    name: 'opentracing-spring-jaeger-starter',        version: opentracingSpringJaegerStarterVersion

    implementation     ('io.swagger:swagger-jersey2-jaxrs') {
      exclude group: 'org.yaml'
    }

    compile group: 'com.sequenceiq',                name: 'consul-api'

    runtime group: 'javax.xml.bind',                name: 'jaxb-api'
    runtime group: 'com.sun.xml.bind',              name: 'jaxb-impl'
    runtime group: 'org.glassfish.jaxb',            name: 'jaxb-runtime'

    testCompile group: 'org.springframework.boot',  name: 'spring-boot-starter-test'
    testCompile group: 'org.mockito',               name: 'mockito-core'
    testCompile group: 'org.powermock',             name: 'powermock-module-junit4'
    testCompile group: 'org.powermock',             name: 'powermock-api-mockito2'
    testCompile group: 'org.ow2.asm',               name: 'asm'
    testCompile group: 'com.openpojo',              name: 'openpojo'

    compile project(':core-api')
    compile project(':autoscale-api')
    compile project(':common')
    compile project(':workspace')
    compile project(':secret-engine')
    compile project(':client-cm')
}

task buildInfo(type: BuildInfoTask, dependsOn: processResources) {
    destination = file("$buildDir")
    applicationPropertiesPath = "$buildDir"
    basename = jar.baseName
    buildVersion = version
}

test {
    include 'com/sequenceiq/**'
    testLogging.showStandardStreams = true
    ignoreFailures = false
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

compileJava.dependsOn buildInfo

class BuildInfoTask extends DefaultTask {
    File destination = new File("build.info")
    String applicationPropertiesPath
    String basename
    String buildVersion

    @TaskAction
    def writeBuildInfo() {
        List<File> applicationDestinations = []

        applicationDestinations += project.file("out/production/resources")
        applicationDestinations += new File(applicationPropertiesPath + "/resources/main")

        destination.mkdirs()
        String activeProfile = determineActiveProfile()

        // if using dev environment this condition is true
        if (buildVersion.contains("+") || buildVersion == "unspecified") {
            def grgit = Grgit.open(currentDir: project.projectDir)
            buildVersion = grgit.describe()
            println "buildVersion from git: " + buildVersion
        }
        new File(destination, "build.info").withWriter { out ->
            [
                    "ARTIFACT_BASENAME=" + basename,
                    "ARTIFACT_VERSION=" + buildVersion,
            ].each { out.println it }
        }
        applicationDestinations.each {
            it.mkdirs()
            new File(it, "application.properties").withWriter { out ->
                [
                        "info.app.name=" + basename,
                        "info.app.version=" + buildVersion,
                        "spring.profiles.active=" + activeProfile
                ].each { out.println it }
            }
        }
    }

    private String determineActiveProfile() {
        String activeProfile = "dev"
        if (buildVersion.contains("dev") || buildVersion.equals("unspecified")) {
            activeProfile = "dev"
        } else if (buildVersion.contains("rc")) {
            activeProfile = "rc"
        } else {
            activeProfile = "prod"
        }
        return activeProfile
    }
}
