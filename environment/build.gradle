import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        maven { url = "$repoUrl" }
        maven { url = "$springRepoUrl" }
        mavenCentral()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarVersion}"
    }
}

plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.1.2.RELEASE'
    id "org.sonarqube" version "${sonarVersion}"
}

apply plugin: org.sonarqube.gradle.SonarQubePlugin

configurations.all {
    resolutionStrategy {
        force "net.bytebuddy:byte-buddy:1.9.13"
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectName", "cb-environment-service"
        property "sonar.projectKey", "cb-environment-service"
        property "sonar.java.coveragePlugin", "plugin"
        property "sonar.sources", "src/main"
        property "sonar.tests", "src/test"
        property "sonar.java.binaries", "build/classes"
        property "sonar.java.libraries", "build/libs/*.jar"
        property "project.reporting.outputEncoding", "UTF-8"
        property "sonar.host.url", "$System.env.SONAR_URL"
        property "sonar.login", "$System.env.SONAR_PASSWORD"
        property "org.gradle.internal.http.socketTimeout", "600000"
        property "org.gradle.internal.http.connectionTimeout", "600000"
        property "sonar.coverage.exclusions", "**/proto/**,**/generated/**"
        property "sonar.exclusions", "**/proto/**,**/generated/**"
    }
}

dependencies {
    implementation project(':audit-connector')
    implementation     project(":authorization-common")
    implementation     project(":common")
    implementation     project(":secret-engine")
    implementation     project(":flow")
    implementation     project(":auth-connector")
    implementation     project(":environment-api")
    implementation     project(":notification-sender")
    implementation     project(":cloud-reactor")
    implementation     project(":cloud-reactor-api")
    implementation     project(":datalake-api")
    implementation     project(":core-api")
    implementation     project(":cloud-aws-cloudformation")
    implementation     project(":cloud-aws-common")
    implementation     project(":cloud-azure")
    implementation     project(":cloud-mock")
    implementation     project(":cloud-yarn")
    implementation     project(":cloud-gcp")
    implementation     project(":core-api")
    implementation     project(":idbmms-connector")
    implementation     project(":redbeams-api")
    implementation     project(":freeipa-api")
    implementation     project(":structuredevent-service-cdp")
    implementation     project(":status-checker")
    implementation     project(":template-manager-tag")
    implementation     project(':cluster-dns-connector')

    implementation     group: "org.yaml",                  name: "snakeyaml",                                version: snakeYamlVersion
    implementation     group: "com.google.code.gson",      name: "gson",                                     version: gsonVersion
    implementation     group: "dnsjava",                   name: "dnsjava",                                  version: dnsjavaVersion
    implementation     group: "io.springfox",              name: "springfox-boot-starter",                   version: swaggerSpringFoxVersion
    implementation    (group: "io.swagger",                name: "swagger-jersey2-jaxrs",                    version: swaggerVersion) {
        exclude group: "org.yaml", module: "snakeyaml"
    }
    implementation     group: "javax.xml.bind",            name: "jaxb-api",                                 version: "2.3.1"
    implementation     group: "org.glassfish.jersey.core", name: "jersey-server",                            version: jerseyCoreVersion
    implementation     group: "org.mybatis",               name: "mybatis-migrations",                       version: mybatisMigrationVersion
    implementation     group: "org.postgresql",            name: "postgresql",                               version: postgreSQLVersion
    implementation     group: "org.springframework.boot",  name: "spring-boot-starter",                      version: springBootVersion
    implementation     group: "org.springframework.boot",  name: "spring-boot-starter-web",                  version: springBootVersion
    implementation     group: "org.springframework.boot",  name: "spring-boot-starter-actuator",             version: springBootVersion
    implementation     group: "org.springframework.boot",  name: "spring-boot-starter-jersey",               version: springBootVersion
    implementation     group: "org.springframework.boot",  name: "spring-boot-starter-data-jpa",             version: springBootVersion
    implementation     group: 'org.springframework.boot',  name: 'spring-boot-starter-quartz',               version: springBootVersion
    implementation     group: "io.projectreactor",         name: "reactor-core",                             version: eventBusVersion
    implementation     group: "io.projectreactor",         name: "reactor-bus",                              version: eventBusVersion
    implementation     group: 'com.dyngr',                 name: 'polling',                                  version: '1.1.3'
    implementation     group: 'net.sourceforge.jregex',    name: 'jregex',                                   version: '1.2_01'
    implementation     group: 'com.fasterxml.jackson.core',name: 'jackson-databind',                         version: jacksonVersion

    implementation(group: 'net.minidev', name: 'json-smart') {
      version {
        strictly jsonSmartVersion
      }
      because 'CVE-2021-31684'
    }
    implementation(group: 'net.minidev', name: 'accessors-smart') {
      version {
        strictly accessorSmartVersion
      }
      because 'because there is no jar for 2.4.3 in maven central repo...'
    }

    testImplementation project(path: ':authorization-common', configuration: 'tests')
    testImplementation project(path: ':common', configuration: 'tests')
    testImplementation project(path: ':flow', configuration: 'tests')
    testImplementation group: "org.mockito",               name: "mockito-core",                             version: mockitoVersion
    testImplementation(group: "org.springframework.boot",  name: "spring-boot-starter-test",                 version: springBootVersion) {
        exclude group: "junit"
    }

    testImplementation group: "com.openpojo",              name: "openpojo",                                 version: openPojoVersion
    testImplementation group: "com.h2database",            name: "h2",                                       version: h2databaseVersion
    testImplementation group: "org.mockito",               name: "mockito-core",                             version: mockitoVersion
    testImplementation group: "com.google.guava",          name: "guava",                                    version: guavaVersion
    testImplementation group: 'org.assertj',               name: 'assertj-core',                             version: assertjVersion
}

bootRun {
  systemProperty "spring.profiles.active", System.properties["spring.profiles.active"]
  systemProperty "spring.config.location", System.properties["spring.config.location"]
  systemProperty 'spring.config.additional-location', System.properties['spring.config.additional-location']

  environment "AWS_ACCESS_KEY_ID", System.getenv('AWS_ACCESS_KEY_ID')
  environment "AWS_SECRET_ACCESS_KEY", System.getenv('AWS_SECRET_ACCESS_KEY')
  environment "CB_AWS_ACCOUNT_ID", System.getenv('CB_AWS_ACCOUNT_ID')
  //Probably will need to add more for AZURE, GOV_CLOUD, GCE, etc

  if (project.hasProperty("jvmArgs")) {
    jvmArgs += project.jvmArgs.split("\\s+").toList()
  }
}

bootRun {
  main = "com.sequenceiq.environment.EnvironmentApplication"
}

bootJar {
  baseName = "environment"
  archiveName = "environment.jar"
  manifest {
    def grgit = Grgit.open(currentDir: project.projectDir)
    attributes "Implementation-Version": grgit.describe()
  }
}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
    repositories {
        maven {
            url = "$System.env.NEXUS_URL"
            allowInsecureProtocol = true
            credentials {
                username = "$System.env.NEXUS_USER"
                password = "$System.env.NEXUS_PASSWORD"
            }
        }
    }
}
