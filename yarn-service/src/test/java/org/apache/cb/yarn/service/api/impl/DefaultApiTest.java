/*
 * YARN Simplified API layer for services
 * Bringing a new service on YARN today is not a simple experience. The APIs of existing frameworks are either too low level (native YARN), require writing new code (for frameworks with programmatic APIs) or writing a complex spec (for declarative frameworks).  This simplified REST API can be used to create and manage the lifecycle of YARN services. In most cases, the application owner will not be forced to make any changes to their applications. This is primarily true if the application is packaged with containerization technologies like Docker.  This document describes the API specifications (aka. YarnFile) for deploying/managing containerized services on YARN. The same JSON spec can be used for both REST API and CLI to manage the services. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.apache.cb.yarn.service.api.impl;

import java.util.List;

import org.apache.cb.yarn.service.api.ApiException;
import org.apache.cb.yarn.service.api.records.Component;
import org.apache.cb.yarn.service.api.records.Service;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * (TBD) List of services running in the cluster.
     *
     * Get a list of all currently running services (response includes a minimal projection of the service info). For more details do a GET on a specific service name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appV1ServicesGetTest() throws ApiException {
        List<Service> response = api.appV1ServicesGet();

        // TODO: test validations
    }
    
    /**
     * Create a service
     *
     * Create a service. The request JSON is a service object with details required for creation. If the request is successful it returns 202 Accepted. A success of this API only confirms success in submission of the service creation request. There is no guarantee that the service will actually reach a RUNNING state. Resource availability and several other factors determines if the service will be deployed in the cluster. It is expected that clients would subsequently call the GET API to get details of the service and determine its state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appV1ServicesPostTest() throws ApiException {
        Service service = null;
        api.appV1ServicesPost(service);

        // TODO: test validations
    }
    
    /**
     * Flex a component&#39;s number of instances.
     *
     * Set a component&#39;s desired number of instanes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appV1ServicesServiceNameComponentsComponentNamePutTest() throws ApiException {
        String serviceName = null;
        String componentName = null;
        Component component = null;
        api.appV1ServicesServiceNameComponentsComponentNamePut(serviceName, componentName, component);

        // TODO: test validations
    }
    
    /**
     * Destroy a service
     *
     * Destroy a service and release all resources. This API might have to return JSON data providing location of logs (TBD), etc.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appV1ServicesServiceNameDeleteTest() throws ApiException {
        String serviceName = null;
        api.appV1ServicesServiceNameDelete(serviceName);

        // TODO: test validations
    }
    
    /**
     * Get details of a service.
     *
     * Return the details (including containers) of a running service
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appV1ServicesServiceNameGetTest() throws ApiException {
        String serviceName = null;
        Object response = api.appV1ServicesServiceNameGet(serviceName);

        // TODO: test validations
    }
    
    /**
     * Update a service or upgrade the binary version of the components of a running service
     *
     * Update the runtime properties of a service. Currently the following operations are supported - update lifetime, stop/start a service. The PUT operation is also used to orchestrate an upgrade of the service containers to a newer version of their artifacts (TBD).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appV1ServicesServiceNamePutTest() throws ApiException {
        String serviceName = null;
        Service service = null;
        api.appV1ServicesServiceNamePut(serviceName, service);

        // TODO: test validations
    }
    
    /**
     * Get current version of the API server.
     *
     * Get current version of the API server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void appV1ServicesVersionGetTest() throws ApiException {
        api.appV1ServicesVersionGet();

        // TODO: test validations
    }
    
}
