/*
 * YARN Simplified API layer for services
 * Bringing a new service on YARN today is not a simple experience. The APIs of existing frameworks are either too low level (native YARN), require writing new code (for frameworks with programmatic APIs) or writing a complex spec (for declarative frameworks).  This simplified REST API can be used to create and manage the lifecycle of YARN services. In most cases, the application owner will not be forced to make any changes to their applications. This is primarily true if the application is packaged with containerization technologies like Docker.  This document describes the API specifications (aka. YarnFile) for deploying/managing containerized services on YARN. The same JSON spec can be used for both REST API and CLI to manage the services.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.apache.cb.yarn.service.api.records;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.threeten.bp.LocalDate;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * a service resource has the following attributes.
 */
@ApiModel(description = "a service resource has the following attributes.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-08T16:59:40.572+02:00")
public class Service {
    @JsonProperty("name")
    private String name = null;

    @JsonProperty("version")
    private String version = null;

    @JsonProperty("description")
    private String description = null;

    @JsonProperty("id")
    private String id = null;

    @JsonProperty("artifact")
    private Artifact artifact = null;

    @JsonProperty("resource")
    private Resource resource = null;

    @JsonProperty("launch_time")
    private LocalDate launchTime = null;

    @JsonProperty("number_of_running_containers")
    private Long numberOfRunningContainers = null;

    @JsonProperty("lifetime")
    private Long lifetime = null;

    @JsonProperty("components")
    private List<Component> components = null;

    @JsonProperty("configuration")
    private ModelConfiguration _configuration = null;

    @JsonProperty("state")
    private ServiceState state = null;

    @JsonProperty("quicklinks")
    private Map<String, String> quicklinks = null;

    @JsonProperty("queue")
    private String queue = null;

    @JsonProperty("kerberos_principal")
    private KerberosPrincipal kerberosPrincipal = null;

    @JsonProperty("docker_client_config")
    private String dockerClientConfig = null;

    public Service name(String name) {
        this.name = name;
        return this;
    }

    /**
     * A unique service name. If Registry DNS is enabled, the max length is 63 characters.
     *
     * @return name
     **/
    @ApiModelProperty(required = true, value = "A unique service name. If Registry DNS is enabled, the max length is 63 characters.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Service version(String version) {
        this.version = version;
        return this;
    }

    /**
     * Version of the service.
     *
     * @return version
     **/
    @ApiModelProperty(required = true, value = "Version of the service.")
    public String getVersion() {
        return version;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    public Service description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Description of the service.
     *
     * @return description
     **/
    @ApiModelProperty(value = "Description of the service.")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Service id(String id) {
        this.id = id;
        return this;
    }

    /**
     * A unique service id.
     *
     * @return id
     **/
    @ApiModelProperty(value = "A unique service id.")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Service artifact(Artifact artifact) {
        this.artifact = artifact;
        return this;
    }

    /**
     * The default artifact for all components of the service except the components which has Artifact type set to SERVICE (optional).
     *
     * @return artifact
     **/
    @ApiModelProperty(value = "The default artifact for all components of the service except the components which has Artifact type set to SERVICE (optional).")
    public Artifact getArtifact() {
        return artifact;
    }

    public void setArtifact(Artifact artifact) {
        this.artifact = artifact;
    }

    public Service resource(Resource resource) {
        this.resource = resource;
        return this;
    }

    /**
     * The default resource for all components of the service (optional).
     *
     * @return resource
     **/
    @ApiModelProperty(value = "The default resource for all components of the service (optional).")
    public Resource getResource() {
        return resource;
    }

    public void setResource(Resource resource) {
        this.resource = resource;
    }

    public Service launchTime(LocalDate launchTime) {
        this.launchTime = launchTime;
        return this;
    }

    /**
     * The time when the service was created, e.g. 2016-03-16T01:01:49.000Z.
     *
     * @return launchTime
     **/
    @ApiModelProperty(value = "The time when the service was created, e.g. 2016-03-16T01:01:49.000Z.")
    public LocalDate getLaunchTime() {
        return launchTime;
    }

    public void setLaunchTime(LocalDate launchTime) {
        this.launchTime = launchTime;
    }

    public Service numberOfRunningContainers(Long numberOfRunningContainers) {
        this.numberOfRunningContainers = numberOfRunningContainers;
        return this;
    }

    /**
     * In get response this provides the total number of running containers for this service (across all components) at the time of request. Note, a subsequent request can return a different number as and when more containers get allocated until it reaches the total number of containers or if a flex request has been made between the two requests.
     *
     * @return numberOfRunningContainers
     **/
    @ApiModelProperty(value = "In get response this provides the total number of running containers for this service (across all components) at the time of request. Note, a subsequent request can return a different number as and when more containers get allocated until it reaches the total number of containers or if a flex request has been made between the two requests.")
    public Long getNumberOfRunningContainers() {
        return numberOfRunningContainers;
    }

    public void setNumberOfRunningContainers(Long numberOfRunningContainers) {
        this.numberOfRunningContainers = numberOfRunningContainers;
    }

    public Service lifetime(Long lifetime) {
        this.lifetime = lifetime;
        return this;
    }

    /**
     * Life time (in seconds) of the service from the time it reaches the STARTED state (after which it is automatically destroyed by YARN). For unlimited lifetime do not set a lifetime value.
     *
     * @return lifetime
     **/
    @ApiModelProperty(value = "Life time (in seconds) of the service from the time it reaches the STARTED state (after which it is automatically destroyed by YARN). For unlimited lifetime do not set a lifetime value.")
    public Long getLifetime() {
        return lifetime;
    }

    public void setLifetime(Long lifetime) {
        this.lifetime = lifetime;
    }

    public Service components(List<Component> components) {
        this.components = components;
        return this;
    }

    public Service addComponentsItem(Component componentsItem) {
        if (this.components == null) {
            this.components = new ArrayList<Component>();
        }
        this.components.add(componentsItem);
        return this;
    }

    /**
     * Components of a service.
     *
     * @return components
     **/
    @ApiModelProperty(value = "Components of a service.")
    public List<Component> getComponents() {
        return components;
    }

    public void setComponents(List<Component> components) {
        this.components = components;
    }

    public Service _configuration(ModelConfiguration _configuration) {
        this._configuration = _configuration;
        return this;
    }

    /**
     * Config properties of a service. Configurations provided at the service/global level are available to all the components. Specific properties can be overridden at the component level.
     *
     * @return _configuration
     **/
    @ApiModelProperty(value = "Config properties of a service. Configurations provided at the service/global level are available to all the components. Specific properties can be overridden at the component level.")
    public ModelConfiguration getConfiguration() {
        return _configuration;
    }

    public void setConfiguration(ModelConfiguration _configuration) {
        this._configuration = _configuration;
    }

    public Service state(ServiceState state) {
        this.state = state;
        return this;
    }

    /**
     * State of the service. Specifying a value for this attribute for the PUT payload means update the service to this desired state.
     *
     * @return state
     **/
    @ApiModelProperty(value = "State of the service. Specifying a value for this attribute for the PUT payload means update the service to this desired state.")
    public ServiceState getState() {
        return state;
    }

    public void setState(ServiceState state) {
        this.state = state;
    }

    public Service quicklinks(Map<String, String> quicklinks) {
        this.quicklinks = quicklinks;
        return this;
    }

    public Service putQuicklinksItem(String key, String quicklinksItem) {
        if (this.quicklinks == null) {
            this.quicklinks = new HashMap<String, String>();
        }
        this.quicklinks.put(key, quicklinksItem);
        return this;
    }

    /**
     * A blob of key-value pairs of quicklinks to be exported for a service.
     *
     * @return quicklinks
     **/
    @ApiModelProperty(value = "A blob of key-value pairs of quicklinks to be exported for a service.")
    public Map<String, String> getQuicklinks() {
        return quicklinks;
    }

    public void setQuicklinks(Map<String, String> quicklinks) {
        this.quicklinks = quicklinks;
    }

    public Service queue(String queue) {
        this.queue = queue;
        return this;
    }

    /**
     * The YARN queue that this service should be submitted to.
     *
     * @return queue
     **/
    @ApiModelProperty(value = "The YARN queue that this service should be submitted to.")
    public String getQueue() {
        return queue;
    }

    public void setQueue(String queue) {
        this.queue = queue;
    }

    public Service kerberosPrincipal(KerberosPrincipal kerberosPrincipal) {
        this.kerberosPrincipal = kerberosPrincipal;
        return this;
    }

    /**
     * The principal info of the user who launches the service.
     *
     * @return kerberosPrincipal
     **/
    @ApiModelProperty(value = "The principal info of the user who launches the service.")
    public KerberosPrincipal getKerberosPrincipal() {
        return kerberosPrincipal;
    }

    public void setKerberosPrincipal(KerberosPrincipal kerberosPrincipal) {
        this.kerberosPrincipal = kerberosPrincipal;
    }

    public Service dockerClientConfig(String dockerClientConfig) {
        this.dockerClientConfig = dockerClientConfig;
        return this;
    }

    /**
     * URI of the file containing the docker client configuration (e.g. hdfs:///tmp/config.json).
     *
     * @return dockerClientConfig
     **/
    @ApiModelProperty(value = "URI of the file containing the docker client configuration (e.g. hdfs:///tmp/config.json).")
    public String getDockerClientConfig() {
        return dockerClientConfig;
    }

    public void setDockerClientConfig(String dockerClientConfig) {
        this.dockerClientConfig = dockerClientConfig;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Service service = (Service) o;
        return Objects.equals(this.name, service.name) &&
                Objects.equals(this.version, service.version) &&
                Objects.equals(this.description, service.description) &&
                Objects.equals(this.id, service.id) &&
                Objects.equals(this.artifact, service.artifact) &&
                Objects.equals(this.resource, service.resource) &&
                Objects.equals(this.launchTime, service.launchTime) &&
                Objects.equals(this.numberOfRunningContainers, service.numberOfRunningContainers) &&
                Objects.equals(this.lifetime, service.lifetime) &&
                Objects.equals(this.components, service.components) &&
                Objects.equals(this._configuration, service._configuration) &&
                Objects.equals(this.state, service.state) &&
                Objects.equals(this.quicklinks, service.quicklinks) &&
                Objects.equals(this.queue, service.queue) &&
                Objects.equals(this.kerberosPrincipal, service.kerberosPrincipal) &&
                Objects.equals(this.dockerClientConfig, service.dockerClientConfig);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, version, description, id, artifact, resource, launchTime, numberOfRunningContainers, lifetime, components, _configuration, state, quicklinks, queue, kerberosPrincipal, dockerClientConfig);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Service {\n");

        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    artifact: ").append(toIndentedString(artifact)).append("\n");
        sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
        sb.append("    launchTime: ").append(toIndentedString(launchTime)).append("\n");
        sb.append("    numberOfRunningContainers: ").append(toIndentedString(numberOfRunningContainers)).append("\n");
        sb.append("    lifetime: ").append(toIndentedString(lifetime)).append("\n");
        sb.append("    components: ").append(toIndentedString(components)).append("\n");
        sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    quicklinks: ").append(toIndentedString(quicklinks)).append("\n");
        sb.append("    queue: ").append(toIndentedString(queue)).append("\n");
        sb.append("    kerberosPrincipal: ").append(toIndentedString(kerberosPrincipal)).append("\n");
        sb.append("    dockerClientConfig: ").append(toIndentedString(dockerClientConfig)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

