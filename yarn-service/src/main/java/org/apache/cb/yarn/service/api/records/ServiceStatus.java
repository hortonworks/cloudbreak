/*
 * YARN Simplified API layer for services
 * Bringing a new service on YARN today is not a simple experience. The APIs of existing frameworks are either too low level (native YARN), require writing new code (for frameworks with programmatic APIs) or writing a complex spec (for declarative frameworks).  This simplified REST API can be used to create and manage the lifecycle of YARN services. In most cases, the application owner will not be forced to make any changes to their applications. This is primarily true if the application is packaged with containerization technologies like Docker.  This document describes the API specifications (aka. YarnFile) for deploying/managing containerized services on YARN. The same JSON spec can be used for both REST API and CLI to manage the services.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.apache.cb.yarn.service.api.records;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * The current status of a submitted service, returned as a response to the GET API.
 */
@ApiModel(description = "The current status of a submitted service, returned as a response to the GET API.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-08T16:59:40.572+02:00")
public class ServiceStatus {
    @JsonProperty("diagnostics")
    private String diagnostics = null;

    @JsonProperty("state")
    private ServiceState state = null;

    @JsonProperty("code")
    private Integer code = null;

    public ServiceStatus diagnostics(String diagnostics) {
        this.diagnostics = diagnostics;
        return this;
    }

    /**
     * Diagnostic information (if any) for the reason of the current state of the service. It typically has a non-null value, if the service is in a non-running state.
     *
     * @return diagnostics
     **/
    @ApiModelProperty(value = "Diagnostic information (if any) for the reason of the current state of the service. It typically has a non-null value, if the service is in a non-running state.")
    public String getDiagnostics() {
        return diagnostics;
    }

    public void setDiagnostics(String diagnostics) {
        this.diagnostics = diagnostics;
    }

    public ServiceStatus state(ServiceState state) {
        this.state = state;
        return this;
    }

    /**
     * Service state.
     *
     * @return state
     **/
    @ApiModelProperty(value = "Service state.")
    public ServiceState getState() {
        return state;
    }

    public void setState(ServiceState state) {
        this.state = state;
    }

    public ServiceStatus code(Integer code) {
        this.code = code;
        return this;
    }

    /**
     * An error code specific to a scenario which service owners should be able to use to understand the failure in addition to the diagnostic information.
     *
     * @return code
     **/
    @ApiModelProperty(value = "An error code specific to a scenario which service owners should be able to use to understand the failure in addition to the diagnostic information.")
    public Integer getCode() {
        return code;
    }

    public void setCode(Integer code) {
        this.code = code;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ServiceStatus serviceStatus = (ServiceStatus) o;
        return Objects.equals(this.diagnostics, serviceStatus.diagnostics) &&
                Objects.equals(this.state, serviceStatus.state) &&
                Objects.equals(this.code, serviceStatus.code);
    }

    @Override
    public int hashCode() {
        return Objects.hash(diagnostics, state, code);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ServiceStatus {\n");

        sb.append("    diagnostics: ").append(toIndentedString(diagnostics)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

