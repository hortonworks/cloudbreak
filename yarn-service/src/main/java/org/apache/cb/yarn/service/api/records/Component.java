/*
 * YARN Simplified API layer for services
 * Bringing a new service on YARN today is not a simple experience. The APIs of existing frameworks are either too low level (native YARN), require writing new code (for frameworks with programmatic APIs) or writing a complex spec (for declarative frameworks).  This simplified REST API can be used to create and manage the lifecycle of YARN services. In most cases, the application owner will not be forced to make any changes to their applications. This is primarily true if the application is packaged with containerization technologies like Docker.  This document describes the API specifications (aka. YarnFile) for deploying/managing containerized services on YARN. The same JSON spec can be used for both REST API and CLI to manage the services.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.apache.cb.yarn.service.api.records;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * One or more components of the service. If the service is HBase say, then the component can be a simple role like master or regionserver. If the service is a complex business webapp then a component can be other services say Kafka or Storm. Thereby it opens up the support for complex and nested services.
 */
@ApiModel(description = "One or more components of the service. If the service is HBase say, then the component can be a simple role like master or regionserver. If the service is a complex business webapp then a component can be other services say Kafka or Storm. Thereby it opens up the support for complex and nested services.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-08T16:59:40.572+02:00")
public class Component {
    @JsonProperty("name")
    private String name = null;

    @JsonProperty("state")
    private ComponentState state = null;

    @JsonProperty("dependencies")
    private List<String> dependencies = null;

    @JsonProperty("readiness_check")
    private ReadinessCheck readinessCheck = null;

    @JsonProperty("artifact")
    private Artifact artifact = null;

    @JsonProperty("launch_command")
    private String launchCommand = null;

    @JsonProperty("resource")
    private Resource resource = null;

    @JsonProperty("number_of_containers")
    private Long numberOfContainers = null;

    @JsonProperty("containers")
    private List<Container> containers = null;

    @JsonProperty("run_privileged_container")
    private Boolean runPrivilegedContainer = null;

    @JsonProperty("placement_policy")
    private PlacementPolicy placementPolicy = null;

    @JsonProperty("configuration")
    private ModelConfiguration _configuration = null;

    @JsonProperty("quicklinks")
    private List<String> quicklinks = null;

    /**
     * Policy of restart component. Including ALWAYS (Always restart component even if instance exit code &#x3D; 0); ON_FAILURE (Only restart component if instance exit code !&#x3D; 0); NEVER (Do not restart in any cases)
     */
    public enum RestartPolicyEnum {
        ALWAYS("ALWAYS"),

        ON_FAILURE("ON_FAILURE"),

        NEVER("NEVER");

        private final String value;

        RestartPolicyEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static RestartPolicyEnum fromValue(String text) {
            for (RestartPolicyEnum b : RestartPolicyEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }
    }

    @JsonProperty("restart_policy")
    private RestartPolicyEnum restartPolicy = RestartPolicyEnum.ALWAYS;

    public Component name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Name of the service component (mandatory). If Registry DNS is enabled, the max length is 63 characters. If unique component support is enabled, the max length is lowered to 44 characters.
     *
     * @return name
     **/
    @ApiModelProperty(required = true, value = "Name of the service component (mandatory). If Registry DNS is enabled, the max length is 63 characters. If unique component support is enabled, the max length is lowered to 44 characters.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Component state(ComponentState state) {
        this.state = state;
        return this;
    }

    /**
     * The state of the component
     *
     * @return state
     **/
    @ApiModelProperty(value = "The state of the component")
    public ComponentState getState() {
        return state;
    }

    public void setState(ComponentState state) {
        this.state = state;
    }

    public Component dependencies(List<String> dependencies) {
        this.dependencies = dependencies;
        return this;
    }

    public Component addDependenciesItem(String dependenciesItem) {
        if (this.dependencies == null) {
            this.dependencies = new ArrayList<String>();
        }
        this.dependencies.add(dependenciesItem);
        return this;
    }

    /**
     * An array of service components which should be in READY state (as defined by readiness check), before this component can be started. The dependencies across all components of a service should be represented as a DAG.
     *
     * @return dependencies
     **/
    @ApiModelProperty(value = "An array of service components which should be in READY state (as defined by readiness check), before this component can be started. The dependencies across all components of a service should be represented as a DAG.")
    public List<String> getDependencies() {
        return dependencies;
    }

    public void setDependencies(List<String> dependencies) {
        this.dependencies = dependencies;
    }

    public Component readinessCheck(ReadinessCheck readinessCheck) {
        this.readinessCheck = readinessCheck;
        return this;
    }

    /**
     * Readiness check for this component.
     *
     * @return readinessCheck
     **/
    @ApiModelProperty(value = "Readiness check for this component.")
    public ReadinessCheck getReadinessCheck() {
        return readinessCheck;
    }

    public void setReadinessCheck(ReadinessCheck readinessCheck) {
        this.readinessCheck = readinessCheck;
    }

    public Component artifact(Artifact artifact) {
        this.artifact = artifact;
        return this;
    }

    /**
     * Artifact of the component (optional). If not specified, the service level global artifact takes effect.
     *
     * @return artifact
     **/
    @ApiModelProperty(value = "Artifact of the component (optional). If not specified, the service level global artifact takes effect.")
    public Artifact getArtifact() {
        return artifact;
    }

    public void setArtifact(Artifact artifact) {
        this.artifact = artifact;
    }

    public Component launchCommand(String launchCommand) {
        this.launchCommand = launchCommand;
        return this;
    }

    /**
     * The custom launch command of this component (optional for DOCKER component, required otherwise). When specified at the component level, it overrides the value specified at the global level (if any).
     *
     * @return launchCommand
     **/
    @ApiModelProperty(value = "The custom launch command of this component (optional for DOCKER component, required otherwise). When specified at the component level, it overrides the value specified at the global level (if any).")
    public String getLaunchCommand() {
        return launchCommand;
    }

    public void setLaunchCommand(String launchCommand) {
        this.launchCommand = launchCommand;
    }

    public Component resource(Resource resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Resource of this component (optional). If not specified, the service level global resource takes effect.
     *
     * @return resource
     **/
    @ApiModelProperty(value = "Resource of this component (optional). If not specified, the service level global resource takes effect.")
    public Resource getResource() {
        return resource;
    }

    public void setResource(Resource resource) {
        this.resource = resource;
    }

    public Component numberOfContainers(Long numberOfContainers) {
        this.numberOfContainers = numberOfContainers;
        return this;
    }

    /**
     * Number of containers for this component (optional). If not specified, the service level global number_of_containers takes effect.
     *
     * @return numberOfContainers
     **/
    @ApiModelProperty(value = "Number of containers for this component (optional). If not specified, the service level global number_of_containers takes effect.")
    public Long getNumberOfContainers() {
        return numberOfContainers;
    }

    public void setNumberOfContainers(Long numberOfContainers) {
        this.numberOfContainers = numberOfContainers;
    }

    public Component containers(List<Container> containers) {
        this.containers = containers;
        return this;
    }

    public Component addContainersItem(Container containersItem) {
        if (this.containers == null) {
            this.containers = new ArrayList<Container>();
        }
        this.containers.add(containersItem);
        return this;
    }

    /**
     * Containers of a started component. Specifying a value for this attribute for the POST payload raises a validation error. This blob is available only in the GET response of a started service.
     *
     * @return containers
     **/
    @ApiModelProperty(value = "Containers of a started component. Specifying a value for this attribute for the POST payload raises a validation error. This blob is available only in the GET response of a started service.")
    public List<Container> getContainers() {
        return containers;
    }

    public void setContainers(List<Container> containers) {
        this.containers = containers;
    }

    public Component runPrivilegedContainer(Boolean runPrivilegedContainer) {
        this.runPrivilegedContainer = runPrivilegedContainer;
        return this;
    }

    /**
     * Run all containers of this component in privileged mode (YARN-4262).
     *
     * @return runPrivilegedContainer
     **/
    @ApiModelProperty(value = "Run all containers of this component in privileged mode (YARN-4262).")
    public Boolean isRunPrivilegedContainer() {
        return runPrivilegedContainer;
    }

    public void setRunPrivilegedContainer(Boolean runPrivilegedContainer) {
        this.runPrivilegedContainer = runPrivilegedContainer;
    }

    public Component placementPolicy(PlacementPolicy placementPolicy) {
        this.placementPolicy = placementPolicy;
        return this;
    }

    /**
     * Advanced scheduling and placement policies for all containers of this component.
     *
     * @return placementPolicy
     **/
    @ApiModelProperty(value = "Advanced scheduling and placement policies for all containers of this component.")
    public PlacementPolicy getPlacementPolicy() {
        return placementPolicy;
    }

    public void setPlacementPolicy(PlacementPolicy placementPolicy) {
        this.placementPolicy = placementPolicy;
    }

    public Component _configuration(ModelConfiguration _configuration) {
        this._configuration = _configuration;
        return this;
    }

    /**
     * Config properties for this component.
     *
     * @return _configuration
     **/
    @ApiModelProperty(value = "Config properties for this component.")
    public ModelConfiguration getConfiguration() {
        return _configuration;
    }

    public void setConfiguration(ModelConfiguration _configuration) {
        this._configuration = _configuration;
    }

    public Component quicklinks(List<String> quicklinks) {
        this.quicklinks = quicklinks;
        return this;
    }

    public Component addQuicklinksItem(String quicklinksItem) {
        if (this.quicklinks == null) {
            this.quicklinks = new ArrayList<String>();
        }
        this.quicklinks.add(quicklinksItem);
        return this;
    }

    /**
     * A list of quicklink keys defined at the service level, and to be resolved by this component.
     *
     * @return quicklinks
     **/
    @ApiModelProperty(value = "A list of quicklink keys defined at the service level, and to be resolved by this component.")
    public List<String> getQuicklinks() {
        return quicklinks;
    }

    public void setQuicklinks(List<String> quicklinks) {
        this.quicklinks = quicklinks;
    }

    public Component restartPolicy(RestartPolicyEnum restartPolicy) {
        this.restartPolicy = restartPolicy;
        return this;
    }

    /**
     * Policy of restart component. Including ALWAYS (Always restart component even if instance exit code &#x3D; 0); ON_FAILURE (Only restart component if instance exit code !&#x3D; 0); NEVER (Do not restart in any cases)
     *
     * @return restartPolicy
     **/
    @ApiModelProperty(value = "Policy of restart component. Including ALWAYS (Always restart component even if instance exit code = 0); ON_FAILURE (Only restart component if instance exit code != 0); NEVER (Do not restart in any cases)")
    public RestartPolicyEnum getRestartPolicy() {
        return restartPolicy;
    }

    public void setRestartPolicy(RestartPolicyEnum restartPolicy) {
        this.restartPolicy = restartPolicy;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Component component = (Component) o;
        return Objects.equals(this.name, component.name) &&
                Objects.equals(this.state, component.state) &&
                Objects.equals(this.dependencies, component.dependencies) &&
                Objects.equals(this.readinessCheck, component.readinessCheck) &&
                Objects.equals(this.artifact, component.artifact) &&
                Objects.equals(this.launchCommand, component.launchCommand) &&
                Objects.equals(this.resource, component.resource) &&
                Objects.equals(this.numberOfContainers, component.numberOfContainers) &&
                Objects.equals(this.containers, component.containers) &&
                Objects.equals(this.runPrivilegedContainer, component.runPrivilegedContainer) &&
                Objects.equals(this.placementPolicy, component.placementPolicy) &&
                Objects.equals(this._configuration, component._configuration) &&
                Objects.equals(this.quicklinks, component.quicklinks) &&
                Objects.equals(this.restartPolicy, component.restartPolicy);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, state, dependencies, readinessCheck, artifact, launchCommand, resource, numberOfContainers, containers, runPrivilegedContainer, placementPolicy, _configuration, quicklinks, restartPolicy);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Component {\n");

        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
        sb.append("    readinessCheck: ").append(toIndentedString(readinessCheck)).append("\n");
        sb.append("    artifact: ").append(toIndentedString(artifact)).append("\n");
        sb.append("    launchCommand: ").append(toIndentedString(launchCommand)).append("\n");
        sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
        sb.append("    numberOfContainers: ").append(toIndentedString(numberOfContainers)).append("\n");
        sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
        sb.append("    runPrivilegedContainer: ").append(toIndentedString(runPrivilegedContainer)).append("\n");
        sb.append("    placementPolicy: ").append(toIndentedString(placementPolicy)).append("\n");
        sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
        sb.append("    quicklinks: ").append(toIndentedString(quicklinks)).append("\n");
        sb.append("    restartPolicy: ").append(toIndentedString(restartPolicy)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

