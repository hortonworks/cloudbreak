/*
 * YARN Simplified API layer for services
 * Bringing a new service on YARN today is not a simple experience. The APIs of existing frameworks are either too low level (native YARN), require writing new code (for frameworks with programmatic APIs) or writing a complex spec (for declarative frameworks).  This simplified REST API can be used to create and manage the lifecycle of YARN services. In most cases, the application owner will not be forced to make any changes to their applications. This is primarily true if the application is packaged with containerization technologies like Docker.  This document describes the API specifications (aka. YarnFile) for deploying/managing containerized services on YARN. The same JSON spec can be used for both REST API and CLI to manage the services.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.apache.cb.yarn.service.api.records;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * An instance of a running service container.
 */
@ApiModel(description = "An instance of a running service container.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-08T16:59:40.572+02:00")
@JsonIgnoreProperties(ignoreUnknown = true)
public class Container {
    @JsonProperty("id")
    private String id = null;

    @JsonProperty("ip")
    private String ip = null;

    @JsonProperty("hostname")
    private String hostname = null;

    @JsonProperty("bare_host")
    private String bareHost = null;

    @JsonProperty("state")
    private ContainerState state = null;

    @JsonProperty("component_instance_name")
    private String componentInstanceName = null;

    @JsonProperty("resource")
    private Resource resource = null;

    @JsonProperty("artifact")
    private Artifact artifact = null;

    @JsonProperty("privileged_container")
    private Boolean privilegedContainer = null;

    public Container id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Unique container id of a running service, e.g. container_e3751_1458061340047_0008_01_000002.
     *
     * @return id
     **/
    @ApiModelProperty(value = "Unique container id of a running service, e.g. container_e3751_1458061340047_0008_01_000002.")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Container ip(String ip) {
        this.ip = ip;
        return this;
    }

    /**
     * IP address of a running container, e.g. 172.31.42.141. The IP address and hostname attribute values are dependent on the cluster/docker network setup as per YARN-4007.
     *
     * @return ip
     **/
    @ApiModelProperty(value = "IP address of a running container, e.g. 172.31.42.141. The IP address and hostname attribute values are dependent on the cluster/docker network setup as per YARN-4007.")
    public String getIp() {
        return ip;
    }

    public void setIp(String ip) {
        this.ip = ip;
    }

    public Container hostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Fully qualified hostname of a running container, e.g. ctr-e3751-1458061340047-0008-01-000002.examplestg.site. The IP address and hostname attribute values are dependent on the cluster/docker network setup as per YARN-4007.
     *
     * @return hostname
     **/
    @ApiModelProperty(value = "Fully qualified hostname of a running container, e.g. ctr-e3751-1458061340047-0008-01-000002.examplestg.site. The IP address and hostname attribute values are dependent on the cluster/docker network setup as per YARN-4007.")
    public String getHostname() {
        return hostname;
    }

    public void setHostname(String hostname) {
        this.hostname = hostname;
    }

    public Container bareHost(String bareHost) {
        this.bareHost = bareHost;
        return this;
    }

    /**
     * The bare node or host in which the container is running, e.g. cn008.example.com.
     *
     * @return bareHost
     **/
    @ApiModelProperty(value = "The bare node or host in which the container is running, e.g. cn008.example.com.")
    public String getBareHost() {
        return bareHost;
    }

    public void setBareHost(String bareHost) {
        this.bareHost = bareHost;
    }

    public Container state(ContainerState state) {
        this.state = state;
        return this;
    }

    /**
     * State of the container of a service.
     *
     * @return state
     **/
    @ApiModelProperty(value = "State of the container of a service.")
    public ContainerState getState() {
        return state;
    }

    public void setState(ContainerState state) {
        this.state = state;
    }

    public Container componentInstanceName(String componentInstanceName) {
        this.componentInstanceName = componentInstanceName;
        return this;
    }

    /**
     * Name of the component instance that this container instance belongs to. Component instance name is named as $COMPONENT_NAME-i, where i is a monotonically increasing integer. E.g. A componet called nginx can have multiple component instances named as nginx-0, nginx-1 etc. Each component instance is backed by a container instance.
     *
     * @return componentInstanceName
     **/
    @ApiModelProperty(value = "Name of the component instance that this container instance belongs to. Component instance name is named as $COMPONENT_NAME-i, where i is a monotonically increasing integer. E.g. A componet called nginx can have multiple component instances named as nginx-0, nginx-1 etc. Each component instance is backed by a container instance.")
    public String getComponentInstanceName() {
        return componentInstanceName;
    }

    public void setComponentInstanceName(String componentInstanceName) {
        this.componentInstanceName = componentInstanceName;
    }

    public Container resource(Resource resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Resource used for this container.
     *
     * @return resource
     **/
    @ApiModelProperty(value = "Resource used for this container.")
    public Resource getResource() {
        return resource;
    }

    public void setResource(Resource resource) {
        this.resource = resource;
    }

    public Container artifact(Artifact artifact) {
        this.artifact = artifact;
        return this;
    }

    /**
     * Artifact used for this container.
     *
     * @return artifact
     **/
    @ApiModelProperty(value = "Artifact used for this container.")
    public Artifact getArtifact() {
        return artifact;
    }

    public void setArtifact(Artifact artifact) {
        this.artifact = artifact;
    }

    public Container privilegedContainer(Boolean privilegedContainer) {
        this.privilegedContainer = privilegedContainer;
        return this;
    }

    /**
     * Container running in privileged mode or not.
     *
     * @return privilegedContainer
     **/
    @ApiModelProperty(value = "Container running in privileged mode or not.")
    public Boolean isPrivilegedContainer() {
        return privilegedContainer;
    }

    public void setPrivilegedContainer(Boolean privilegedContainer) {
        this.privilegedContainer = privilegedContainer;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Container container = (Container) o;
        return Objects.equals(this.id, container.id) &&
                Objects.equals(this.ip, container.ip) &&
                Objects.equals(this.hostname, container.hostname) &&
                Objects.equals(this.bareHost, container.bareHost) &&
                Objects.equals(this.state, container.state) &&
                Objects.equals(this.componentInstanceName, container.componentInstanceName) &&
                Objects.equals(this.resource, container.resource) &&
                Objects.equals(this.artifact, container.artifact) &&
                Objects.equals(this.privilegedContainer, container.privilegedContainer);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, ip, hostname, bareHost, state, componentInstanceName, resource, artifact, privilegedContainer);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Container {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
        sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
        sb.append("    bareHost: ").append(toIndentedString(bareHost)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    componentInstanceName: ").append(toIndentedString(componentInstanceName)).append("\n");
        sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
        sb.append("    artifact: ").append(toIndentedString(artifact)).append("\n");
        sb.append("    privilegedContainer: ").append(toIndentedString(privilegedContainer)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

