/*
 * CDP Service Discovery
 * CDP Service Discovery is a web service that provides information to a workload service
 *
 * The version of the OpenAPI document: __API_VERSION__
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cloudera.cdp.servicediscovery.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Endpoint of an Service Discovery Service
 */
@JsonPropertyOrder({
  ServiceEndPoint.JSON_PROPERTY_HOST,
  ServiceEndPoint.JSON_PROPERTY_PORT,
  ServiceEndPoint.JSON_PROPERTY_URI
})

public class ServiceEndPoint {
  public static final String JSON_PROPERTY_HOST = "host";
  @javax.annotation.Nullable
  private String host;

  public static final String JSON_PROPERTY_PORT = "port";
  @javax.annotation.Nullable
  private Integer port;

  public static final String JSON_PROPERTY_URI = "uri";
  @javax.annotation.Nullable
  private String uri;

  public ServiceEndPoint() {
  }

  public ServiceEndPoint host(@javax.annotation.Nullable String host) {
    
    this.host = host;
    return this;
  }

  /**
   * The endpoints hostname or ip address.
   * @return host
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHost() {
    return host;
  }


  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHost(@javax.annotation.Nullable String host) {
    this.host = host;
  }

  public ServiceEndPoint port(@javax.annotation.Nullable Integer port) {
    
    this.port = port;
    return this;
  }

  /**
   * The endpoints port.
   * @return port
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPort(@javax.annotation.Nullable Integer port) {
    this.port = port;
  }

  public ServiceEndPoint uri(@javax.annotation.Nullable String uri) {
    
    this.uri = uri;
    return this;
  }

  /**
   * The connection uri for the endpoint.
   * @return uri
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUri() {
    return uri;
  }


  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUri(@javax.annotation.Nullable String uri) {
    this.uri = uri;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceEndPoint serviceEndPoint = (ServiceEndPoint) o;
    return Objects.equals(this.host, serviceEndPoint.host) &&
        Objects.equals(this.port, serviceEndPoint.port) &&
        Objects.equals(this.uri, serviceEndPoint.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, port, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceEndPoint {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

