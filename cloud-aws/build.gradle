apply plugin: 'java'
apply plugin: 'info.solidsoft.pitest'

repositories {
  mavenLocal()
  maven { url = "$repoUrl" }
  maven { url 'http://repo.spring.io/libs-release' }
  mavenLocal()
  mavenCentral()
  maven { url = "$repoUrl" }
}

jar {
  baseName = 'cloud-aws'
  archiveName = 'cloud-aws.jar'
}


dependencies {

  compile project(':cloud-api')
  compile project(':cloud-template')

  compile group: 'org.slf4j',                     name: 'slf4j-api',                      version: slf4jApiVersion
  compile group: 'org.apache.commons',            name: 'commons-lang3',                  version: apacheCommonsLangVersion
  compile group: 'commons-io',                    name: 'commons-io',                     version: '2.4'
  compile group: 'commons-codec',                 name: 'commons-codec',                  version: '1.10'
  compile (group: 'com.amazonaws',                name: 'aws-java-sdk',                   version: awsSdkVersion)      { exclude group: 'commons-logging' }
  compile group: 'org.freemarker',                name: 'freemarker',                     version: freemarkerVersion

  compile group: 'org.mapstruct',                 name: 'mapstruct-jdk8',                 version: mapstructVersion
  compileOnly group: 'org.mapstruct',             name: 'mapstruct-processor',            version: mapstructVersion
  annotationProcessor group: 'org.mapstruct',     name: 'mapstruct-processor',            version: mapstructVersion

  testCompile group: 'org.springframework.boot',  name: 'spring-boot-starter-test',       version: springBootVersion
  testCompile group: 'org.springframework.boot',  name:'spring-boot-starter-freemarker',  version:springBootVersion
  testCompile (group: 'junit', name: 'junit', version: junitVersion) {
    exclude group: 'org.hamcrest'
  }
  testCompile (group: 'org.mockito',             name: 'mockito-core',          version: mockitoVersion) {
    exclude group: 'org.hamcrest'
  }
  testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'

}

sourceSets {
  main {
    java.srcDirs += "${projectDir}/src/main/generated"
  }
}

compileJava {
  options.compilerArgs = [
          '-Amapstruct.unmappedTargetPolicy=ERROR',
          '-Amapstruct.suppressGeneratorTimestamp=true',
          '-Amapstruct.suppressGeneratorVersionInfoComment=true'
  ]

  options.annotationProcessorGeneratedSourcesDirectory = file("$projectDir/src/main/generated")
}

compileJava.doFirst {
  def path = "${projectDir}/src/main/generated"
  if (new File(path).exists()) {
    delete fileTree(path) {
      include '**/*.java'
    }
  }
}