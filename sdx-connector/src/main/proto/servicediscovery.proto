// Copyright (c) 2019 Cloudera, Inc. All rights reserved.
syntax = "proto3";

package servicediscovery;

option java_package = "com.cloudera.cdp.servicediscovery";
option java_outer_classname = "ServiceDiscoveryProto";

option go_package = "com/cloudera/cdp/protobuf";

import "version.proto";
import "options.proto";

/**
 * Basic functions of the SDX Service Discovery
 */
service ServiceDiscovery {
  // Get the service version.
  rpc GetVersion (version.VersionRequest) returns (version.VersionResponse) {
  }

  /**
   * Get the Services for a specific Datalake cluster
   * Get the Services for a specific Datalake cluster
   */
  rpc DescribeDatalakeServices (DescribeDatalakeServicesRequest) returns (DescribeDatalakeServicesResponse) {
  }


  /**
   * Get the services for an Environment
   */
  rpc DescribeEnvironmentServices (DescribeEnvironmentServicesRequest) returns (DescribeEnvironmentServicesResponse) {
  }

  /**
   * Get the list of Datalakes available for an Environment
   */
  rpc ListDatalakesForEnv (ListDatalakesForEnvRequest) returns (ListDatalakesForEnvResponse) {
  }

  // Deprecated - Please use ListVirtualWarehousesForEnv as replacement.
  rpc DescribeWarehouse (DescribeWarehouseRequest) returns (DescribeWarehouseResponse) {
    option (options.MethodExtension.deprecated) = true;
  }

  // Deprecated - Please use ListVirtualWarehousesForEnv as replacement.
  rpc ListWarehousesForEnv (ListWarehousesForEnvRequest) returns (ListWarehousesForEnvResponse) {
    option (options.MethodExtension.deprecated) = true;
  }

  /**
   * List the Virtual Warehouses for a specific Environment.
   */
  rpc ListVirtualWarehousesForEnv (ListVirtualWarehousesForEnvRequest) returns (ListVirtualWarehousesForEnvResponse) {
  }

  /**
   * Describe services for a specific Virtual Warehouse.
   */
  rpc DescribeVirtualWarehouseServices (DescribeVirtualWarehouseServicesRequest) returns (DescribeVirtualWarehouseServicesResponse) {
  }

  /**
   * List the Operational Databases (OpDBs) for a specific environment.
   */
  rpc ListOpdbsForEnv (ListOpdbsForEnvRequest) returns (ListOpdbsForEnvResponse) {
  }

  /**
   * Describe the services for an Operational Database (OpDBs) in a specific environment.
   */
  rpc DescribeOpdbServices (DescribeOpdbServicesRequest) returns (DescribeOpdbServicesResponse) {
  }

  /**
   * Describe a specific datalake as ApiRemoteDataContext.
   */
  rpc DescribeDatalakeAsApiRemoteDataContext (DescribeDatalakeAsApiRemoteDataContextRequest) returns (DescribeDatalakeAsApiRemoteDataContextResponse) {
  }
}

message ServiceEndPoint {
  string host = 1; // The host for this endpoint.  Hostname or IP address.
  int32 port = 2; // The post this service endpoint is running on, if applicaable.
  string uri = 3; // A custom URI defined for the service endpoint
}

/**
 * A defined endpoint for a Service.
 * This an the pointer to a service that the SDX cluster will be providing.  It will contain the networking enpoint as well as all custom configuration key value pairs thats a client of the the service would need to have in order to use it.
 */
message Service {
  string type = 1; // identifying type of the service, distinct from the name
  repeated ServiceEndPoint endpoints = 2;
  map<string, string> config = 3 [(options.FieldExtension.sensitive) = true]; // A key value set of config options for an endpoints specific configuration
}


message Application {
  map<string, Service> services = 1;
  map<string, string> config = 2 [(options.FieldExtension.sensitive) = true];
}

/**
 * Request cluster configuration information from a specific cluster
 */
message DescribeDatalakeServicesRequest {
  string id = 1; // The CRN of the cluster to get config information for.
  bool authorize = 2;
  bool external_call = 3;
}

/**
 * DiscoveryResponse with cluster configuration information from a specific cluster
 */
message DescribeDatalakeServicesResponse {
  string id = 1; // The id of the cluster the config is for.
  uint64 last_update = 2; // The RFC3339 timestap of the last change to the SDX Clusters config
  map<string, Application> applications = 3; // The endpoints for the SDX Cluster with the service endpoint name as key
}

/**
 * Request cluster configuration information from a specific cluster
 */
message DescribeEnvironmentServicesRequest {
  string environment = 1; // The CRN of the cluster to get config information for.
  bool authorize = 2;
}

/**
 * DiscoveryResponse with cluster configuration information from a specific cluster
 */
message DescribeEnvironmentServicesResponse {
  string environmentCrn = 1; // The id of the environment the config is for.
  uint64 last_update = 2; // The RFC3339 timestap of the last change to the SDX Clusters config
  map<string, Application> applications = 3; // The endpoints for the SDX Cluster with the service endpoint name as key
}

/**
 * Information about an individual Datalake
 */
message DatalakeInfo {
  string datalakeCrn = 1;
  string datalakeName = 2;
  string environmentCrn = 3;
  string envrionmentName = 4;
}

/**
 * Request for a List of Datalakes for an Environment
 */
message ListDatalakesForEnvRequest {
  string environment = 1;
  bool authorize = 2;
}

/**
 * Response for a List of Datalakes for an Environment
 */
message ListDatalakesForEnvResponse {
  string environmentCrn = 1; // The id of the environment the config is for.
  repeated DatalakeInfo datalakes = 2;
}

message DescribeWarehouseRequest {
  option (options.MessageExtension.deprecated) = true;
  string environment = 1;
  string warehouse = 2;
  bool authorize = 3;
}

message DescribeWarehouseResponse {
  option (options.MessageExtension.deprecated) = true;
  string warehouseId = 1;
  string environmentId = 2;
  Warehouse details = 3;
}

message ListWarehousesForEnvRequest {
  option (options.MessageExtension.deprecated) = true;
  string environment = 1;
  bool authorize = 2;
}

message ListWarehousesForEnvResponse {
  option (options.MessageExtension.deprecated) = true;
  string environmentId = 1;
  map<string, Warehouse> warehouses = 2;
}

message Endpoint {
  string id = 1;
  string displayName = 2;
  bool default = 3;
  string uri = 4;
  map<string, string> config = 5 [(options.FieldExtension.sensitive) = true];
  bool hasError = 6;
  string status = 7;
}

message WarehouseService {
  string type = 1;
  repeated Endpoint endpoints = 2;
}

message Warehouse {
  string id = 1;
  string displayName = 2;
  bool default = 3;
  map<string, WarehouseService> services = 4;
}

/**
 * Information on a virtual warehouse.
 */
message VirtualWarehouse {
  string crn = 1;
  string id = 2;
  string name = 3;
  string type = 4;
  string clusterId = 5;
  string dbcId = 6;
  string status = 7;
  map<string, WarehouseService> services = 8;
}

/**
 * Request for virtual warehouses in a specific environment.
 */
message ListVirtualWarehousesForEnvRequest {
  string environment = 1 [(options.FieldExtension.required) = true]; // The name or CRN of the environment.
  bool authorize = 2;
}

/**
 * Response for virtual warehouses in a specific environment.
 */
message ListVirtualWarehousesForEnvResponse {
  string environment = 1; // The CRN of the environment.
  uint64 last_update = 2; // The RFC3339 timestamp of the last change to the Virtual Warehouse info. (millis)
  repeated VirtualWarehouse warehouses = 3; // The virtual warehouses for the environment.
}

/**
 * Request for services for a specific virtual warehouse.
 */
message DescribeVirtualWarehouseServicesRequest {
  string environment = 1 [(options.FieldExtension.required) = true]; // The name or CRN of the environment.
  string clusterId = 2 [(options.FieldExtension.required) = true]; // The id of the CDW cluster.
  string vwId = 3 [(options.FieldExtension.required) = true]; // The id of the virtual warehouse.
  bool authorize = 4;
}

/**
 * Response for services for a specific virtual warehouse.
 */
message DescribeVirtualWarehouseServicesResponse {
  string environment = 1; // The CRN of the environment.
  string clusterId = 2; // The id of the CDW cluster.
  string vwId = 3; // The id of the virtual warehouse.
  VirtualWarehouse details = 4; // The details for the virtual warehouse.
  uint64 last_update = 5; // The RFC3339 timestamp of the last change to the Virtual Warehouse config. (millis)
}

message OpDB {
  string name = 1;
  string crn = 2;
  string status = 3;
  string hueEndpoint = 4;
}

message ListOpdbsForEnvRequest {
  string environment = 1 [(options.FieldExtension.required) = true];
  bool authorize = 2;
}

message ListOpdbsForEnvResponse {
  string environment = 1;
  uint64 last_update = 2;
  repeated OpDB opDBs = 3;
}

message DescribeOpdbServicesRequest {
  string environment = 1 [(options.FieldExtension.required) = true];
  string database = 2 [(options.FieldExtension.required) = true];
  bool authorize = 3;
}

message DescribeOpdbServicesResponse {
  string environment = 1;
  string database = 2;
  uint64 last_update = 3;
  OpDB details = 4;
  map<string, Service> services = 5;
}

/**
 * Request for RemoteDataContext for a specific datalake in an environment.
 */
message DescribeDatalakeAsApiRemoteDataContextRequest {
  string datalake = 1 [(options.FieldExtension.required) = true]; // The name or CRN of the datalake.
  bool authorize = 2; // indicator for calls from servicediscovery-api
}

/**
 * Request for RemoteDataContext for a specific datalake in an environment.
 */
message DescribeDatalakeAsApiRemoteDataContextResponse {
  string datalake = 1; // The CRN of the datalake.
  ApiRemoteDataContext context = 2; // The remote data context.
}

/**
 * This object contains enough information for a Workload cluster to connect to an SDX cluster.
 */
message ApiRemoteDataContext {
  string endPointId = 1; // A string to uniquely identify the SDX cluster.
  string clusterVersion = 2; // Cluster version
  repeated ApiEndPoint endPoints = 3; // List of endPoints exported by this SDX cluster.
  repeated ApiMapEntry configs = 4; // SDX cluster specifc options.
}

/**
 * This defines a single logical service in the SDX cluster.
 */
message ApiEndPoint {
  string name = 1; // Name for the endPoint.
  string serviceType = 2; // Endpoint service type.
  string version = 3; // Endpoint specific version
  repeated ApiEndPointHost endPointHostList = 4; // List hosts (uris) for this endPoint.
  repeated ApiMapEntry serviceConfigs = 5; // Additional configs for the endPoint.
}

/**
 * A host endPoint for a service.
 */
message ApiEndPointHost {
  string uri = 1; // Uri for the endPoint.
  string type = 2; // EndPointHost type.
  repeated ApiMapEntry endPointConfigs = 3; // EndPointHost specific configs.
}

/**
 * Models a map entry, with a key and a value.
 */
message ApiMapEntry {
  string key = 1; // key
  string value = 2; // value
}
