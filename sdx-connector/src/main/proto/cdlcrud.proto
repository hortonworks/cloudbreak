syntax = "proto3";

package cdlcrud;

option java_package = "com.cloudera.thunderhead.service.cdlcrud";
option java_outer_classname = "CdlCrudProto";

import "version.proto";
import "options.proto";
import "resources.proto";
import "sdxsvccommon.proto";

// For future compatibility, all rpcs must take a request and return a response
// even if there is initially no content for these messages.
service CdlCrud {

  // Create a Datalake
  rpc CreateDatalake (CreateDatalakeRequest)
      returns (CreateDatalakeResponse) {}

  // Delete a Datalake
  rpc DeleteDatalake (DeleteDatalakeRequest)
      returns (DeleteDatalakeResponse) {}

  // Describe a Datalake
  rpc DescribeDatalake (DescribeDatalakeRequest)
      returns (DescribeDatalakeResponse) {}

  // Describe a Datalake
  rpc FindDatalake (FindDatalakeRequest)
      returns (DatalakeResponse) {}

  // Describe Datalake Services
  rpc DescribeServices (DescribeServicesRequest)
      returns (DescribeServicesResponse) {}

  // Start DataLake diagnostics collection
  rpc CollectDatalakeDiagnostics (CollectDatalakeDiagnosticsRequest)
      returns (CollectDatalakeDiagnosticsResponse) {}

  // List recent Datalake diagnostics collections
  rpc ListDatalakeDiagnostics (ListDatalakeDiagnosticsRequest)
      returns (ListDatalakeDiagnosticsResponse) {}

  // Cancel running Datalake diagnostics collections
  rpc CancelDatalakeDiagnostics (CancelDatalakeDiagnosticsRequest)
      returns (CancelDatalakeDiagnosticsResponse) {}

  // List all Datalakes of an environment or datalake
  rpc ListDatalakes (ListDatalakesRequest)
      returns (ListDatalakesResponse) {}

  // Upgrades specified Datalake to a later version of its layout
  rpc UpgradeDatalake (UpgradeDatalakeRequest)
      returns (UpgradeDatalakeResponse) {}

  // Synchronize IBBroker mappings
  rpc SyncIDBrokerMappings (SyncIDBrokerMappingsRequest)
      returns (SyncIDBrokerMappingsResponse) {}

  // Backup or restore database of a Datalake
  rpc backupRestoreDatalake(BackupRestoreDatalakeRequest)
      returns (BackupRestoreDatalakeResponse) {}

  // Get operation status and status reason
  rpc getDatalakeOperationStatus(DatalakeOperationStatusRequest)
      returns (DatalakeOperationStatusResponse) {}

  // Stop a datalake
  rpc StopDatalake (StopDatalakeRequest)
      returns (StopDatalakeResponse) {}

  // Start a datalake which is in Stopped state
  rpc StartDatalake (StartDatalakeRequest)
      returns (StartDatalakeResponse) {}
}

// Database availability type
message DatabaseAvailabilityType {
  enum Value {
    // Field is not set
    UNSET = 0;
    // None
    NONE = 1;
    // Not Highly Available
    NON_HA = 2;
    // Highly Available
    HA = 3;
  }
}

// Status of the Datalake
message StatusType {
  enum Value {
    UNSET = 0;
    REQUESTED = 1;
    PROVISIONING = 2;
    PROVISIONED = 3;
    PROVISIONING_FAILED = 4;
    RUNNING = 5;
    STOPPED = 6;
    UPGRADING = 7;
    DELETING = 8;
    DELETED = 9;
    DELETE_FAILED = 10;
    UNKNOWN = 11;
    // non-critical services failing
    LIMITED_FUNCTIONALITY = 12;
    // datalake is unavailable due to hardware or network failure or core services unhealthy
    UNAVAILABLE = 13;
    BACKING_UP_DB = 14;
    RESTORING_DB = 15;
  }
}

// Status of the Datalake Operation
message OperationStatusType {
  enum Value {
    IN_PROGRESS = 0;
    FAILED = 1;
    SUCCEEDED = 2;
  }
}

// Information on each Instance Group
message InstanceGroup {
  // Name of the Instance Group
  string name = 1;
  // List of instances
  repeated Instance instances = 2;
}

message Instance {
  // ID of the Instance Group
  string id = 1;
  // State of the Instance Group
  string state = 2;
  // FQDN for Discovery
  string discoveryFQDN = 3;
  // Private IP of the Instance Group
  string privateIP = 4;
  // Public IP of the Instance Group (N/A if unavailable)
  string publicIP = 5;
  // Rack ID (if it exists)
  string rackID = 6;
  // Subnet ID
  string subnetID = 7;
  // Availability Zone
  string availabilityZone = 8;
}

// Information on each Endpoint for DescribeDatalake
message Endpoint {
  // Service Name of the Endpoint
  string serviceName = 1;
  // Service URL of the Endpoint
  string serviceURL = 2;
  // Display Name of the Endpoint
  string displayName = 3;
  // Knox Service of the Endpoint
  string knoxService = 4;
  // Mode of the Endpoint
  string mode = 5;
}

// Network information of the Datalake
message NetworkInfo {
  // Security Groups associated with Datalake
  repeated string securityGroups = 1;
  // Virtual Network associated with Datalake
  string virtualNetwork = 2;
  // Subnets associated with Datalake
  repeated string subnets = 3;
  // Whether an existing Virtual Network is being used
  bool existingVirtualNetwork = 4;
}

// Database information of the Datalake
message DatabaseInfo {
  // CRN of the database
  string crn = 1;
  // Name of the database
  string databaseName = 2;
  // Created date of the database
  int64 created = 3 [(options.FieldExtension.datetime) = true];
  // Whether SSL mode is enabled or not
  bool sslModeEnabled = 4;
  // which is the availability type of the database
  DatabaseAvailabilityType.Value availabilityType = 5;
  // Database instance host
  string host = 7;
  // Database instance port
  uint32 port = 8;
  // Secret engine path
  string secretEnginePath = 9;
  // Connection username path in the secrets manager
  string connectionUsernamePath = 10;
  // Connection password path in the secrets manager
  string connectionPasswordPath = 11;
}

// Definition of an endpoint structure
message EndpointInfo {
  // Name of the endpoint
  string name = 1;
  // Version of the service
  string version = 2;
  // Service-specific configuration key-value pairs
  repeated Config serviceConfigs = 3 [(options.FieldExtension.sensitive) = true];
  // List of endpoint hosts within the endpoint
  repeated EndpointHost endpointHosts = 4;
  // Type of endpoint service
  string serviceType = 5;
}

// Definition of the config key-value pairs
message Config {
  // Key of the configuration entry
  string key = 1;
  // Value of the configuration entry
  string value = 2;
}

// Definition of the config key-value pairs
message ProductVersion {
  // Name of the Product
  string name = 1;
  // Version of the Product
  string version = 2;
}

// Definition of the endpoint host structure
message EndpointHost {
  // URI to access the endpoint host
  string uri = 1;
  // Host-specific configuration key-value pairs
  repeated Config endPointHostConfigs = 2 [(options.FieldExtension.sensitive) = true];
  // Type of the endpoint host
  string type = 3;
}

// Create Datalake request
message CreateDatalakeRequest {
  // Name of the Datalake
  string datalakeName = 1;
  // Environment name in which the cluster is created
  string environmentName = 2;
  // The database availability type
  optional DatabaseAvailabilityType.Value databaseAvailabilityType = 3;
  // Tags in key / value format
  map<string, string> tags = 4;
  // The database engine version
  optional string databaseEngineVersion = 5;
  // Whether Ranger raz is enabled or not
  optional bool enableRangerRaz = 6;
  // Whether multi availability zones is enabled or not
  optional bool enableMultiAz = 7;
  // Cloudera runtime version
  string clouderaRuntimeVersion = 8;
  // Custom Layout
  optional string layout = 9;
  // Configurations specfic for AWS
  optional AwsConfiguration awsConfiguration = 10;
  // Requested service versions for creation.
  repeated sdxsvccommon.DeploymentVersionOverride serviceOverride = 11;
  // Requested Configuration Overrides
  map<string, string> configurationOverrides = 12;
  // Crn of the external liftie cluster to use for creation
  optional string externalLiftieClusterCrn = 13;
  // The type of Cloud Platform
  CloudPlatformType.Value cloudPlatform = 14;
  // The profiles to be used for the Cluster
  repeated string profiles = 15;
}

// Create Datalake response
message CreateDatalakeResponse {
  // CRN of the Datalake
  string crn = 1;
  // Status of the Datalake
  string status = 2;
  // Name of the Datalake
  string datalakeName = 3;
  // CRN of the environment in which the cluster is created
  string environmentCrn = 4;
  // The creation date in ms from the Java epoch of 1970-01-01T00:00:00Z.
  uint64 creationDateMs = 5;
  // Status reason
  string statusReason = 6;
  // Whether multi availability zones is enabled or not
  bool enableRangerRaz = 7;
  // Whether multi availability zones is enabled or not
  bool enableMultiAz = 8;
  // Tags associated with Datalake in key / value format
  map<string, string> tags = 9;
}

// Delete Datalake request
message DeleteDatalakeRequest {
  // Name or CRN of the Datalake
  string datalake = 1;
  // Force deletion or not
  bool force = 2;
}

// Delete Datalake response
message DeleteDatalakeResponse {
  // CRN of the Datalake
  string crn = 1;
  // Status of the Datalake
  string status = 2;
}

// Describe Datalake request
message DescribeDatalakeRequest {
  // Name or CRN of the Datalake
  string datalake = 1;
  // Account id if not internal actor
  string accountID = 2;
}

// Describe Datalake response
message DescribeDatalakeResponse {
  // CRN of the Datalake
  string crn = 1;
  // Name of the Datalake
  string name = 2;
  // Status of the Datalake
  StatusType.Value status = 3;
  // Shape of the Datalake
  string shape = 4;
  // Environment CRN associated with Datalake
  string environmentCrn = 5;
  // Cloud Platform
  string cloudPlatform = 6;
  // Instance Groups associated with Datalake
  repeated InstanceGroup instanceGroups = 7;
  // Service endpoint info
  repeated Endpoint endpoints = 8;
  // Network information of Datalake
  NetworkInfo network = 9;
  // Account ID
  string accountID = 10;
  // Runtime Version
  string runtimeVersion = 11;
  // Tags associated with Datalake
  map<string, string> tags = 12;
  // Created date
  int64 created = 13 [(options.FieldExtension.datetime) = true];
  // Deleted date (if it exists)
  string deleted = 14;
  // Ranger RAZ enabled or not
  bool rangerRazEnabled = 15;
  // Database Details of Datalake
  DatabaseInfo databaseDetails = 16;
  // Status reason
  repeated string statusReason = 17;
  // Whether multi availability zones is enabled or not
  bool multiAzEnabled = 18;
  // Geographic location code where cluster was created
  string region = 19;
  // Product Version
  ProductVersion productVersion = 20;
  // Environment Name
  string environmentName = 21;
  // Liftie Cluster id
  string cluster = 22;
  // Credentials used to create the cdl
  string credentialName = 23;
  // Path to the storage location
  string cloudStorageBaseLocation = 24;
}

// Find Datalake Request
message FindDatalakeRequest {
  // Name or CRN of the Datalake
  string datalake = 1;
  string accountID = 2;
  string environment = 3;
}

// Find Datalake response
message DatalakeResponse {
  // CRN of the Datalake
  string crn = 1;
  // Name of the Datalake
  string name = 2;
  // Status of the Datalake
  string status = 3;
  // Environment CRN of the Datalake
  string environmentCrn = 4;
  // Creation time of the Datalake
  int64 created = 5 [(options.FieldExtension.datetime) = true];
  // Status reason of the Datalake
  string statusReason = 6;
  // Ranger RAZ enabled or not of the Datalake
  bool rangerRazEnabled = 7;
  // MultiAZ enabled or not of the Datalake
  bool multiAzEnabled = 8;
}

// Describe Services Request
message DescribeServicesRequest {
  // CRN or Name of the Datalake
  string datalake = 1;
  // Account id if not internal actor
  string accountID = 2;
}

// Describe Services Response
message DescribeServicesResponse {
  // Name of the Datalake
  string name = 1;
  // CRN of the datalake
  string crn = 2;
  // Collection of endpoint objects
  repeated EndpointInfo endpoints = 3;
  // Collection of global configuration key-value pairs
  repeated Config configs = 4 [(options.FieldExtension.sensitive) = true];
  // Version of the datalake
  string version = 5;
}

// Aws Configurations
message AwsConfiguration {
  // AWS bucket path
  string storageBucketLocation = 1;
  //IDBroker instance profile
  string idbrokerInstanceProfile = 2;
}

message CollectDatalakeDiagnosticsRequest {
  // Name or CRN of the Datalake
  string datalake = 1;
  // Destination of the diagnostics collection
  Destination.Value destination = 2;
  // Additional information / title for the diagnostics collection
  optional string description = 3;
  // Support case number in case of SUPPORT destination, otherwise only act as additional data
  string caseNumber = 4;
  // Date timestamp - collect files only for diagnostics that has higher last modified timestamp value than this
  int64 startDate = 5 [(options.FieldExtension.datetime) = true];
  // Date timestamp - collect files only for diagnostics that has lower created timestamp value than this
  int64 endDate = 6 [(options.FieldExtension.datetime) = true];
}

// Destination of the diagnostics collection (Support, Own cloud storage)
message Destination {
  enum Value {
    // Field is not set
    UNSET = 0;
    SUPPORT = 1;
  }
}

// Response object for collecting DataLake diagnostics
message CollectDatalakeDiagnosticsResponse {
  // Details of a diagnostic collection
  DiagnosticsCollection  diagnostics = 1;
}

message DiagnosticsCollection {
  // Unique ID to track diagnostic collection
  string collectionId = 1;
  // Creation time of the diagnostics collection
  int64 created = 2 [(options.FieldExtension.datetime) = true];
  // Status of the diagnostics collection flow
  DiagnosticsCollectionStatus.Value status = 3;
}

// Status of the diagnostics collection flow
message DiagnosticsCollectionStatus {
  enum Value {
    RUNNING = 0;
    FAILED = 1;
    FINISHED = 2;
    CANCELLED = 3;
  }
}

// Request object for listing recent Datalake diagnostics collections. In no window provided, defaults will be used.
message ListDatalakeDiagnosticsRequest {
  // Name or CRN of the Datalake
  string datalake = 1;
  // Date timestamp - collect files only for diagnostics that has higher last modified timestamp value than this
  optional int64 startDate = 2 [(options.FieldExtension.datetime) = true];
  // Date timestamp - collect files only for diagnostics that has lower created timestamp value than this
  optional int64 endDate = 3 [(options.FieldExtension.datetime) = true];
}

// Response object for listing recent Datalake diagnostics collections
message ListDatalakeDiagnosticsResponse {
  // Update of each diagnostic collection, in a given window of time.
  repeated DiagnosticsCollection diagnostics = 1;
}


// Request object for cancel running Datalake diagnostics collections
message CancelDatalakeDiagnosticsRequest {
  // Name or CRN of the Datalake
  string datalake = 1;
}

// Response object for cancel running Datalake diagnostics collections
message CancelDatalakeDiagnosticsResponse {
}

// List Datalakes Request
message ListDatalakesRequest {
  // Name or CRN of the Environment
  string environment = 1;
  string accountID = 2;
  // Name or CRN of the Datalake
  string datalake = 3;
}

// Response object for listing datalakes
message ListDatalakesResponse {
  repeated DatalakeResponse datalakeResponse = 1;
}

// Upgrade Datalake Request
message UpgradeDatalakeRequest {
  // Name or CRN of the Datalake
  string datalake = 1;
  // Optional runtime version to upgrade services to
  optional string clouderaRuntimeVersion = 2;
  // Optional config overrides to apply with upgrade
  map<string, string> customConfigOverrides = 3;
  // Whether to skip the full upgrade and just apply custom config overrides or not
  optional bool skipFullUpgrade = 4;
}

// Upgrade Datalake Response
message UpgradeDatalakeResponse {
  // Name of the Datalake
  string datalakeName = 1;
  // CRN of the Datalake
  string datalakeCrn = 2;
  // Status of the upgrade operation
  string status = 3;
  // Workflow ID for the upgrade action
  string workflowId = 4;
}

// Request object for sync IDBroker mappings
message SyncIDBrokerMappingsRequest {
  string accountID = 2;
  // Name or CRN of the Datalake
  string datalake = 3;
  // Mappings for a specific actor
  map<string, string> actorMappings = 4;
  // Mappings for a group
  map<string, string> groupMappings = 5;
}

// Response object for sync IDBroker mappings
message SyncIDBrokerMappingsResponse {
  // Status of the Datalake
  string status = 1;
}

message BackupRestoreDatalakeRequest {
  // name or CRN of the Datalake
  string datalake = 1;
  // Location of where backup/restore the data to/from
  string backupLocation = 2;
  // If close connections of the database during backup/restore
  bool closeDbConnections = 3;
  // Backup or restore
  BackupRestoreType.Value type = 4;
  // Backup ID or restore ID
  string operationId = 5;
  // Account Id
  string accountId = 6;
}

message BackupRestoreDatalakeResponse {
  string operationId = 1;
}

message BackupRestoreType {
  enum Value {
    BACKUP = 0;
    RESTORE = 1;
  }
}

// Get datalake operation status request
message DatalakeOperationStatusRequest {
  // Name or CRN of the Datalake
  string datalake = 1;
  // ID of the operation
  string operationId = 2;
  // Account Id
  string accountId = 3;
}

// Get datalake operation status response
message DatalakeOperationStatusResponse {
  // Status of the Datalake operation
  OperationStatusType.Value status = 1;
  // Status reason of the operation
  string statusReason = 2;
}

// Request object for Stop datalake
message StopDatalakeRequest {
  // Name or CRN of the Datalake
  string datalake = 1;
}

// Response object for Stop datalake
message StopDatalakeResponse {
  // CRN of the Datalake
  string crn = 1;
  // Name of the Datalake
  string name = 2;
  // Status of the Datalake
  string status = 3;
  // Environment CRN of the Datalake
  string environmentCrn = 4;
}

// Request object for Start datalake
message StartDatalakeRequest {
  // Name or CRN of the Datalake
  string datalake = 1;
}

// Response object for Start datalake
message StartDatalakeResponse {
  // CRN of the Datalake
  string crn = 1;
  // Name of the Datalake
  string name = 2;
  // Status of the Datalake
  string status = 3;
  // Environment CRN of the Datalake
  string environmentCrn = 4;
}

// Cloud Platform of the Data Lake
message CloudPlatformType {
  enum Value {
    AWS = 0;
    AWS_GOV = 1;
    AZURE = 2;
    YARN = 3;
    MOCK = 4;
    GCP = 5;
  }
}
