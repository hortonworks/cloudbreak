import org.ajoberstar.grgit.Grgit

buildscript {
  repositories {
    maven { url = "$repoUrl" }
    maven { url = "$springRepoUrl" }
    mavenCentral()
  }
  dependencies {
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarVersion}"
  }
}

plugins {
  id "java"
  id "checkstyle"
  id "jacoco"
  id "maven-publish"
  id "org.springframework.boot" version "2.1.2.RELEASE"
  id "org.sonarqube" version "${sonarVersion}"
}

apply plugin: org.sonarqube.gradle.SonarQubePlugin

sonarqube {
  properties {
    property "sonar.sourceEncoding", "UTF-8"
    property "sonar.projectName", "cb-datalake-service"
    property "sonar.projectKey", "cb-datalake-service"
    property "sonar.java.coveragePlugin", "plugin"
    property "sonar.sources", "src/main"
    property "sonar.tests", "src/test"
    property "sonar.java.binaries", "build/classes"
    property "sonar.java.libraries", "build/libs/*.jar"
    property "project.reporting.outputEncoding", "UTF-8"
    property "sonar.host.url", "$System.env.SONAR_URL"
    property "sonar.login", "$System.env.SONAR_PASSWORD"
    property "org.gradle.internal.http.socketTimeout", "600000"
    property "org.gradle.internal.http.connectionTimeout", "600000"
    property "sonar.coverage.exclusions", "**/proto/**,**/generated/**"
    property "sonar.exclusions", "**/proto/**,**/generated/**"
  }
}

configurations {
  all {
    resolutionStrategy {
      force "org.yaml:snakeyaml:$snakeYamlVersion"
    }
  }
}

dependencies {
  implementation project(':authorization-common')
  implementation project(':common')
  implementation project(':flow')
  implementation project(':secret-engine')
  implementation project(':notification-sender')
  implementation project(':idbmms-connector')
  implementation project(':datalake-dr-connector')

  implementation project(":cloud-consumption-api")
  implementation project(':core-api')
  implementation project(':datalake-api')
  implementation project(':environment-api')
  implementation project(':redbeams-api')
  implementation project(':status-checker')

  implementation     project(":freeipa-api")
  implementation     project(':client-cm')
  implementation     project(":structuredevent-service-cdp")

  implementation     group: 'com.squareup.okhttp3',      name: 'okhttp',                          version: okhttpVersion
  implementation     group: 'com.google.code.gson',      name: 'gson',                            version: gsonVersion
  implementation     group: 'dnsjava',                   name: 'dnsjava',                         version: '3.5.2'
  implementation     group: 'com.dyngr',                 name: 'polling',                         version: dyngrPollingVersion
  implementation     group: 'io.springfox',              name: 'springfox-boot-starter',          version: swaggerSpringFoxVersion
  implementation     ("io.swagger:swagger-jersey2-jaxrs:$swaggerVersion") {
    exclude group: 'org.yaml'
  }
  implementation     group: 'org.glassfish.jersey.core', name: 'jersey-server',                   version: jerseyCoreVersion
  implementation     group: 'org.glassfish.jersey.media',name: 'jersey-media-json-jackson',       version: jerseyCoreVersion
  implementation     group: 'org.mybatis',               name: 'mybatis-migrations',              version: mybatisMigrationVersion
  implementation     group: 'org.postgresql',            name: 'postgresql',                      version: postgreSQLVersion
  implementation     group: 'org.springframework.boot',  name: 'spring-boot-starter',             version: springBootVersion
  implementation     group: 'org.springframework.boot',  name: 'spring-boot-starter-web',         version: springBootVersion
  implementation     group: 'org.springframework.boot',  name: 'spring-boot-starter-actuator',    version: springBootVersion
  implementation     group: 'org.springframework.boot',  name: 'spring-boot-starter-jersey',      version: springBootVersion
  implementation     group: 'org.springframework.boot',  name: 'spring-boot-starter-data-jpa',    version: springBootVersion

  implementation     group: 'org.springframework.boot',  name: 'spring-boot-starter-quartz',      version: springBootVersion

  implementation     group: 'com.cloudera.api.swagger',    name: 'cloudera-manager-api-swagger',  version: cmClientVersion

  // mockito juniper depends on ByteBuddy 1.9.7, but hibernate use older version
  implementation group: 'net.bytebuddy',                 name: 'byte-buddy',                      version: '1.14.4'

  testImplementation project(path: ':authorization-common', configuration: 'tests')
  testImplementation project(path: ':common', configuration: 'tests')
  testImplementation project(path: ':flow', configuration: 'tests')
  testImplementation group: 'org.springframework.boot',  name: 'spring-boot-starter-test',        version: springBootVersion
  testImplementation group: 'org.mockito',               name: 'mockito-inline',                  version: mockitoVersion

  testRuntimeClasspath group: 'org.testcontainers',      name: 'postgresql',                      version: testContainersVersion
  testRuntimeClasspath group: 'org.awaitility',          name: 'awaitility',                      version: awaitilityVersion

}

bootRun {
  systemProperty 'spring.profiles.active', System.properties['spring.profiles.active']
  systemProperty 'spring.config.location', System.properties['spring.config.location']
  if (project.hasProperty('jvmArgs')) {
    jvmArgs += project.jvmArgs.split("\\s+").toList()
  }
}

bootRun {
  main = 'com.sequenceiq.datalake.DatalakeApplication'
}

bootJar {
  baseName = 'datalake'
  archiveName = 'datalake.jar'
  manifest {
    def grgit = Grgit.open(currentDir: project.projectDir)
    attributes "Implementation-Version": grgit.describe()
  }
}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
    repositories {
        maven {
            url = "$System.env.NEXUS_URL"
            allowInsecureProtocol = true
            credentials {
                username = "$System.env.NEXUS_USER"
                password = "$System.env.NEXUS_PASSWORD"
            }
        }
    }
}
