<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="severity" value="error" />
    <module name="TreeWalker">
        <property name="tabWidth" value="4" />

        <!-- Format -->
        <module name="EmptyForIteratorPad" />
        <module name="EmptyForInitializerPad" />
        <module name="MethodParamPad" />
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS" />
        </module>
        <module name="NoWhitespaceBefore" />
        <module name="OperatorWrap" />
        <module name="ParenPad" />
        <module name="TypecastParenPad" />
        <module name="WhitespaceAfter" />
        <module name="WhitespaceAround" />
        <module name="GenericWhitespace" />
        <module name="LeftCurly" />
        <module name="NeedBraces" />
        <module name="RightCurly" />
        <module name="LineLength">
            <!--  more? 160 should be okay -->
            <!-- n+1, because eclipse formatter tends to format for +1 length :) -->
            <property name="max" value="161" />
        </module>
        <module name="PackageDeclaration" />
        <!-- -->

        <!-- Naming -->
        <module name="PackageName">
            <property name="format" value="^com\.sequenceiq(\.[a-z0-9]{2,15})+$" />
        </module>
        <module name="TypeName" />
        <module name="ClassTypeParameterName" />
        <module name="AbstractClassName">
            <property name="format" value="^Abstract.*$" />
            <property name="ignoreName" value="true" />
        </module>
        <module name="ConstantName" />
        <module name="StaticVariableName" />
        <module name="MemberName" />
        <module name="MethodName" />
        <module name="MethodTypeParameterName" />
        <module name="ParameterName" />
        <module name="LocalFinalVariableName" />
        <module name="LocalVariableName" />
        <!-- -->

        <!-- Javadoc 
        <module name="JavadocMethod">
            <property name="scope" value="protected" />
            <property name="allowUndeclaredRTE" value="true" />
            <property name="allowMissingParamTags" value="true" />
            <property name="allowMissingThrowsTags" value="true" />
            <property name="allowMissingReturnTag" value="true" />
            <property name="allowMissingPropertyJavadoc" value="true" />
            <property name="suppressLoadErrors" value="true" />
            <property name="tokens" value="METHOD_DEF" />
        </module>
        <module name="JavadocType">
            <property name="scope" value="package" />
        </module>
        <module name="JavadocVariable">
            <property name="scope" value="protected" />
        </module>
        <module name="JavadocStyle">
            <property name="checkEmptyJavadoc" value="true" />
        </module>
        -->

        <!-- Metrics -->
        <module name="ParameterNumber">
            <property name="max" value="7" />
            <property name="tokens" value="METHOD_DEF" />
        </module>
        <module name="CyclomaticComplexity">
            <property name="max" value="10" />
        </module>
        <module name="NPathComplexity">
            <property name="max" value="256" />
        </module>
        <!-- -->

        <!-- Style -->
        <module name="ModifierOrder" />
        <module name="VisibilityModifier" />
        <module name="InterfaceIsType" />
        <!--<module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true" />
            <property name="ignoreSetter" value="true" />
            <property name="ignoreAbstractMethods" value="true" />
        </module> -->
        <module name="UpperEll" />
        <module name="ArrayTypeStyle" />
        <module name="DeclarationOrder" />
        <module name="MultipleVariableDeclarations" />
        <module name="StringLiteralEquality" />
        <module name="InnerTypeLast" />
        <module name="EqualsAvoidNull" />
        <module name="DefaultComesLast" />
        <module name="OneStatementPerLine" />
        <module name="CovariantEquals" />
        <module name="TrailingComment" />
        <module name="FallThrough" />
        <module name="OuterTypeNumber" />
        <module name="SuperClone" />
        <module name="MutableException" />
        <module name="AvoidStarImport" />
        <module name="PackageAnnotation" />
        <!-- -->

        <!-- Redundancy -->
        <module name="EmptyBlock" />
        <module name="EmptyStatement" />
        <module name="RedundantModifier" />
        <module name="RedundantThrows">
            <property name="suppressLoadErrors" value="true" />
        </module>
        <module name="ExplicitInitialization" />
        <module name="Regexp">
            <property name="format" value="\bsuper\(\);" />
            <property name="message" value="Remove unnecessary super default constructor call." />
            <property name="illegalPattern" value="true" />
            <property name="ignoreComments" value="true" />
        </module>
        <module name="Regexp">
            <property name="format" value="Auto-generated|non-Javadoc" />
            <property name="message" value="Remove auto-generated comments." />
            <property name="illegalPattern" value="true" />
        </module>
        <module name="UnnecessaryParentheses" />
        <module name="RedundantImport" />
        <module name="UnusedImports" />
        <module name="SimplifyBooleanExpression" />
        <module name="SimplifyBooleanReturn" />
        <!-- -->

        <!-- Deprecations -->
        <module name="AvoidNestedBlocks" />
        <module name="EqualsHashCode" />
        <module name="ModifiedControlVariable" />
        <module name="InnerAssignment" />
        <module name="MagicNumber">
            <property name="ignoreHashCodeMethod" value="true" />
            <property name="ignoreAnnotation" value="true" />
        </module>
        <module name="NoFinalizer" />
        <module name="IllegalInstantiation">
            <!-- use valueOf() -->
            <property name="classes" value="java.lang.Boolean,java.lang.Integer,java.lang.Long,java.lang.Float,java.lang.Double" />
        </module>
        <module name="IllegalInstantiation">
            <!-- use alternative classes -->
            <property name="classes" value="java.util.Vector" />
        </module>
        <module name="IllegalInstantiation">
            <property name="id" value="hashtable-instantiation"/>
            <!-- use alternative classes -->
            <property name="classes" value="java.util.Hashtable" />
        </module>
        <module name="IllegalThrows" />
        <module name="IllegalCatch">
            <property name="illegalClassNames" value="java.lang.NullPointerException, java.lang.IllegalStateException, java.lang.IllegalArgumentException" />
        </module>
        <module name="IllegalType">
            <property name="format" value="^$" />
        </module>
        <module name="IllegalType">
            <property name="id" value="IllegalTypeImpl"/>
            <property name="format" value="^(Abstract.*|.*Impl)$" />
            <property name="illegalClassNames" value="" />
        </module>
        <module name="IllegalImport">
            <!-- use org.slf4j -->
            <property name="illegalPkgs" value="sun, org.apache.commons.logging, org.apache.log4j, java.util.logging" />
        </module>
        <module name="IllegalImport">
            <!-- use org.junit -->
            <property name="illegalPkgs" value="junit.framework" />
        </module>
        <module name="IllegalImport">
            <!-- use mockito -->
            <property name="illegalPkgs" value="org.easymock" />
        </module>
        <module name="IllegalImport">
            <!-- use lang3 -->
            <property name="illegalPkgs" value="org.apache.commons.lang" />
        </module>
        <module name="IllegalImport">
            <!-- deprecated lib -->
            <property name="illegalPkgs" value="org.apache.commons.collections" />
        </module>
        <!-- -->

        <!-- Missing code -->
        <module name="HideUtilityClassConstructor" />
        <module name="MissingOverride" />
        <module name="MissingDeprecated" />
        <module name="MissingSwitchDefault" />
        <!-- -->

        <!-- Makes suppression comments available -->
        <module name="FileContentsHolder" />
        <!-- -->
    </module>

    <!-- Deprecation -->
    <module name="RegexpMultiline">
        <property name="id" value="sysout" />
        <property name="format" value="System\s*\.\s*(out|err)" />
        <property name="message" value="Avoid writing directly to the console. Use logger." />
        <property name="fileExtensions" value="java" />
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="System\s*\.\s*(exit)" />
        <property name="message" value="Do not mess with JVM." />
        <property name="fileExtensions" value="java" />
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="\.printStackTrace\(\)" />
        <property name="message" value="Avoid printing exception stack-trace onto console. Use logger or re-throw (in a wrapper)." />
        <property name="fileExtensions" value="java" />
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="catch \(\w+ \w+\) \{\s*(Assert\s*\.)?\s*(fail\(|assertNotNull\(\w+\))" />
        <property name="message" value="Unnecessary catch. Add &quot;throws&quot; to test method." />
        <property name="fileExtensions" value="java" />
    </module>
    <!-- -->

    <!-- Format -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
        <property name="fileExtensions" value="java,xml,properties" />
    </module>
    <module name="Translation" />
    <module name="RegexpSingleline">
        <property name="format" value="(?&lt;!^\s+\*)\s+$"/>
        <property name="message" value="Line has trailing spaces." />
        <property name="fileExtensions" value="java,xml,properties" />
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="^(    )* {1,3}[^ *]" />
        <property name="message" value="Indentation problem." />
        <property name="fileExtensions" value="java,xml" />
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="\* (@return|@param &lt;?\w+&gt;?|@throws \w+)\r?\n" />
        <property name="message" value="Empty javadoc item. Either delete or describe." />
        <property name="fileExtensions" value="java" />
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="([a-zA-Z0-9]+) = ((?!\1).)*?;(\r?\n)+ *return \1;" />
        <property name="message" value="Unnecessary local variable." />
        <property name="fileExtensions" value="java" />
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="(?&lt;!\.)this\.\w+\(" />
        <property name="message" value="Do not use &quot;this&quot; for method calls." />
        <property name="fileExtensions" value="java" />
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="[Bb]oolean is[A-Z]\w+\b(?!\()" />
        <property name="message" value="Boolean variables should not be prefixed with &quot;is&quot;." />
        <property name="fileExtensions" value="java" />
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="interface I[A-Z]\w+\b" />
        <property name="message" value="Interfaces should not be prefixed with &quot;I&quot;." />
        <property name="fileExtensions" value="java" />
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="(i?)class \w+DTO\b" />
        <property name="message" value="Classes should not be suffixed with &quot;DTO&quot;." />
        <property name="fileExtensions" value="java" />
    </module>
    <module name="RegexpHeader">
        <property name="header" value="^package.*" />
        <property name="fileExtensions" value="java" />
    </module>
    <!-- -->

    <!-- Deprecation -->
    <module name="RegexpSingleline">
        <property name="format" value="@SuppressWarnings\(.*&quot;deprecation&quot;" />
        <property name="message" value="Deprecation warning must not be suppressed. API is deprecated for reason!" />
        <property name="fileExtensions" value="java" />
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="return &quot;jsonfeedtemplate&quot;" />
        <property name="message" value="This view is deprecated. Use @ResponseBody annotation and return a POJO or Map&lt;String, Object&gt; of values." />
        <property name="fileExtensions" value="java" />
    </module>

    <!-- Metrics -->
    <module name="FileLength">
        <property name="fileExtensions" value="java,xml,properties" />
    </module>
    <!-- -->

    <!-- Suppressions -->
    <module name="SuppressionCommentFilter">
        <!-- javadoc is not required for enum items -->
        <property name="offCommentFormat" value="ENUM ITEMS START" />
        <property name="onCommentFormat" value="ENUM ITEMS END" />
        <property name="checkFormat" value="JavadocVariable" />
    </module>
    <module name="SuppressionFilter">
        <property name="file" value="${config_loc}/checkstyle-suppressions.xml" />
    </module>
</module>
