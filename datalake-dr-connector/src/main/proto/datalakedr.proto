syntax = "proto3";

package datalakedr;

option java_package = "com.cloudera.thunderhead.service.datalakedr";
option java_outer_classname = "datalakeDRProto";

import "version.proto";

// For future compatibility, all rpcs must take a request and return a response
// even if there is initially no content for these messages.
service datalakeDR {
  // Get the service version.
  rpc GetVersion (version.VersionRequest)
      returns (version.VersionResponse) {}

  /**
   * Backup datalake
   */
  rpc BackupDatalake (BackupDatalakeRequest) returns (BackupDatalakeResponse) {
  }

  /**
   * Restore datalake
   */
  rpc RestoreDatalake (RestoreDatalakeRequest) returns (RestoreDatalakeResponse) {
  }

  /**
   * Get the status datalake backup
   */
  rpc BackupDatalakeStatus (BackupDatalakeStatusRequest) returns (BackupDatalakeStatusResponse) {
  }

  /**
   * Get the status datalake restore
   */
  rpc RestoreDatalakeStatus (RestoreDatalakeStatusRequest) returns (RestoreDatalakeStatusResponse) {
  }

  /**
   * List the Backup's of a datalake
   */
  rpc ListDatalakeBackups (ListDatalakeBackupRequest) returns (ListDatalakeBackupResponse) {
  }

  /**
   * Cancel backup operation
   */
  rpc CancelDatalakeBackup (CancelDatalakeBackupRequest) returns (CancelDatalakeBackupResponse) {
  }

  /**
   * Cancel restore operation
   */
  rpc CancelDatalakeRestore (CancelDatalakeRestoreRequest) returns (CancelDatalakeRestoreResponse) {
  }
}

// BackupRestoreOperationStatus
message BackupRestoreOperationStatus {
  string status = 1; // The operation status
  string failureReason = 2; // Reason for operation failure. Only set if operation fails.
}

// AdminOperationsBackupRestoreState
message AdminOperationsBackupRestoreState {
  BackupRestoreOperationStatus stopServices = 1; // Stopping services before a backup or restore.
  BackupRestoreOperationStatus startServices = 2; // Restarting services after the backup or restore is complete.
}

// HbaseBackupRestoreState
message HbaseBackupRestoreState {
  BackupRestoreOperationStatus atlasEntityAuditEventTable = 1; // State of the ATLAS_ENTITY_AUDIT_EVENTS_TABLE backup.
  BackupRestoreOperationStatus atlasJanusTable = 2; // State of the ATLAS_JANUS_TABLE backup.
}

// SolrBackupRestoreState
message SolrBackupRestoreState {
  BackupRestoreOperationStatus edgeIndexCollection = 1; // State of the EDGE_INDEX_COLLECTION backup.
  BackupRestoreOperationStatus fulltextIndexCollection = 2; // State of the FULLTEXT_INDEX_COLLECTION backup.
  BackupRestoreOperationStatus rangerAuditsCollection = 3; // State of the RANGER_AUDITS_COLLECTION backup.
  BackupRestoreOperationStatus vertexIndexCollection = 4; // State of the VERTEX_INDEX_COLLECTION backup.
  BackupRestoreOperationStatus edgeIndexCollectionDelete = 5; // State of the EDGE_INDEX_COLLECTION deletion operation, done before restore.
  BackupRestoreOperationStatus fulltextIndexCollectionDelete = 6; // State of the FULLTEXT_INDEX_COLLECTION deletion operation, done before restore.
  BackupRestoreOperationStatus rangerAuditsCollectionDelete = 7; // State of the RANGER_AUDITS_COLLECTION deletion operation, done before restore.
  BackupRestoreOperationStatus vertexIndexCollectionDelete = 8; // State of the VERTEX_INDEX_COLLECTION deletion operation, done before restore.
}

// DatabaseBackupRestoreState
message DatabaseBackupRestoreState {
  BackupRestoreOperationStatus database = 1; // State of the database backup.
}

// InternalBackupRestoreState
message InternalBackupRestoreState {
  AdminOperationsBackupRestoreState adminOperations = 1; // Admin operations
  HbaseBackupRestoreState hbase = 2; // Hbase backup or restore
  SolrBackupRestoreState solr = 3; // Solr backup or restore
  DatabaseBackupRestoreState database = 4; // Database backup or restore
}

/**
* Request to backup datalake
*/
message BackupDatalakeRequest {
  string datalakeName = 1; // The name of the datalake that has to be backed-up.
  string backupName = 2; // The name of the backup being performed.
  string backupLocation = 3; // Location where the data has to be backed-up.
  bool closeDbConnections = 4; // Close the database connections while performing backup of the databases.
}

/**
* Response to datalake backup request
*/
message BackupDatalakeResponse {
  string backupName = 1; // Name of the backup
  string accountId = 2; // Account Id
  string userCrn = 3; // User who performed the back-up operation.
  string backupId = 4; // Unique identifier for the back-up.
  string internalState = 5; // DEPRECATED - maintained for backwards compatibility
  string overallState = 6; // The final result of the backup operation.
  string startTimestamp = 7; // Timestamp when the operation is started.
  string endTimestamp = 8; // Timestamp when the operation is complete.
  string backupLocation = 9; // Location where back-up is exported.
  string failureReason = 10; // DEPRECATED - maintained for backwards compatibility
  InternalBackupRestoreState operationStates = 11; // The status of each operation, including any failure reasons.
  string runtimeVersion = 12; // The runtime version of the datalake when the backup was taken.
}

/**
* Request to restore datalake
*/
message RestoreDatalakeRequest {
  string datalakeName = 1; // The name of the datalake that has to be restored.
  string backupName = 2; // The name of the backup from which restore has to performed.
  string backupId = 3; // Unique identifier for the back-up.
  bool includeDatabase = 4; // When set to true would trigger database restore.
  bool force = 5; // When set to true will restore even if the backups is in a failed state.
  string backupLocationOverride = 6; // Used this location to perform the restore.
}

/**
* Response to datalake restore request
*/
message RestoreDatalakeResponse {
  string accountId = 1; // Account Id
  string backupId = 2;
  string restoreId = 3; // Unique identifier for the restore.
  string userCrn = 4; // User who performed the back-up operation.
  string internalState = 5; // DEPRECATED - maintained for backwards compatibility
  string overallState = 6; // The final result of the backup operation.
  string startTimestamp = 7; // Timestamp when the operation is started.
  string endTimestamp = 8; // Timestamp when the operation is complete.
  string backupLocation = 9; // Location where back-up is exported.
  string failureReason = 10; // DEPRECATED - maintained for backwards compatibility
  InternalBackupRestoreState operationStates = 11; // The status of each operation, including any failure reasons.
}

/**
* Request to get datalake backup status.
*/
message BackupDatalakeStatusRequest {
  string datalakeName = 1; // The name of the datalake.
  string backupId = 2; // Id of the backup operation performed.
  string backupName = 3; // Name of the backup operation performed.
}

/**
* Response to datalake backup status request
*/
message BackupDatalakeStatusResponse {
  string backupName = 1; // Name of the backup
  string accountId = 2; // Account Id
  string userCrn = 3; // User who performed the back-up operation.
  string backupId = 4; // Unique identifier for the back-up.
  string internalState = 5; // DEPRECATED - maintained for backwards compatibility
  string overallState = 6; // The final result of the backup operation.
  string startTimestamp = 7; // Timestamp when the operation is started.
  string endTimestamp = 8; // Timestamp when the operation is complete.
  string backupLocation = 9; // Location where back-up is exported.
  string failureReason = 10; // DEPRECATED - maintained for backwards compatibility
  InternalBackupRestoreState operationStates = 11; // The status of each operation, including any failure reasons.
  string runtimeVersion = 12; // The runtime version of the datalake when the backup was taken.
}

/**
* Request to get datalake restore status.
*/
message RestoreDatalakeStatusRequest {
  reserved 3;
  reserved "backupName";
  string datalakeName = 1; // The name of the datalake.
  string restoreId = 2; // Id of the restore operation performed.
}

/**
* Response to datalake backup status request
*/
message RestoreDatalakeStatusResponse {
  string accountId = 1; // Account Id
  string restoreId = 2; // Unique identifier for the restore.
  string backupId = 3; // Unique identifier of the back-up used to perform restore.
  string userCrn = 4; // User who performed the back-up operation.
  string internalState = 5; // DEPRECATED - maintained for backwards compatibility
  string overallState = 6; // The final result of the backup operation.
  string startTimestamp = 7; // Timestamp when the operation is started.
  string endTimestamp = 8; // Timestamp when the operation is complete.
  string backupLocation = 9; // Location where back-up is exported.
  string failureReason = 10; // DEPRECATED - maintained for backwards compatibility
  InternalBackupRestoreState operationStates = 11; // The status of each operation, including any failure reasons.
}


/**
* Response to datalake backup status request
*/
message DatalakeBackupInfo {
  string backupName = 1; // Name of the backup
  string accountId = 2; // Account Id
  string userCrn = 3; // User who performed the back-up operation.
  string backupId = 4; // Unique identifier for the back-up.
  string internalState = 5; // DEPRECATED - maintained for backwards compatibility
  string overallState = 6; // The final result of the backup operation.
  string startTimestamp = 7; // Timestamp when the operation is started.
  string endTimestamp = 8; // Timestamp when the operation is complete.
  string backupLocation = 9; // Location where back-up is exported.
  string failureReason = 10; // DEPRECATED - maintained for backwards compatibility
  InternalBackupRestoreState operationStates = 11; // The status of each operation, including any failure reasons.
  string runtimeVersion = 12; // The runtime version of the datalake when the backup was taken.
}

/**
* Request to list the backup's available for a datalake
*/
message ListDatalakeBackupRequest {
  string datalakeName = 1; // The name of the datalake that has to be backed-up.
}

/**
* Response for a request to list the backup's available for a datalake
*/
message ListDatalakeBackupResponse {
  repeated DatalakeBackupInfo datalake_info = 1; //
}

/**
* Request to invalidate datalake backup status.
*/
message CancelDatalakeBackupRequest {
  string backupId = 1; // Id of the backup operation performed.
}

/**
* Response to invalidate datalake backup status request.
*/
message CancelDatalakeBackupResponse {
  string result = 1; // result of the invalidation operation.
}

/**
* Request to invalidate datalake backup status.
*/
message CancelDatalakeRestoreRequest {
  string restoreId = 1; // Id of the backup operation performed.
}

/**
* Response to invalidate datalake backup status request.
*/
message CancelDatalakeRestoreResponse {
  string result = 1; // result of the invalidation operation.
}
