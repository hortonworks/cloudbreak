syntax = "proto3";

package publicendpointmanagement;

option java_package = "com.cloudera.thunderhead.service.publicendpointmanagement";
option java_outer_classname = "PublicEndpointManagementProto";
option go_package = "com/cloudera/cdp/protobuf";

import "version.proto";
import "options.proto";

// For future compatibility, all rpcs must take a request and return a response
// even if there is initially no content for these messages.
service PublicEndpointManagement {
  // Get the service version.
  rpc GetVersion (version.VersionRequest)
    returns (version.VersionResponse) {}

  // Create or update a DNS entry. :: Create or update a DNS entry.
  rpc CreateDnsEntry(CreateDnsEntryRequest)
    returns (CreateDnsEntryResponse) {}

  // Delete a DNS entry. :: Delete a DNS entry.
  rpc DeleteDnsEntry(DeleteDnsEntryRequest)
    returns (DeleteDnsEntryResponse) {}

  // Get a TLS certificate. :: Get a TLS certificate
  rpc CreateCertificate(CreateCertificateRequest)
    returns (CreateCertificateResponse) {}

  rpc PollCertificateCreation(PollCertificateCreationRequest)
    returns (PollCertificateCreationResponse) {}

  // Takes in a list subdomain patterns as a list with accountId and name of the environment
  // and returns a map of subdomain pattern and generate domain name/pattern
  //
  // For example, if workloadSubdomain of provided accountId is `workload-subdomain`,
  // name of the environment is `env-name` and the supplied array of subdomain patterns
  // is [ "host-a", "*.mlx", "subdomain.mlx" ], the method would return the result as following:
  // {
  //    "host-a": "host-a.env-name.workload-subdomain.cloudera.site",
  //    "*.mlx": "*.mlx.env-name.workload-subdomain.cloudera.site",
  //    "subdomain.mlx": "subdomain.mlx.env-name.workload-subdomain.cloudera.site"
  //  }
  rpc GenerateManagedDomainNames(GenerateManagedDomainNamesRequest)
    returns (GenerateManagedDomainNamesResponse) {}

  // Takes in byte array representing a DER/binary formatted CSR with accountId and name of the environment,
  // validates the domains in CSR and triggers a workflow to submit it to LetsEncrypt and returns a workflowId
  // using which a client can poll the workflow's progress and finally get the signed certificate
  rpc SignCertificate(CertificateSigningRequest)
    returns (CertificateSigningResponse) {}

  // Takes in a workflowId representing a workflow in system which tracks the signing of a CSR
  // If successfully complete, it returns a list of certificates in the trust chain with status as SigningStatus.SUCCESS
  // In case of error, it returns the status as SigningStatus.FAILED
  // If the workflow is not yet complete, it returns the status as SigningStatus.IN_PROGRESS
  rpc PollCertificateSigning(PollCertificateSigningRequest)
    returns (PollCertificateSigningResponse) {}

  //Revoke a TLS certificate
  rpc RevokeCertificate(RevokeCertificateRequest)
    returns (RevokeCertificateResponse) {}
}

message AWSElbDnsTarget {
  // The full dns name for this AWS elb
  string dnsName = 1;
  // The hosted zone associated with this elb
  string hostedZoneId = 2;
}

message IPs {
  repeated string IP = 1;
}

message DnsTarget {
  oneof Target {
    // Supported record types.
    // Only one type is supported per request.
    IPs targetIPs = 1;
    string targetCname = 2;
    AWSElbDnsTarget targetAWSELBDns = 3;
  }
}

// Request object for the CreateDnsEntry method.
message CreateDnsEntryRequest {
  // The account id
  string accountId = 1;
  // The environment for this cluster
  string environment = 2;
  // The endpoint for this cluster
  string endpoint = 3;
  // Also create a wildcard entry
  bool addWildcard = 4;
  // The dns target set for this domain name
  DnsTarget dnsTarget = 5;
}

// Response object for the CreateDnsEntry method.
message CreateDnsEntryResponse {
}

// Request object for the DeleteDnsEntry method.
message DeleteDnsEntryRequest {
  // The account id
  string accountId = 1;
  // The environment for this cluster
  string environment = 2;
  // The endpoint for this cluster
  string endpoint = 3;
  // Also remove wildcard entry
  bool removeWildcard = 4;
  // The dns target set for this domain name
  DnsTarget dnsTarget = 5;
}

// Response object for the DeleteDnsEntry method.
message DeleteDnsEntryResponse {
}

// Request object for the GetCertificate method.
message CreateCertificateRequest {
  // The account id
  string accountId = 1;
  // The environment for this cluster
  string environment = 2;
  // The endpoint for this cluster
  string endpoint = 3;
  // This request also contains wild card domain.
  bool addWildcard = 4;
  // The encoded csr request. We pass the csr instead of domains to allow clients
  // to hold on to the private keys.
  bytes csr = 5 [(options.FieldExtension.skipLogging) = true];
  // The crn of the cluster. You can leave this empty when testing for random endpoints.
  string clusterCrn = 6;
  // The service requesting the certificate.
  // It must be a service listed in Service enum of Crn class - https://github.infra.cloudera.com/thunderhead/thunderhead/blob/04fe5f2483d553fecf324f0ee21fb8691e5a34c2/services/libs/protocols/src/main/java/com/cloudera/thunderhead/service/common/crn/Crn.java#L123
  // For testing purpose you can put the requestingService as 'sample' or leave it empty
  string clientName = 7;

}

// Response object for the GetCertificate method.
message CreateCertificateResponse {
  // The id used for polling the results
  string requestId = 1;
}

message PollCertificateCreationRequest {
  string requestId = 1;
}

message PollCertificateCreationResponse {
  string status = 1;
  string error = 2;
  repeated string certificates = 3 [(options.FieldExtension.skipLogging) = true];
}

// Request object for the GenerateManagedDomainNames method.
message GenerateManagedDomainNamesRequest {
  // The account id
  string accountId = 1;

  // The friendly name of the environment for this cluster
  // Length of this field is capped at 8 characters and
  // we truncate provided value down to 8 or the preceding non-hyphen character
  string environmentName = 2;

  // List of hostnames/subdomain patterns for which we want the expected FQDNs
  // Other than the normal simple subdomain, it also accepts nested subdomains and patterns indicating a wildcard fragment
  // eg. [ "host-a", "*.mlx", "subdomain.mlx", "*" ]
  repeated string subdomains = 3;
}

// Response object for the GenerateManagedDomainNames method.
message GenerateManagedDomainNamesResponse {
  // Map where key is the subdomain from request and value is the generated FQDN
  // eg. { "host-a": "host-a.env-name.workload-subdomain.cloudera.site" }
  map<string, string> domains = 1;
}

// Request object for the SignCertificate method.
message CertificateSigningRequest {
  // The account id
  string accountId = 1;

  // The friendly name of the environment for this cluster
  // Length of this field is capped at 8 characters and
  // we truncate provided value down to 8 or the preceding non-hyphen character
  string environmentName = 2;

  // The encoded csr request. We pass the csr instead of domains to allow clients
  // to hold on to the private keys.
  // The list of domains would be read from CSR.
  // This byte array should be derived from binary form of the CSR, i.e. DER
  bytes csr = 3 [(options.FieldExtension.skipLogging) = true];

  // The crn of the cluster. You can leave this empty when testing for random endpoints.
  string clusterCrn = 4;

  // The service requesting the certificate.
  // It must be a service listed in Service enum of Crn class - https://github.infra.cloudera.com/thunderhead/thunderhead/blob/04fe5f2483d553fecf324f0ee21fb8691e5a34c2/services/libs/protocols/src/main/java/com/cloudera/thunderhead/service/common/crn/Crn.java#L123
  // For testing purpose you can put the requestingService as 'sample' or leave it empty
  string clientName = 5;


}

// Response object for the SignCertificate method.
message CertificateSigningResponse {
  // The id of the workflow triggered to get CSR signed
  string workflowId = 1;
}

// Request object for the PollCertificateSigning method.
message PollCertificateSigningRequest {
  // The id of the workflow triggered to get CSR signed
  // It can also be used to poll the system of workflow's status
  string workflowId = 1;
}

// Response object for the PollCertificateSigning method.
message PollCertificateSigningResponse {

  // Enumeration indicating the status of workflow
  // which can be in-progress, failed or successful
  enum SigningStatus {
    UNSET = 0;
    IN_PROGRESS = 1;
    SUCCEEDED = 2;
    FAILED = 3;
  }

  // Status of SignCertificate
  SigningStatus status = 1;

  // List of certificates in the trust chain of the signed CSR
  // The individual certificates are PEM encoded representation of signed X.509 certificates
  // The first certificate in the list is the signed version of the submitted CSR
  // Each item in the list following this certificate belongs to the authority
  // which signed the preceding certificate.
  repeated string certificates = 2 [(options.FieldExtension.skipLogging) = true];

  // User friendly message explaining why a signing request failed
  // This is not sent if the request was successful
  string causeOfFailure = 3;
}

//Request object for RevokeCertificate method
message RevokeCertificateRequest {
  //The account id of the CDP tenant
  string accountId = 1;

  //Leaf certificate in PEM encoded representation of X.509 certificate which needs to be revoked
  string certificates = 2 [(options.FieldExtension.skipLogging) = true];

  // Enumeration indicating the reason for revocation
  enum RevocationReason {
      UNSPECIFIED = 0;
      KEY_COMPROMISE = 1;
      CA_COMPROMISE = 2;
      AFFILIATION_CHANGED = 3;
      SUPERSEDED = 4;
      CESSATION_OF_OPERATION = 5;
      CERTIFICATE_HOLD = 6;
      REMOVE_FROM_CRL = 8;
      PRIVILEGE_WITHDRAWN = 9;
      AA_COMPROMISE = 10;
  }

  // As default 'UNSPECIFIED' will be set if not sent in the request
  RevocationReason reason = 3;

  // The service requesting the revoke certificate.
  // It must be a service listed in Service enum of Crn class - https://github.infra.cloudera.com/thunderhead/thunderhead/blob/04fe5f2483d553fecf324f0ee21fb8691e5a34c2/services/libs/protocols/src/main/java/com/cloudera/thunderhead/service/common/crn/Crn.java#L123
  // For testing purpose you can put the requestingService as 'sample'
  string requestingService = 4;
}

//Response object for RevokeCertificate method
message RevokeCertificateResponse {
  //Status showing if the requested revoke was successful
  string status = 1;
}
