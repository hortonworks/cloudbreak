buildscript {
  repositories {
    maven { url = "$repoUrl" }
    mavenCentral()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'org.ajoberstar:grgit:2.1.0'
    classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
    classpath 'org.ajoberstar.reckon:reckon-gradle:0.8.0'
    classpath 'com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2'
  }
}

plugins {
  id 'org.ajoberstar.grgit' version '2.1.0'
  id "com.github.spotbugs" version "1.6.10"
}

if (project.hasProperty("reckon.scope")) {
  apply plugin: "org.ajoberstar.reckon"
  reckon {
    scopeFromProp()
    stageFromProp('dev', 'rc', 'final')
  }
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
ext.config = new ConfigSlurper(env).parse(file("$rootDir/gradle/config/buildConfig.groovy").toURL())

allprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  group = 'com.sequenceiq'
  repositories {
    mavenLocal()
    maven { url = "$repoUrl" }
  }
  configurations {
    testRuntime {
      exclude group: "org.springframework.cloud"
    }
  }

}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'jacoco'


  sourceCompatibility = 11
  targetCompatibility = 11

  configurations {
    deployerJars
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'com.google.guava', module: 'guava-jdk5'
  }

  dependencies {
    deployerJars("org.springframework.build.aws:org.springframework.build.aws.maven:3.0.0.RELEASE")
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: "$System.env.NEXUS_URL") {
          authentication(userName: "$System.env.NEXUS_USER", password: "$System.env.NEXUS_PASSWORD")
        }
      }
    }
  }

  spotbugs {
    toolVersion = "3.1.11"
    excludeFilter = file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml")
    effort = "min"
  }

  jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/reports/jacoco")
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled true
      html.enabled true
    }
      afterEvaluate {
          classDirectories = files(classDirectories.files.collect {
              fileTree(
                      dir: it,
                      exclude: [
                              '**/converter/mapper/**',
                              '**/sequenceiq/it/**',
                              '**/cloudbreak/api/endpoint/**',
                              '**/cloudbreak/domain/**'
                      ]
              )
          })
      }
  }

  test {
    jacoco {
      append = false
      destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
      classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
  }

  tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
      xml.enabled false
      html.enabled true
    }

  }

  checkstyle {
    toolVersion = "8.11"
  }

  checkstyleMain {
    ignoreFailures = false
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configProperties = ['config_loc': "$rootDir/config/checkstyle"]
  }

  checkstyleTest {
    ignoreFailures = false
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
  }

  test.testLogging.showStandardStreams = project.hasProperty('showStandardStreams')

  dependencies {
    checkstyle('com.puppycrawl.tools:checkstyle:8.11')
  }

  task allDeps(type: DependencyReportTask) {}

  task status {
    doLast {
      println grgit.status()
    }
  }

  repositories {
    mavenLocal()
    maven { url = "$repoUrl" }
    mavenCentral()
    maven { url "https://cloudbreak-maven.s3.amazonaws.com/releases" }
    maven { url "https://repo.spring.io/release" }
    maven { url "https://plugins.gradle.org/m2/" }
    mavenLocal()
    maven { url "https://plugins.gradle.org/m2/" }
  }
}
