import groovy.json.JsonSlurper
import org.ajoberstar.grgit.Grgit

buildscript {
  repositories {
    mavenLocal()
    maven { url = "$repoUrl" }
    mavenCentral()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'org.ajoberstar:grgit:2.1.0'
    classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
    classpath 'org.ajoberstar.reckon:reckon-gradle:0.8.0'
    classpath 'com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2'
  }
}

plugins {
  id 'org.ajoberstar.grgit' version '2.1.0'
  id "com.github.spotbugs" version "2.0.0"
  id "com.adarshr.test-logger" version "2.0.0"
}

if (project.hasProperty("reckon.scope")) {
  apply plugin: "org.ajoberstar.reckon"
  reckon {
    scopeFromProp()
    stageFromProp('dev', 'rc', 'final')
  }
}

def cmPrivateRepoUser = System.getenv("CM_PRIVATE_REPO_USER") ?: "$defaultCmPrivateRepoUser"
def cmPrivateRepoPassword = System.getenv("CM_PRIVATE_REPO_PASSWORD") ?: "$defaultCmPrivateRepoPassword"

def springBootApps() {
  subprojects.findAll { subproject -> subproject.plugins.hasPlugin('org.springframework.boot') }
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
// spring dependeny management override, if you remove silent errors can happen
ext['junit-jupiter.version'] = "$junitJupiterVersion"

allprojects {

  repositories {
    mavenLocal()
    maven {url = "$cdpRepoUrl"}
    maven { url = "$repoUrl" }
  }
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  group = 'com.sequenceiq'

  configurations {
    testRuntime {
      exclude group: "org.springframework.cloud"
    }
  }

  // override Spring Depenendencies
  ext['commons-codec.version'] = commonsCodecVersion
  ext['hibernate-validator.version'] = hibernateValidatorVersion
  ext['jackson.version'] = jacksonVersion

  // override AWS SDK Depenendencies
  ext['netty.version'] = "4.1.42.Final"

  configurations {
      all {
          resolutionStrategy {
              force 'commons-collections:commons-collections:3.2.2'
              force 'xerces:xercesImpl:2.12.0'
              force 'commons-beanutils:commons-beanutils:1.9.4'
              force "commons-codec:commons-codec:$commonsCodecVersion"
              force "commons-codec:commons-codec:$commonsCodecVersion"
              force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion"
              force "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
              force "org.codehaus.jackson:jackson-jaxrs:1.9.13"
              force "org.codehaus.jackson:jackson-mapper-asl:1.9.13"
              force "org.codehaus.jackson:jackson-core-asl:1.9.13"
              force "org.codehaus.jackson:jackson-xc:1.9.13"
              force "org.testng:testng:$testNgVersion"
          }
      }
  }

}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'jacoco'
  apply plugin: 'com.adarshr.test-logger'


  sourceCompatibility = 11
  targetCompatibility = 11

  configurations {
    deployerJars
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'com.google.guava', module: 'guava-jdk5'
  }

  dependencies {
    checkstyle('com.puppycrawl.tools:checkstyle:8.11')
    deployerJars("org.springframework.build.aws:org.springframework.build.aws.maven:3.0.0.RELEASE")
    testImplementation group: 'org.mockito',               name: 'mockito-junit-jupiter',          version: mockitoVersion
    testImplementation group: 'org.junit.jupiter',         name: 'junit-jupiter',                  version: junitJupiterVersion
    testImplementation group: 'org.junit.jupiter',         name: 'junit-jupiter-engine',           version: junitJupiterVersion
    testImplementation group: 'org.junit.jupiter',         name: 'junit-jupiter-params',           version: junitJupiterVersion
    //adds vintage engine automatically and ensures that Junit4 testcases are run by default for all projects
    testRuntimeOnly    group: 'org.junit.vintage',         name: 'junit-vintage-engine',           version: junitJupiterVersion
  }

  spotbugs {
    toolVersion = "3.1.11"
    excludeFilter = file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml")
    effort = "min"
  }

  jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/reports/jacoco")
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled true
      html.enabled true
    }
      afterEvaluate {
          classDirectories.from = files(classDirectories.files.collect {
              fileTree(
                      dir: it,
                      exclude: [
                              '**/converter/mapper/**',
                              '**/sequenceiq/it/**',
                              '**/cloudbreak/api/endpoint/**',
                              '**/cloudbreak/domain/**'
                      ]
              )
          })
      }
  }

  test {
    useJUnitPlatform ()
    testlogger{
      showSummary true
      showStandardStreams true
    }
    jacoco {
      destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
      classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
  }

  tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
      xml.enabled false
      html.enabled true
    }

  }

  checkstyle {
    toolVersion = "8.11"
  }

  checkstyleMain {
    ignoreFailures = false
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configProperties = ['config_loc': "$rootDir/config/checkstyle"]
  }

  checkstyleTest {
    ignoreFailures = false
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
  }

  test.testLogging.showStandardStreams = project.hasProperty('showStandardStreams')

  task allDeps(type: DependencyReportTask) {}

  task status {
    doLast {
      println grgit.status()
    }
  }

  repositories {
    mavenLocal()
    maven { url = "$repoUrl" }
    mavenCentral()
    maven { url "https://cloudbreak-maven.s3.amazonaws.com/releases" }
    maven { url "https://repo.spring.io/release" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven {
      authentication {
        basic(BasicAuthentication)
      }
      credentials(PasswordCredentials) {
        username "$cmPrivateRepoUser"
        password "$cmPrivateRepoPassword"
      }
      url "https://repository.cloudera.com/cloudera/list/cm-private/"
    }
  }

  eclipse {
    classpath {
      file.whenMerged {
        cp -> if (project.hasProperty('protobuf')) {
          cp.entries = cp.entries.findAll { element -> !element.getPath().startsWith('src/generated')}
          cp.entries.addAll(
            [
              new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generated/main/java', null),
              new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generated/main/grpc', null)
            ]
          )
        }
      }
    }
  }

  task ('buildInfo', type: BuildInfoTask, dependsOn: processResources)

  afterEvaluate { Project project ->
    if (project.name in ['core', 'autoscale', 'freeipa', 'redbeams', 'environment', 'datalake', 'integration-test'] && project.plugins.hasPlugin('org.springframework.boot') ) {
      buildInfo.configure {
        destination = file("$project.buildDir")
        basename = project.bootJar.baseName
        buildVersion = project.version
      }
    }
  }

  compileJava {
    dependsOn buildInfo
  }
}

class BuildInfoTask extends DefaultTask {
  File destination
  String basename
  String buildVersion

  @TaskAction
  def writeBuildInfo() {
    if (basename != null && !basename.empty) {
      println "buildVersion: " + buildVersion
      println "basename: " + basename
      println "build destination: " + destination
      List<File> applicationDestinations = []

      applicationDestinations += project.file("out/production/resources")
      applicationDestinations += new File(destination.toString() + "/resources/main")

      destination.mkdirs()

      // if using dev environment this condition is true
      if (buildVersion.contains("+") || buildVersion == "unspecified") {
        def grgit = Grgit.open(currentDir: project.projectDir)
        buildVersion = grgit.describe()
        println "buildVersion from git: " + buildVersion
      }
      String activeProfile = determineActiveProfile()
      println "selected profile based on version: " + activeProfile
      new File(destination, "build.info").withWriter { out ->
        [
                "ARTIFACT_BASENAME=" + basename,
                "ARTIFACT_VERSION=" + buildVersion,
        ].each { out.println it }
      }
      applicationDestinations.each {
        it.mkdirs()
        new File(it, "application.properties").withWriter { out ->
          [
                  "info.app.name=" + basename,
                  "info.app.version=" + buildVersion,
                  "spring.profiles.active=" + activeProfile
          ].each { out.println it }
        }
      }
      def propertiesFile = destination.toString() + "/resources/main/application.properties"
      String fileContents = new File(propertiesFile).text
      println "Content of $propertiesFile:\n" + fileContents
    } else {
      println "no build info is needed for this module"
    }
  }

  private String determineActiveProfile() {
    String activeProfile = "dev"
    if (buildVersion.contains("dev") || buildVersion.equals("unspecified")) {
      activeProfile = "dev"
    } else if (buildVersion.contains("rc")) {
      activeProfile = "rc"
    } else if (buildVersion.contains("-b")) {
      activeProfile = determineProfileBasedOnGbnVersion()
    } else {
      activeProfile = "prod"
    }
    return activeProfile
  }

  private String determineProfileBasedOnGbnVersion() {
    String activeProfile = "dev"
    try {
      def masterReleaseVersionResp = new URL('http://release.infra.cloudera.com/hwre-api/getreleaseversion?stack=CB&releaseline=master')
              .getText('utf-8', connectTimeout: 5000, readTimeout:5000)
      def json = new JsonSlurper().parseText(masterReleaseVersionResp)
      println "determine GBN version on master branch:" + json.version
      String latestVersionOnMaster = json.version
      if (buildVersion.startsWith(latestVersionOnMaster)) {
        activeProfile = "dev"
      } else {
        activeProfile = "rc"
      }
    } catch(Exception ex) {
      println "Could not query version of master branch from http://release.infra.cloudera.com, falling back to 'dev' profile!"
    }
    return activeProfile
  }
}
