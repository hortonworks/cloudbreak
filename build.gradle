buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE")
    }
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'sonar-runner'

sourceCompatibility = 1.7
group = 'com.sequenceiq'

allprojects {
    apply from: "$rootDir/gradle/versioning.gradle"
    ext.config = new ConfigSlurper(env).parse(file("$rootDir/gradle/config/buildConfig.groovy").toURL())
}

jar {
    baseName = 'cloudbreak'
}

configurations {
    deployerJars
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "s3://maven.sequenceiq.com/releases") {
                authentication(userName: "$System.env.AWS_ACCESS_KEY", passphrase: "$System.env.AWS_SECRET_ACCESS_KEY")
            }
            snapshotRepository(url: "s3://maven.sequenceiq.com/snapshots") {
                authentication(userName: "$System.env.AWS_ACCESS_KEY", passphrase: "$System.env.AWS_SECRET_ACCESS_KEY")
            }
        }
    }
}

checkstyleMain {
    ignoreFailures = false
    configProperties = ['config_loc': "$projectDir/config/checkstyle"]
}

checkstyleTest {
    ignoreFailures = false
    configProperties = ['config_loc': "$projectDir/config/checkstyle"]
}

jacoco {
    toolVersion = "0.6.2.201302030002"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

sonarRunner {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
    sonarProperties {
        property "sonar.host.url", "$config.sonar_host_url"
        property "sonar.jdbc.url", "$config.sonar_jdbc_url"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "$System.env.SONAR_USERNAME"
        property "sonar.jdbc.password", "$System.env.SONAR_PASSWORD"
        property "project.reporting.outputEncoding", "UTF-8"
        property "sonar.projectKey", "cloudbreak"
        property "sonar.projectName", "cloudbreak"
    }
}

repositories {
    mavenCentral()
    maven { url "http://maven.sequenceiq.com/snapshots" }
    maven { url "http://maven.sequenceiq.com/release" }
    maven { url "http://maven.sequenceiq.com/releases" }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web:1.0.2.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-actuator:1.0.2.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.0.2.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-websocket:1.0.2.RELEASE'
    compile 'org.springframework.security:spring-security-config:3.2.3.RELEASE'
    compile 'org.springframework.security:spring-security-web:3.2.3.RELEASE'
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.0.3.RELEASE'
    compile 'org.springframework:spring-messaging:4.0.3.RELEASE'
    compile 'org.projectreactor:reactor-spring:1.0.1.RELEASE'
    compile 'net.sf.ehcache:ehcache:2.8.3'
    compile 'org.postgresql:postgresql:9.3-1101-jdbc41'
    compile('com.amazonaws:aws-java-sdk:1.9.3') {
        exclude group: 'commons-logging'
    }
    compile 'org.hibernate:hibernate-validator:5.1.1.Final'
    compile('com.sequenceiq:azure-rest-client:0.1.18') {
        exclude group: 'log4j';
    }
    compile('com.sequenceiq:ambari-client16:1.6.18') {
        exclude group: 'org.slf4j';
    }
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'com.ecwid:consul:1.0'
    compile 'org.codehaus.jettison:jettison:1.3.5'
    compile 'org.codehaus.groovy:groovy-all:1.8.6'
    compile 'commons-io:commons-io:2.4'
    compile 'com.google.guava:guava:16.0.1'
    compile 'com.thoughtworks.xstream:xstream:1.4.7'
    compile 'com.github.fommil:openssh:1.0'
    compile("org.codehaus.groovy.modules.http-builder:http-builder:0.7.1") {
        exclude group: "commons-logging";
        exclude group: "xml-apis";
        exclude group: "groovy"
    }
    compile group: 'javax.mail', name: 'mail', version: '1.5.0-b01'
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.20'
    runtime group: 'activation', name: 'activation', version: '1.0.2'
    compile group: 'com.google.http-client', name: 'google-http-client-jackson2', version: '1.17.0-rc'
    compile group: 'com.google.oauth-client', name: 'google-oauth-client-jetty', version: '1.17.0-rc'
    compile group: 'com.google.apis', name: 'google-api-services-compute', version: 'v1-rev1-1.17.0-rc'
    compile group: 'com.google.apis', name: 'google-api-services-storage', version: 'v1-rev6-1.19.0'
    compile group: 'com.google.apis', name: 'google-api-services-dns', version: 'v1beta1-rev9-1.19.0'

    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.47'
    compile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.47'

    testCompile 'org.springframework.boot:spring-boot-starter-test:1.0.2.RELEASE'
    deployerJars 'org.springframework.build.aws:org.springframework.build.aws.maven:3.0.0.RELEASE'
}

task wrapper(type: Wrapper) { gradleVersion = "1.12" }

task buildInfo(type: BuildInfoTask) {
    systemProperties = System.properties
    destination = file("$buildDir")
    applicationPropertiesPath = "$buildDir"
    basename = jar.baseName
    buildVersion = version
}

compileJava.dependsOn buildInfo

class BuildInfoTask extends DefaultTask {
    File destination = new File("build.info")
    String applicationPropertiesPath
    String basename
    String buildVersion

    @TaskAction
    def writeBuildInfo() {
        destination.mkdirs()
        File applicationDestination = new File(applicationPropertiesPath + "/resources/main")
        applicationDestination.mkdirs()
        new File(destination, "build.info").withWriter { out ->
            [
                    "ARTIFACT_BASENAME=" + basename,
                    "ARTIFACT_VERSION=" + buildVersion,
            ].each { out.println it }
        }
        new File(applicationDestination, "application.properties").withWriter { out ->
            [
                    "info.app.name=" + basename,
                    "info.app.version=" + buildVersion,
                    "management.contextPath=" + "\${CB_MANAGEMENT_CONTEXT_PATH}"
            ].each { out.println it }
        }
    }
}
