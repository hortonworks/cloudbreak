#!/bin/bash
# Name: freeipa_backup
# Description: Backup FreeIPA and Upload backup to provided Cloud Location
################################################################
set -x

CONFIG_FILE=/etc/freeipa_backup.conf

LOCKFILE="/var/lock/$(basename "$0")"
LOCKFD=99
PRINT_DEBUG_MSGS=1

# PRIVATE
_lock()             { flock -"$1" ${LOCKFD}; }
_no_more_locking()  { _lock u; _lock xn && rm -f "${LOCKFILE}"; }
_prepare_locking()  { eval "exec ${LOCKFD}>\"${LOCKFILE}\""; trap _no_more_locking EXIT; }

# PUBLIC
exlock_now()        { _lock xn; }  # obtain an exclusive lock immediately or fail
exlock()            { _lock x; }   # obtain an exclusive lock
shlock()            { _lock s; }   # obtain a shared lock
unlock()            { _lock u; }   # drop a lock


# Config Defaults
typeset -A config # init array
config=( # set default values in config array
    [backup_location]=""
    [backup_platform]="LOCAL"
    [azure_instance_msi]=""
    [gcp_service_account]=""
    [logfile]="/var/log/ipabackup.log"
    [statusfileprefix]="/var/log/ipabackup_status_"
    [backup_path]="/var/lib/ipa/backup"
    [http_proxy]=""
    [aws_region]=""
    [aws_endpoint]=""
)

function get_hostname_from_url()
{
  proto=$(echo "$1" | grep :// | sed -e's,^\(.*://\).*,\1,g')
  # remove the protocol
  url="${1/$proto/}"
  # extract the user (if any)
  userpass="$(echo "${url}" | grep @ | cut -d@ -f1)"
  pass="$(echo "${userpass}" | grep : | cut -d: -f2)"
  if [[ -n "${pass}" ]]; then
    user="$(echo "${userpass}" | grep : | cut -d: -f1)"
  else
      user="${userpass}"
  fi
  # extract the host
  host="$(echo "${url/${user}:${pass}@/}" | cut -d/ -f1)"
  echo "${host}"
}

set +x
# Override defaults with config file
if [[ -f $CONFIG_FILE ]]; then
    while read -r line
    do
        if echo "${line}" | grep -F = &>/dev/null
        then
            varname=$(echo "${line}" | cut -d '=' -f 1)
            config[${varname}]=$(echo "${line}" | cut -d '=' -f 2-)
        fi
    done < $CONFIG_FILE
fi
set -x

while getopts "t:f:pl" OPTION; do
    case $OPTION in
    p  )
        PERMISSIONS_CHECK="permissions check "
        ;;
    l  )
        FORCE_LOG="true"
        ;;
    t  )
        TYPE=$OPTARG
        [[ ! $TYPE =~ FULL|DATA ]] && {
            echo "Incorrect options provided"
            exit 1
        }
        ;;
    f  )
        FOLDER=$OPTARG;;
    \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
    :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
    *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done

if ((OPTIND == 1))
then
    echo "No options specified"
    exit 1
fi

if [[ -z "$PERMISSIONS_CHECK" && ( -z "$TYPE" || -z "$FOLDER" ) ]];
then
    echo "A type (-t) and a folder (-f) must be defined" >&2
    exit 1
fi

LOGFILE="${config[logfile]}"
STATUSFILEPREFIX="${config[statusfileprefix]}"
BACKUP_PATH_POSTFIX="${FOLDER}"

BACKUP_OPTIONS=""
if [[ "$TYPE" = "FULL" ]]; then
    BACKUP_OPTIONS="-q"
elif [[ "$TYPE" = "DATA" ]]; then
    BACKUP_OPTIONS="-q --data --online"
fi

doLog(){
    type_of_msg=$(echo "$*"|cut -d" " -f1)
    msg=$(echo "$*"|cut -d" " -f2-)
    [[ $type_of_msg == DEBUG ]] && [[ ${PRINT_DEBUG_MSGS} -ne 1 ]] && return
    [[ $type_of_msg == INFO ]] && type_of_msg="INFO " # one space for aligning
    [[ $type_of_msg == WARN ]] && type_of_msg="WARN " # as well

    # print to the terminal if we have one
    test -t 1 -o -n "$FORCE_LOG" && echo "$(date "+%Y-%m-%dT%H:%M:%SZ") $type_of_msg $msg"
    echo "$(date "+%Y-%m-%dT%H:%M:%SZ") $type_of_msg $msg" >> "${LOGFILE}"
}

doStatus(){
    if [[ -n "$BACKUP_SCHEDULE" ]]
    then
        type_of_msg=$(echo "$*"|cut -d" " -f1)
        orig_type_of_msg=${type_of_msg}
        msg=$(echo "$*"|cut -d" " -f2-)
        if [[ $type_of_msg == INFO ]]; then
            type_of_msg="INFO " # one space for aligning
            backup_dst_json="\"backup_path\":\"${BACKUP_LOCATION}/${BACKUPDIR}\","
            status="success"
        else
            status="failure"
        fi

        echo "$(date "+%Y-%m-%dT%H:%M:%SZ") $type_of_msg $msg" > "${STATUSFILEPREFIX}${BACKUP_SCHEDULE}".log
        echo "{\"time\":\"$(date "+%Y-%m-%dT%H:%M:%SZ")\",\"level\":\"${orig_type_of_msg}\",\"status\":\"${status}\",${backup_dst_json}\"message\":\"${msg}\"}" > "${STATUSFILEPREFIX}${BACKUP_SCHEDULE}".json
    fi
}

error_exit()
{
    doLog "ERROR $1"
    if [[ -z "$PERMISSIONS_CHECK" ]]; then
        doStatus "ERROR $1"
    fi
    exit 1
}

remove_local_backups() {
    doLog "INFO Removing local backup copies"
    find "${config[backup_path]}"/ -name "ipa-*" -type d  -print0 | xargs -0 /usr/bin/rm -vrf >> "$LOGFILE" 2>&1 || error_exit "Unable to remove local backup copies"
}

upload_aws_backup() {
    echo "try to upload with AES256 encryption"
    # shellcheck disable=SC2086
    /usr/bin/aws ${REGION_OPTION} s3 cp --debug --recursive --sse AES256 --no-progress "${config[backup_path]}/${BACKUPDIR}" "${BACKUP_LOCATION}/${BACKUPDIR}" 2>&1 | /usr/local/bin/backup-log-filter.sh | tee -a "${LOGFILE}"
    ret_code=${PIPESTATUS[0]}

    if [[ "$ret_code" -ne "0" ]]
    then
        echo "try to upload with aws:kms encryption"
        # shellcheck disable=SC2086
        /usr/bin/aws ${REGION_OPTION} s3 cp --debug --recursive --sse aws:kms --no-progress "${config[backup_path]}/${BACKUPDIR}" "${BACKUP_LOCATION}/${BACKUPDIR}" 2>&1 | /usr/local/bin/backup-log-filter.sh | tee -a "${LOGFILE}"
        ret_code=${PIPESTATUS[0]}
    fi

    if [[ "$ret_code" -ne "0" ]]
    then
        error_exit "Sync of backups to ${BACKUP_LOCATION} failed!"
    else
        echo "Uploaded successfully"
    fi
}

if [[ -n "$PERMISSIONS_CHECK" ]]; then
    doLog "INFO Running backup upload permissions check."
    BACKUP_TEST_DIR="ipa-backup-test-$(date "+%Y-%m-%dT%H-%M-%S")"
    mkdir -p "${config[backup_path]}/${BACKUP_TEST_DIR}"
    echo "Backup upload test" > "${config[backup_path]}/${BACKUP_TEST_DIR}/upload-test.txt"
    BACKUP_LOCATION="${config[backup_location]}/$(hostname -f)/.upload-test"
else
    # ON START
    _prepare_locking

    doLog "INFO Running ${TYPE} IPA backup."
    exlock_now || error_exit "A backup seems to be currently running. Lock file is at ${LOCKFILE}"

    # This settings is not needed because cloud service endpoints are used but http_proxy parameter has been taken for later usage
    #set +x
    #if [[ -n "${config[http_proxy]}" ]]; then
    #    doLog "INFO Configure HTTP proxy"
    #    export HTTPS_PROXY="${config[http_proxy]}"
    #fi
    #set -x

    # Perform a backup

    # shellcheck disable=SC2086
    /sbin/ipa-backup ${BACKUP_OPTIONS} >> "${LOGFILE}" 2>&1 || error_exit "ipa-backup failed! Aborting!"

    BACKUP_LOCATION="${config[backup_location]}/${BACKUP_PATH_POSTFIX}"
fi

# shellcheck disable=SC2012
BACKUPDIR=$(basename "$(ls -td "${config[backup_path]}"/ipa-* | head -1)")

doLog "DEBUG Uploading backup to ${BACKUP_LOCATION} on ${config[backup_platform]}"

if [[ "${config[backup_platform]}" = "AWS" ]]; then
    doLog "INFO Syncing backups to AWS S3"

    REGION_OPTION=""
    if [[ -n "${config[aws_region]}" ]]; then
      if [[ -n "${config[aws_endpoint]}" ]]; then
        doLog "INFO Using --endpoint-url for upload to S3"
        REGION_OPTION="--endpoint-url ${config[aws_endpoint]} --region ${config[aws_region]}"
      else
        doLog "INFO Using only --region for upload to S3"
        REGION_OPTION="--region ${config[aws_region]}"
      fi
    fi
    upload_aws_backup
    remove_local_backups
elif [[ "${config[backup_platform]}" = "AZURE" ]]; then
    doLog "INFO Syncing backups to Azure Blog Storage"
    doLog "INFO Checking for valid backup location"
    backup_host=$(get_hostname_from_url "${BACKUP_LOCATION}")
    host "${backup_host}" > /dev/null || error_exit "Unable to resolve host for backup location ${BACKUP_LOCATION}"
    /bin/keyctl new_session 2>&1 | tee -a "${LOGFILE}"
    if [[ "${PIPESTATUS[0]}" -ne "0" ]]; then
        SESSION_PERMS=$(/bin/keyctl rdescribe @s)
        SESSION_OWNER=$(echo "${SESSION_PERMS}" | cut -f2 -d";")
        if [[ "${SESSION_OWNER}" != "${UID}" ]]; then
            error_exit "Unable to setup keyring session. The keyring session permissions are ${SESSION_PERMS} but the UID is ${UID}. Was this command run with \"sudo\" or \"sudo su\"? If so, then try \"sudo su -\"."
        else
            error_exit "Unable to setup keyring session"
        fi
    fi
    /usr/local/bin/azcopy login --identity --identity-resource-id "${config[azure_instance_msi]}" 2>&1 | tee -a "${LOGFILE}"
    if [[ "${PIPESTATUS[0]}" -ne "0" ]]; then
        error_exit "Unable to login to Azure!"
    fi
    /usr/local/bin/azcopy copy "${config[backup_path]}/${BACKUPDIR}" "${BACKUP_LOCATION}" --recursive=true --check-length=false 2>&1 | tee -a "${LOGFILE}"
    if [[ "${PIPESTATUS[0]}" -ne "0" ]]; then
        error_exit "Sync of backups to ${BACKUP_LOCATION} failed!"
    fi
    remove_local_backups
elif [[ "${config[backup_platform]}" = "GCP" ]]; then
    BACKUP_PATH="/${BACKUP_LOCATION#*://*/}"
    BACKUP_BUCKET=$(echo "${BACKUP_LOCATION}" | cut -f-3 -d '/')
    if [[ "${BACKUP_PATH}" = / ]]; then
      BACKUP_PATH="/cluster-backups/freeipa"
    elif [[ "${BACKUP_PATH}" != /* ]]; then
      BACKUP_PATH="/${BACKUP_PATH}"
    fi
    BACKUP_ROOT_FOLDER="/"$(echo "${BACKUP_PATH}" | cut -f 2 -d '/')
    if [ -d "${BACKUP_ROOT_FOLDER}" ]; then
      # The backup root folder already exists in this operating system, logger service account needs storage.objects.list permission also
      doLog "INFO Syncing backups to Google Cloud Storage"
      /bin/gsutil cp -r "${config[backup_path]}/${BACKUPDIR}" "${BACKUP_LOCATION}" >> "${LOGFILE}" 2>&1 || error_exit "Sync of backups to ${BACKUP_LOCATION} failed!"
      remove_local_backups
    else
      # To avoid storage.objects.list permission for logger we must sync backups to the bucket instead of the object
      mkdir -p "${BACKUP_PATH}"
      doLog "INFO Copy backup to ${BACKUP_PATH} before moving it to cloud storage"
      cp -r "${config[backup_path]}/${BACKUPDIR}" "${BACKUP_PATH}"
      doLog "INFO Syncing backups to Google Cloud Storage"
      /bin/gsutil -m mv "${BACKUP_ROOT_FOLDER}" "${BACKUP_BUCKET}" >> "${LOGFILE}" 2>&1 || error_exit "Sync of backups to ${BACKUP_LOCATION} failed!"
      rm -rf "${BACKUP_ROOT_FOLDER}"
      remove_local_backups
    fi
fi

doLog "INFO Backup ${PERMISSIONS_CHECK}completed."
if [[ -z "$PERMISSIONS_CHECK" ]]; then
    doStatus "INFO Backup succeeded."
fi