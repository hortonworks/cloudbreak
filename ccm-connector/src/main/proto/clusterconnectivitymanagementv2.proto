syntax = "proto3";

package clusterconnectivitymanagementv2;

option java_package = "com.cloudera.thunderhead.service.clusterconnectivitymanagementv2";
option java_outer_classname = "ClusterConnectivityManagementV2Proto";
option go_package = "com/cloudera/cdp/protobuf";

import "version.proto";
import "options.proto";
import "paging.proto";

// ClusterConnectivityManagementV2 service for provisioning and managing inverting-proxy.
service ClusterConnectivityManagementV2 {
  // Get the service version.
  rpc GetVersion (version.VersionRequest)
      returns (version.VersionResponse) {}

  // CreateOrGetInvertingProxy will create new deployment If it is not already present.
  // It also polls for the status and updates the status accordingly.
  rpc CreateOrGetInvertingProxy(CreateOrGetInvertingProxyRequest)
      returns (CreateOrGetInvertingProxyResponse) {}

  // RemoveInvertingProxy will remove inverting-proxy deployment.
  // Mainly used for reaper process.
  rpc RemoveInvertingProxy(RemoveInvertingProxyRequest)
      returns (RemoveInvertingProxyResponse) {}

  // RegisterAgent for generating and registering agent key-cert pair.
  rpc RegisterAgent(RegisterAgentRequest)
      returns (RegisterAgentResponse) {}

  // UnregisterAgent for removing agent key-cert pair while environment deletion.
  rpc UnregisterAgent(UnregisterAgentRequest)
      returns (UnregisterAgentResponse) {}

  // Lists all registered agents matching a supplied query
  rpc ListAgents(ListAgentsRequest)
      returns (ListAgentsResponse) {}

  // GetAllAgentsCertificates for getting certificates of all the agents for an account.
  rpc GetAllAgentsCertificates(GetAllAgentsCertificatesRequest)
      returns (GetAllAgentsCertificatesResponse) {}

  // RotateAgentAccessKey for rotating workload machine user key pair
  rpc RotateAgentAccessKey(RotateAgentAccessKeyRequest)
      returns (RotateAgentAccessKeyResponse) {}

}

message CreateOrGetInvertingProxyRequest {
  // AccountID for which inverting-proxy should be provisioned.
  string accountId = 1;
}

message CreateOrGetInvertingProxyResponse {
  // Inverting-proxy with required fields.
  InvertingProxy invertingProxy = 1;
}

message RemoveInvertingProxyRequest {
  // AccountID for which inverting-proxy should be deleted.
  string accountId = 1;
}

message RemoveInvertingProxyResponse {}

message RegisterAgentRequest {
  // AccountID for which agent cert-key pair should be registered.
  string accountId = 1;
  // Domain name of the workload cluster needs to be provided by provisioner services(e.g. CB)
  // Certificate will be created for this domain name.
  string domainName = 2;
  // Key ID to identify the cluster uniquely.
  // This will be used to encipher private key.
  string keyId = 3;
  // CRN of the environment this agent is going to be deployed in. Passing the environmentCrn as
  // part of registration implies that the provisioning service consents to the use this agent to
  // target backend services outside the host it is deployed on.
  // As part of future work, we intend to bring a dedicated pool of agents which would be shared
  // across the environment. Fos suce agents, we expect that environmentCrn would always be
  // supplied during registration.
  string environmentCrn = 4;
  // Specify if aes-128 should be used for encryption or aes-256 with hmac calculation.
  // This is done as part of supporting aes-128 encryption while also introducing aes-256 way of encryption
  // along with calculating the MAC of the encrypted private key.
  oneof filter_oneof {
    AES128Parameters aes128Parameters = 5;
    AES256Parameters aes256Parameters = 6;
  }
}

message AES128Parameters {}

message AES256Parameters {
  string hmacKey = 1;
}

message RegisterAgentResponse {
  // Inverting proxy agent with required fields.
  InvertingProxyAgent invertingProxyAgent = 1;
}

message UnregisterAgentRequest {
  // Unique identifier for each agent
  string agentCrn = 1;
}

message GetAllAgentsCertificatesRequest {
  // Account ID for which the certificates need to retrieved.
  string accountId = 1;
}

message GetAllAgentsCertificatesResponse {
  // Certificates of all the agents.
  repeated string certificates = 1 [(options.FieldExtension.skipLogging) = true];
}

message UnregisterAgentResponse {}

message InvertingProxy {
  enum Status {
    // Inverting Proxy enters this state as the first step of the creating
    // deployment. This is a transitory state.
    CREATING = 0;
    // Inverting Proxy enters this state when it is ready to accept requests
    READY = 1;
    // Inverting Proxy enters this state after a failure of create or
    // terminate.
    FAILED = 2;
  }
  // InvertingProxyTransitions captures the transition logic described here.
  // This returns the status of the inverting proxy deployment
  Status status = 1;
  // This is the host name where an agent can reach the inverting proxy running control plane.
  string hostname = 2;
  // User friendly message explaining why inverting proxy is in failed status
  // This is not sent if the inverting proxy is created and is ready to accept requests
  string causeOfFailure = 3;
  // Certificate of inverting-proxy that needs to be passed to agent.
  // We intend to depracate this field in favor of 'caCertificate'.
  string certificate = 4 [(options.FieldExtension.skipLogging) = true, (options.FieldExtension.deprecated) = true];
  // CA Certificate used to sign certificate of inverting-proxy server. It needs to be passed to agent.
  string caCertificate = 5 [(options.FieldExtension.skipLogging) = true];
}

message InvertingProxyAgent {
  // Unique identifier for each agent
  string agentCrn = 1;
  // Enciphered Generated key for the agent
  string encipheredPrivateKey = 2 [(options.FieldExtension.skipLogging) = true];
  // Generated cert for the agent
  // We intend to deprecate this field in favor of 'certificates'.
  // This is required to support CA signed certificates for agents.
  string certificate = 3 [(options.FieldExtension.skipLogging) = true, (options.FieldExtension.deprecated) = true];
  // CRN of the environment this agent is going to be deployed in. Having the environmentCrn set here
  // implies that the provisioning service has consented to the use of this agent to target backend services
  // outside the host it is deployed on.
  string environmentCrn = 4;
  // Generated certificate and the trust chain for agent
  repeated string certificates = 5 [(options.FieldExtension.skipLogging) = true];
  // The access key ID for the machine user
  string accessKeyId = 6;
  // The access key is the private key for the machine user. This is an Ed25519 private key and is
  // 32 bytes encoded in base64 that should be used to sign requests.
  string encipheredAccessKey = 7 [(options.FieldExtension.sensitive) = true];
  // The initialisationVector used to encrypt the access key.
  // Only available for AES256 algorithm.
  string initialisationVector = 8 [(options.FieldExtension.sensitive) = true];
  // The mac calculated for the encrypted access key.
  // Only available for AES256 algorithm.
  string hmacForPrivateKey = 9 [(options.FieldExtension.sensitive) = true];
}

message ListAgentsRequest {
  int32 pageSize = 1;
  paging.PageToken pageToken = 2;

  // Optional filter to narrow results. If not supplied, all agents would be returned.
  oneof filter_oneof {
    // If an accountId is passed-in, all agents belonging to this accountId would be returned.
    string accountId = 3;
    // If an environmentCrn is passed-in, all agents belonging to this environmnent would be returned.
    string environmentCrn = 4;
  }
}

message ListAgentsResponse {
  paging.PageToken nextPageToken = 1;

  // List of all agents (matching the optional filter if supplied)
  repeated InvertingProxyAgent agents = 2;
}

message RotateAgentAccessKeyRequest {
  // The agentCrn
  string agentCrn = 1;
}

message RotateAgentAccessKeyResponse {
  InvertingProxyAgent invertingProxyAgent = 1;
}
