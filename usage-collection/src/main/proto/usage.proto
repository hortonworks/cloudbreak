syntax = "proto3";

package usage;

option java_package = "com.cloudera.thunderhead.service.common.usage";
option java_outer_classname = "UsageProto";
option go_package = "com/cloudera/cdp/protobuf";

// This proto defines the Altus usage event schema. Find the usage system design
// at docs/usage_reporting.md. This proto file is meant to be the documentation
// for the usage event schema, so it should be kept well commented. Note that
// this usage schema is a compatibility surface since we do not want consumers
// of usage data to have their queries or reports break when we make changes.

// A usage event.
message Event {
  // Deprecated event types
  reserved 8, 9, 10, 11, 12, 13, 14, 15, 20, 21;
  // The event's ID.
  string id = 1;
  // The event timestamp in ms from the Java epoch of 1970-01-01T00:00:00Z.
  uint64 timestamp = 2;
  // The version of the usage system that generated the event.
  //
  // This should be bumped when it would make parsing of usage events easier,
  // e.g. when we've changed the semantics around what is and is not optional
  // or have made some semantic change for some event. It need not be bumped
  // for all changes to the usage model. If an event has semantics that have
  // changed over time, it should be noted in the comments for the specific
  // event message below.
  //
  // The current version and history is maintained in UsageReporter.java.
  uint32 version = 3;
  // The event-specific details.
  oneof details {
    // An Altus account was created.
    AltusIamAccountCreated altusIamAccountCreated = 4;
    // An Altus user was created.
    AltusIamUserCreated altusIamUserCreated = 5;
    // An Altus user record was updated.
    AltusIamUserUpdated altusIamUserUpdated = 6;
    // An Altus user was deleted.
    AltusIamUserDeleted altusIamUserDeleted = 29;
    // An Altus user interactively logged in.
    AltusIamUserInteractiveLogin altusIamUserInteractiveLogin = 7;
    // An Altus user interactively login failure.
    AltusIamUserInteractiveLoginFailure altusIamUserInteractiveLoginFailure = 26;
    // An Altus machine user was created.
    AltusIamMachineUserCreated altusIamMachineUserCreated = 16;
    // An Altus machine user was deleted.
    AltusIamMachineUserDeleted altusIamMachineUserDeleted = 17;
    // An Altus access key was created.
    AltusIamAccessKeyCreated altusIamAccessKeyCreated = 18;
    // An Altus access key was deleted.
    AltusIamAccessKeyDeleted altusIamAccessKeyDeleted = 19;
    // An Altus access token was created.
    AltusIamAccessTokenCreated altusIamAccessTokenCreated = 38;
    // An Altus access token was deleted.
    AltusIamAccessTokenDeleted altusIamAccessTokenDeleted = 39;
    // A CDP Datalake cluster was requested to create.
    CDPDatalakeClusterRequested cdpDatalakeClusterRequested = 22;
    // A CDP Datalake cluster's status changed.
    CDPDatalakeClusterStatusChanged cdpDatalakeClusterStatusChanged = 23;
    // A CDP Datahub cluster was requested to create.
    CDPDatahubClusterRequested cdpDatahubClusterRequested = 24;
    // A CDP Datahub cluster's status changed.
    CDPDatahubClusterStatusChanged cdpDatahubClusterStatusChanged = 25;
    // A CDP CML workspace was requested to create.
    CDPCMLWorkspaceRequested cdpCMLWorkspaceRequested = 27;
    // A CDP CML workspace's status changed.
    CDPCMLWorkspaceStatusChanged cdpCMLWorkspaceStatusChanged = 28;
    // A CDP Environment was requested to create
    CDPEnvironmentRequested cdpEnvironmentRequested = 30;
    // A CDP Environment was requested to create
    CDPEnvironmentStatusChanged cdpEnvironmentStatusChanged = 31;
    // A CDP Datalake was requested to create
    CDPDatalakeRequested cdpDatalakeRequested = 32;
    // A CDP Datalake was requested to create
    CDPDatalakeStatusChanged cdpDatalakeStatusChanged = 33;
    // A CDP DataHub was requested to create
    CDPDatahubRequested cdpDatahubRequested = 34;
    // A CDP DataHub was requested to create
    CDPDatahubStatusChanged cdpDatahubStatusChanged = 35;
    // Sync event for a CDP Datalake cluster
    CDPDatalakeSync cdpDatalakeSync = 36;
    // Sync event for a CDP Datahub cluster
    CDPDatahubSync cdpDatahubSync = 37;
  }
}

// The type of an Altus account.
message AltusIamAccountType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // A regular Altus account.
    REGULAR = 1;
    // A trial Altus account.
    TRIAL = 2;
  }
}

// Generated when a new Altus account has been created.
message AltusIamAccountCreated {
  // The Altus account ID of the new account. This uniquely identifies the
  // account within Altus. This ID is immutable.
  string accountId = 1;
  // The identity provider ID for this account. The identity provider for an
  // account provides user identity information for the account. Note that the
  // same SFDC account can have multiple identity provider associations across
  // multiple Altus accounts. We do this for cloudera.com for example to enable
  // Altus administrative and test accounts.
  string identifyProviderId = 3;
  // The SFDC account ID associated with this account. This will always be set
  // for non-trial accounts. This may or may not be set for trial accounts.
  string sfdcAccountId = 4;
  // The type of Altus account being created.
  AltusIamAccountType.Value accountType = 5;
}

// Generated when a new Altus user has been created.
//
// Updated in usage version 2: first name, last name and email were removed for
//   GDPR compliance.
// Updated in usage version 3: one of identity provider ID or sfdcContactId will
//   always be set.
message AltusIamUserCreated {
  reserved 2, 7, 8, 9;
  // The Altus user ID of the new user. This uniquely identifies the user within
  // Altus. This ID is immutable.
  string userId = 1;
  // The Altus account ID of the user.
  string accountId = 3;
  // The ID of this user in the identity provider. This is not set for all
  // users. If this is not set sfdcContactId will be set.
  string identityProviderUserId = 4;
  // The SFDC contact ID associated with this user. This may or may not be set
  // for trial accounts or for accounts using a non-SFDC identity provider. If
  // this is not set identityProviderUserId will be set.
  string sfdcContactId = 5;
  // Whether the user is an admin in their Altus account.
  bool admin = 6;
  // The CRN for the user.
  string crn = 10;
  // The CRN of the identity provider that the user authenticate with. The value
  // can be one of three:
  // 1) <Cloudera-Default> - the ID for the Cloudera Okta identity provider.
  // 2) Altus-Administration - the ID for te Cloudera Altus Administration
  //    identity provider.
  // 3) an arbitrary CRN: The CRN for the identity provider connector in a
  //    a customer account used to establish identity federation with Altus.
  string identityProviderCrn = 11;
  // Whether the uer was created by an explicit call to createUser IAM API or
  // implicitly when the user logged in interactively.
  bool explicitlyCreated = 12;
}

// Generated when an Altus user record has been updated. This event is only
// generated when an Altus user is updated. The event includes the values of all
// mutable fields after the update, not just the values that have been updated.
//
// Updated in usage version 2: first name, last name and email were removed for
//   GDPR compliance.
message AltusIamUserUpdated {
  reserved 2, 3, 4;
  // The Altus user ID of the updated user.
  string userId = 1;
  // Whether the user is an admin in their Altus account.
  bool admin = 5;
}

// Generated when an Altus IAM user has been deleted.
message AltusIamUserDeleted {
  // The Altus user ID of the deleted user.
  string userId = 1;
}

// Generated when an Altus user logs in interactively.
message AltusIamUserInteractiveLogin {
  // The Altus user ID of the user logging in.
  string userId = 1;
}

// Generated when an Altus user interactive login fails.
message AltusIamUserInteractiveLoginFailure {
  // The Altus user ID of the user logging in.
  string userId = 1;
}

// Generated when an Altus IAM machine user has been created.
message AltusIamMachineUserCreated {
  // The Altus machine user ID of the new machine user. This uniquely identifies
  // the machine user within Altus. This ID is immutable.
  string machineUserId = 1;
  // The Altus account ID of the machine user.
  string accountId = 2;
  // The user-supplied machine user name.
  string machineUserName = 3;
  // The CRN for the machine user.
  string crn = 4;
  // Whether the machine user is an internal machine user.
  bool internal = 5;
}

// Generated when an Altus IAM machine user has been deleted.
message AltusIamMachineUserDeleted {
  // The Altus machine user ID of the deleted machine user.
  string machineUserId = 1;
}


// Generated when an Altus IAM access key has been created.
message AltusIamAccessKeyCreated {
  // The Altus access key ID of the new machine user. This uniquely identifies
  // the access key within Altus. This ID is immutable.
  string accessKeyId = 1;
  // The Altus account ID of the access key.
  string accountId = 2;
  // The CRN of the actor with which this access key is associated. This will be
  // either an IAM user or an IAM machine user.
  string actorCrn = 3;
  // The CRN for the access key.
  string crn = 4;
  // Whether the access key is an internal access key.
  bool internal = 5;
}

// Generated when an Altus IAM access key has been deleted.
message AltusIamAccessKeyDeleted {
  // The Altus access key ID of the deleted access key.
  string accessKeyId = 1;
}

// Generated when an IAM access token has been created.
message AltusIamAccessTokenCreated {
  // The Altus access token ID of the new actor. This uniquely identifies
  // the access token within Altus. This ID is immutable.
  string accessTokenId = 1;
  // The Altus account ID of the access token.
  string accountId = 2;
  // The CRN of the actor with which this access token is associated. This will be
  // either an IAM user or an IAM machine user.
  string actorCrn = 3;
  // The CRN for the access token.
  string crn = 4;
}

// Generated when an IAM access token has been deleted.
message AltusIamAccessTokenDeleted {
  // The access token Id of the deleted access token.
  string accessTokenId = 1;
}

// The type of a CDP environment.
message CDPEnvironmentsEnvironmentType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // AWS
    AWS = 1;
    // Azure
    AZURE = 2;
    // Google
    GCP = 3;
    // YCloud
    YARN = 4;
    // Mock
    MOCK = 5;
  }
}

// The status of a CDP Cloudbreak cluster.
message CDPCloudbreakClusterStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status of a cluster that is being requested to create.
    REQUESTED = 1;
    // The status of a cluster that is being created.
    CREATE_IN_PROGRESS = 2;
    // The status of a cluster that is available for use.
    AVAILABLE = 3;
    // The status of a cluster that is being updated.
    UPDATE_IN_PROGRESS = 4;
    // The status of a cluster that is being requested to update.
    UPDATE_REQUESTED = 5;
    // The status of a cluster that failed to update.
    UPDATE_FAILED = 6;
    // The status of a cluster that has failed creation.
    CREATE_FAILED = 7;
    // The status of a cluster that failed to start in secure mode.
    ENABLE_SECURITY_FAILED = 8;
    // The status of a cluster that is in pre-delete phase.
    PRE_DELETE_IN_PROGRESS = 9;
    // The status of a cluster that is being deleted.
    DELETE_IN_PROGRESS = 10;
    // The status for a cluster that has failed deletion.
    DELETE_FAILED = 11;
    // The status of a cluster that is successfully deleted.
    DELETE_COMPLETED = 12;
    // The status of a cluster that is stooped.
    STOPPED = 13;
    // The status of a cluster that is being requested to stop.
    STOP_REQUESTED = 14;
    // The status of a cluster that is being requested to start.
    START_REQUESTED = 15;
    // The status of a cluster that is being stopped.
    STOP_IN_PROGRESS = 16;
    // The status of a cluster that is being started.
    START_IN_PROGRESS = 17;
    // The status of a cluster that failed to start.
    START_FAILED = 18;
    // The status of a cluster that failed to stop.
    STOP_FAILED = 19;
    // The status of a cluster that is waiting for the sync.
    WAIT_FOR_SYNC = 20;
    // The status of a cluster that had maintenance mode enabled.
    MAINTENANCE_MODE_ENABLED = 21;
  }
}

// Generated when a valid CDP Datalake cluster creation request has
// been made.
message CDPDatalakeClusterRequested {
  // The CDP Datalake ID.
  string datalakeId = 1;
  // The CDP account ID of the Datalake cluster.
  string accountId = 2;
  // The user-supplied Datalake name.
  string datalakeName = 3;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 4;
  // The CRN of the Datalake cluster's environment.
  string environmentCrn = 5;
  // The CDP distribution version of the Datalake cluster.
  string cdpdVersion = 6;
  // The CRN for the Datalake cluster. This could be clusterId for now.
  string crn = 7;
  // The CRN of the Datalake cluster's creator.
  string creatorCrn = 8;
  // The name of the cluster definition.
  string clusterDefinitionName = 9;
}

// Generated when a CDP Datalake cluster's status changed.
message CDPDatalakeClusterStatusChanged {
  // The CDP Datalake ID.
  string datalakeId = 1;
  // the Datalake cluster's status before the change.
  CDPCloudbreakClusterStatus.Value oldStatus = 2;
  // the Datalake cluster's status after the change.
  CDPCloudbreakClusterStatus.Value newStatus = 3;
  // A failure message for the Datalake cluster. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
}

// Generated when a valid CDP Datahub cluster creation request has
// been made.
message CDPDatahubClusterRequested {
  // The CDP cluster ID of the Datahub cluster.
  string clusterId = 1;
  // The CDP account ID of the Datahub cluster.
  string accountId = 2;
  // The user-supplied cluster name.
  string clusterName = 3;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 4;
  // The CRN of the Datahub cluster's environment.
  string environmentCrn = 5;
  // The CDP distribution version of the Datahub cluster.
  string cdpdVersion = 6;
  // The CRN of the Datalake. This will be empty if Datalake is not
  // in use.
  string datalakeCrn = 7;
  // The CRN for the Datahub cluster. This could be clusterId for now.
  string crn = 8;
  // The CRN of the Datahub cluster's creator.
  string creatorCrn = 9;
  // The name of the cluster definition.
  string clusterDefinitionName = 10;
}

// Generated when a CDP Datahub cluster's status changed.
message CDPDatahubClusterStatusChanged {
  // The CDP cluster ID of the Datahub cluster.
  string clusterId = 1;
  // the Datahub cluster's status before the change.
  CDPCloudbreakClusterStatus.Value oldStatus = 2;
  // the Datahub cluster's status after the change.
  CDPCloudbreakClusterStatus.Value newStatus = 3;
  // A failure message for the Datahub cluster. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
}


// The status of a CDP Cloudbreak workspace.
message CDPCMLWorkspaceStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when a workspace is trying to create a kubernetes cluster.
    PROVISION_STARTED = 1;
    // The status when a workspace is done creating a kubernetes cluster.
    PROVISION_FINISHED = 2;
    // The status when a workspace failed to provision a kubernetes cluster.
    PROVISION_FAILED = 3;

    // The status when a workspace is trying to install or upgrade CDSW on a running kubernetes cluster.
    INSTALLATION_STARTED = 4;
    // The status when a workspace is done with installing or upgrading CDSW and ready to be used.
    INSTALLATION_FINISHED = 5;
    // The status when a workspace failed to install CDSW.
    INSTALLATION_FAILED = 6;

    // The status when a workspace is trying to deprovision the running kubernetes cluster.
    DEPROVISION_STARTED = 7;
    // The status when a workspace is done deprovisioning the kubernetes cluster.
    DEPROVISION_FINISHED = 8;
    // The status when a workspace failed to deprovision the kubernetes cluster.
    DEPROVISION_FAILED = 9;

    // The status when a workspace is trying to renew the certificate of a running CDSW.
    RENEW_STARTED = 10;
    // The status when a workspace is done renewing the certificate of a running CDSW.
    RENEW_FINISHED = 11;
    // The status when a workspace could not renew the certificate, but the CDSW cluster still is usable.
    RENEW_WARNING = 12;

    // The status when a workspace is trying to suspend.
    SUSPEND_STARTED = 13;
    // The status when a workspace is suspended.
    SUSPEND_FINISHED = 14;
    // The status when a workspace failed to suspend.
    SUSPEND_FAILED = 15;

    // The status when a workspace is trying to resume.
    RESUME_STARTED = 16;
    // The status when a workspace completed resuming.
    RESUME_FINISHED = 17;
    // The status when a workspace failed to resume.
    RESUME_FAILED = 18;
    // The status when a workspace failed to resume, but the nodes is up and running.
    RESUME_WARNING = 19;

    // The status when a workspace is trying to upgrade.
    UPGRADE_STARTED = 20;
    // The status when a workspace is upgraded.
    UPGRADE_FINISHED = 21;
    // The status when a workspace failed to upgrade.
    UPGRADE_FAILED = 22;
  }
}

// AWS metadata about the workspace when it was created or updated.
message CDPCMLAWSWorkspaceMetadata {
  // Requested min workers for the auto scaling workers group.
  int32 minWorkers = 1;
  // Requested max workers for the auto scaling workers group.
  int32 maxWorkers = 2;
  // Requested min gpu for the auto scaling gpu group.
  int32 minGpu = 3;
  // Requested max gpu for the auto scaling gpu group.
  int32 maxGpu = 4;
  // The instance type selected for the workers auto scaling group.
  string workerInstanceType = 5;
  // The instance type selected for the gpu auto scaling group.
  string gpuInstanceType = 6;
}

// Azure metadata about the workspace when it was created or updated.
message CDPCMLAzureWorkspaceMetadata {
  // Requested min workers for the auto scaling workers group.
  int32 minWorkers = 1;
  // Requested max workers for the auto scaling workers group.
  int32 maxWorkers = 2;
  // Requested min gpu for the auto scaling gpu group.
  int32 minGpu = 3;
  // Requested max gpu for the auto scaling gpu group.
  int32 maxGpu = 4;
  // The instance type selected for the workers auto scaling group.
  string workerInstanceType = 5;
  // The instance type selected for the gpu auto scaling group.
  string gpuInstanceType = 6;
}

// Generated when a valid CDP CML workspace creation request has been made.
message CDPCMLWorkspaceRequested {
  // The CDP workspace CRN of the CML workspace.
  string crn = 1;
  // The CDP account ID of the CML workspace.
  string accountId = 2;
  // The user-supplied workspace name.
  string workspaceName = 3;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 4;
  // The CRN of the CML workspace's environment.
  string environmentCrn = 5;
  // The CML crud app version.
  string cdpdVersion = 6;
  // The CRN of the CML workspace's creator.
  string creatorCrn = 7;
  // metadata
  oneof metadata {
    // AWS specific metadata about the workspace.
    CDPCMLAWSWorkspaceMetadata cdpCMLAWSWorkspaceMetadata = 8;
    // AZURE specific metadata about the workspace.
    CDPCMLAzureWorkspaceMetadata cdpCMLAzureWorkspaceMetadata = 9;
  }
  // The CML workspace version deployed.
  string workspaceVersion = 10;
}

// Generated when a CDP CML workspace's status changed.
message CDPCMLWorkspaceStatusChanged {
  // The CDP workspace CRN of the CML workspace.
  string crn = 1;
  // the CML workspace's status before the change.
  CDPCMLWorkspaceStatus.Value oldStatus = 2;
  // the CML workspace's status after the change.
  CDPCMLWorkspaceStatus.Value newStatus = 3;
  // A failure message for the CML workspace. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
  string fromVersion = 5;
  string toVersion = 6;
}

// The status of a CDP request
message CDPRequestProcessingStep {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // First step of the request processing
    INIT = 1;
    // Last step of the request processing
    FINAL = 2;
    // Indicating that the event is a sync event
    SYNC = 3;
  }
}

// The status of a CDP environment
message CDPEnvironmentStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when CDP CP is trying to create an environment.
    CREATE_STARTED = 1;
    // The status when CDP CP is done creating an environment.
    CREATE_FINISHED = 2;
    // The status when CDP CP failed to provision an environment.
    CREATE_FAILED = 3;

    // The status when CDP CP is trying to delete an environment.
    DELETE_STARTED = 4;
    // The status when CDP CP is done deleting an environment.
    DELETE_FINISHED = 5;
    //  The status when CDP CP failed to delete an environment.
    DELETE_FAILED = 6;

    // The status when an environment is trying to suspend.
    SUSPEND_STARTED = 7;
    // The status when an environment is suspended.
    SUSPEND_FINISHED = 8;
    // The status when an environment failed to suspend.
    SUSPEND_FAILED = 9;

    // The status when an environment is trying to resume.
    RESUME_STARTED = 10;
    // The status when an environment completed resuming.
    RESUME_FINISHED = 11;
    // The status when an environment failed to resume.
    RESUME_FAILED = 12;
  }
}

// The status of a CDP Cluster
message CDPClusterStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when CDP CP is trying to create a cluster.
    CREATE_STARTED = 1;
    // The status when CDP CP is done creating a cluster.
    CREATE_FINISHED = 2;
    // The status when CDP CP failed to provision a cluster.
    CREATE_FAILED = 3;

    // The status when CDP CP is trying to delete a cluster.
    DELETE_STARTED = 4;
    // The status when CDP CP is done deleting a cluster.
    DELETE_FINISHED = 5;
    //  The status when CDP CP failed to delete a cluster.
    DELETE_FAILED = 6;

    // The status when a cluster is trying to suspend.
    SUSPEND_STARTED = 7;
    // The status when a cluster is suspended.
    SUSPEND_FINISHED = 8;
    // The status when a cluster failed to suspend.
    SUSPEND_FAILED = 9;

    // The status when a cluster is trying to resume.
    RESUME_STARTED = 10;
    // The status when a cluster completed resuming.
    RESUME_FINISHED = 11;
    // The status when a cluster failed to resume.
    RESUME_FAILED = 12;

    // The status when a cluster is trying to upgrade.
    UPGRADE_STARTED = 13;
    // The status when a cluster completed upgrading.
    UPGRADE_FINISHED = 14;
    // The status when a cluster failed to upgrade.
    UPGRADE_FAILED = 15;

    // The status when a cluster is trying to repair.
    REPAIR_STARTED = 16;
    // The status when a cluster completed repairing.
    REPAIR_FINISHED = 17;
    // The status when a cluster failed to repair.
    REPAIR_FAILED = 18;

    // The status when a cluster is trying to upscale.
    UPSCALE_STARTED = 19;
    // The status when a cluster completed upscaling.
    UPSCALE_FINISHED = 20;
    // The status when a cluster failed to upscale.
    UPSCALE_FAILED = 21;

    // The status when a cluster is trying to downscale.
    DOWNSCALE_STARTED = 22;
    // The status when a cluster completed downscaling.
    DOWNSCALE_FINISHED = 23;
    // The status when a cluster failed to downscale.
    DOWNSCALE_FAILED = 24;

    // The status when CB is trying to renew the public facing certificate of the cluster, Letsencrypt certificate
    RENEW_PUBLIC_CERT_STARTED = 25;
    // The status when CB is done renewing the public facing certificate of the cluster, Letsencrypt certificate
    RENEW_PUBLIC_CERT_FINISHED = 26;
    // The status when CB could not renew the public facing certificate of the cluster, Letsencrypt certificate
    RENEW_PUBLIC_CERT_FAILED = 27;

    // The status when CB is trying to renew the internal certificates of the cluster
    RENEW_CLUSTER_INTERNAL_CERT_STARTED = 28;
    // The status when CB is done renewing the internal certificates of the cluster
    RENEW_CLUSTER_INTERNAL_CERT_FINISHED = 29;
    // The status when CB could not renew the internal certificates of the cluster
    RENEW_CLUSTER_INTERNAL_CERT_FAILED = 30;
  }
}

message CDPOperationDetails {
  // The CDP account id of the event
  string accountId = 1;
  // The CRN for the resource
  string resourceCrn = 2;
  // Name of the resource
  string resourceName = 3;
  // User CRN initiated this event (it might be internal actor)
  string initiatorCrn = 4;
  // Version of the application that created this event
  string applicationVersion = 5;
  // Request processing type
  CDPRequestProcessingStep.Value cdpRequestProcessingStep = 6;
  // Flow UUID, to make it easy to identify which flow has triggered this event
  string flowId = 7;
  // Flow Chain UUID, to make it easy to identify which flowchain has triggered this event
  string flowChainId = 8;
  // Flow state when this event is written
  string flowState = 9;
  // Correlation ID to correlate events written together
  string correlationId = 10;
  // Cloud provider identifier
  CDPEnvironmentsEnvironmentType.Value environmentType = 11;
}

message CDPEnvironmentDetails {
  // Cloud provider identifier
  CDPEnvironmentsEnvironmentType.Value environmentType = 1;
  // Region of the deployment
  string region = 2;
  // Number of availability zones used in the environment
  int32 numberOfAvailabilityZones = 3;
  // Number of availability zones used in the environment
  string availabilityZones = 4;
  // Network metadata
  CDPNetworkDetails networkDetails = 5;
  // AWS specific details of the environment
  CDPEnvironmentAwsDetails awsDetails = 6;
  // Azure specific details of the environment
  CDPEnvironmentAzureDetails azureDetails = 7;
}

message CDPFreeIPADetails {
  // Number of nodes
  int32 nodes = 1;
  // Shows whether spot is used for any FreeIPA nodes
  bool spot = 2;
}

// Azure specific environment details
message CDPEnvironmentAzureDetails {
  bool singleResourceGroup = 1;
}

// AWS specific environment details
message CDPEnvironmentAwsDetails {
}

message CDPEnvironmentTelemetryFeatureDetails {
  // Workload analytics is enabled on this environment
  string workloadAnalytics = 1;
  // Cluster log collection is enabled on this environment
  string clusterLogsCollection = 2;
}

message CDPProxyDetails {
  // Shows whether a proxy is used
  bool proxy = 1;
  // Shows whether it is http or https
  string protocol = 2;
  // Shows whether NONE or BASIC auth
  string authentication = 3;
}

message CDPNetworkDetails {
  // Whether the network is created by CDP CP or by the customer
  string networkType = 1;
  // How CDP CP connects to the environment
  string connectivity = 2;
  // How many public subnets are used
  int32 numberPublicSubnets = 3;
  // How many public subnets are used
  int32 numberPrivateSubnets = 4;
  // Private endpoints are created for this particular environment
  string serviceEndpointCreation = 5;
  // Metadata around what type of proxy is used in this environment
  CDPProxyDetails proxyDetails = 6;
  // Public Endpoint Access Gateway (aka semi-private networks) are enabled or not
  string publicEndpointAccessGateway = 7;
  // Whether the security groups are created by CDP CP or by the customer
  string securityAccessType = 8;
}

// Generated when Environment creation has been requested or finished
message CDPEnvironmentRequested {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Environment metadata
  CDPEnvironmentDetails environmentDetails = 2;
  // Data collection metadata
  CDPEnvironmentTelemetryFeatureDetails telemetryFeatureDetails = 3;
  // FreeIPA metadata
  CDPFreeIPADetails freeIPA = 4;
}

// Generated when Environment status has changed
message CDPEnvironmentStatusChanged {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // The environment's status before the change.
  CDPEnvironmentStatus.Value oldStatus = 2;
  // The environment's status after the change.
  CDPEnvironmentStatus.Value newStatus = 3;
  // Describe the reason of the failure if any
  string failureReason = 4;
}

message CDPImageDetails {
  // CDP Image ID
  string imageId = 1;
  // Image catalog name
  string imageCatalog = 2;
}

message CDPClusterShape {
  // Cluster template
  string clusterTemplateName = 1;
  // Number of nodes
  int32 nodes = 2;
  // Detailed node count per host group
  string hostGroupNodeCount = 3;
  // Definition details in a json format
  string definitionDetails = 4;
}

message CDPVersionDetails {
  // Cloudera Runtime Version
  string crVersion = 1;
  // CM Version
  string cmVersion = 2;
  // CDPD Version
  string cdpdVersion = 3;
  // Salt Version
  string saltVersion = 4;
  // Date when the OS was updated last time
  string osPatchLevel = 5;
  // Key value pairs of every version what we know
  string all = 6;
}

message CDPClusterDetails {
  // Shape of the cluster
  CDPClusterShape clusterShape = 1;
  // Version details
  CDPVersionDetails versionDetails = 2;
  // Image details
  CDPImageDetails imageDetails = 3;
}

message CDPStatusDetails {
  // Status of the stack
  string stackStatus = 1;
  // Detailed status of the stack
  string stackDetailedStatus = 2;
  // Status reason of the stack
  string stackStatusReason = 3;
  // Status of the cluster
  string clusterStatus = 4;
  // Status reason of the cluster
  string clusterStatusReason = 5;
}

message CDPDatalakeFeatures {
  // Ranger Authorization feature tracking
  CDPRaz raz = 1;
}

message CDPRaz {
  // Status whether RAZ is enabled for this cluster ot not
  string status = 1;
}

// Generated when Datalake creation has been requested or finished
message CDPDatalakeRequested {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Environment Crn
  string environmentCrn = 2;
  // Cluster details for Datalake
  CDPClusterDetails clusterDetails = 3;
  // Feature tracking for DL
  CDPDatalakeFeatures features = 4;
}

// Generated when Datalake status has changed
message CDPDatalakeStatusChanged {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // The datalake's status before the change.
  CDPClusterStatus.Value oldStatus = 2;
  // The datalake's status after the change.
  CDPClusterStatus.Value newStatus = 3;
  // Describes the detailed status of the stack and the cluster of the datalake
  CDPStatusDetails statusDetails = 4;
}

// Generated when Datahub creation has been requested or finished
message CDPDatahubRequested {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Environment Crn
  string environmentCrn = 2;
  // Details for datahub
  CDPClusterDetails clusterDetails = 3;
}

// Generated when Datahub status has changed
message CDPDatahubStatusChanged {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // The datahub's status before the change.
  CDPClusterStatus.Value oldStatus = 2;
  // The datahub's status after the change.
  CDPClusterStatus.Value newStatus = 3;
  // Describes the detailed status of the stack and the cluster of the datahub
  CDPStatusDetails statusDetails = 4;
}

message CDPSyncDetails {
  // Status of the stack
  string status = 1;
  // Detailed status of the stack
  string detailedStatus = 2;
  // The timestamp of the start of the cluster creation
  uint64 clusterCreationStarted = 3;
  // The timestamp of the finish of the cluster creation
  uint64 clusterCreationFinished = 4;
}

// Generated periodically for Datalake clusters
message CDPDatalakeSync {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Additional metadata about the cluster
  CDPSyncDetails syncDetails = 2;
  // Details for datalake
  CDPClusterDetails clusterDetails = 3;
  // Describes the detailed status of the stack and the cluster of the datalake
  CDPStatusDetails statusDetails = 4;
}

// Generated periodically for Datahub clusters
message CDPDatahubSync {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Additional metadata about the cluster
  CDPSyncDetails syncDetails = 2;
  // Details for datahub
  CDPClusterDetails clusterDetails = 3;
  // Describes the detailed status of the stack and the cluster of the datahub
  CDPStatusDetails statusDetails = 4;
}