syntax = "proto3";

package usage;

option java_package = "com.cloudera.thunderhead.service.common.usage";
option java_outer_classname = "UsageProto";
option go_package = "com/cloudera/cdp/protobuf";
import "google/protobuf/timestamp.proto";

// This proto defines the Altus usage event schema. Find the usage system design
// at docs/usage_reporting.md. This proto file is meant to be the documentation
// for the usage event schema, so it should be kept well commented. Note that
// this usage schema is a compatibility surface since we do not want consumers
// of usage data to have their queries or reports break when we make changes.

// A usage event.
message Event {
  // Deprecated event types
  reserved 8, 9, 10, 11, 12, 13, 14, 15, 20, 21;
  // The event's ID.
  string id = 1;
  // The event timestamp in ms from the Java epoch of 1970-01-01T00:00:00Z.
  uint64 timestamp = 2;
  // The version of the usage system that generated the event.
  //
  // This should be bumped when it would make parsing of usage events easier,
  // e.g. when we've changed the semantics around what is and is not optional
  // or have made some semantic change for some event. It need not be bumped
  // for all changes to the usage model. If an event has semantics that have
  // changed over time, it should be noted in the comments for the specific
  // event message below.
  //
  // The current version and history is maintained in UsageReporter.java.
  uint32 version = 3;
  // The event-specific details.
  oneof details {
    // An Altus account was created.
    AltusIamAccountCreated altusIamAccountCreated = 4;
    // An Altus user was created.
    AltusIamUserCreated altusIamUserCreated = 5;
    // An Altus user record was updated.
    AltusIamUserUpdated altusIamUserUpdated = 6;
    // An Altus user was deleted.
    AltusIamUserDeleted altusIamUserDeleted = 29;
    // An Altus user interactively logged in.
    AltusIamUserInteractiveLogin altusIamUserInteractiveLogin = 7;
    // An Altus user interactively login failure.
    AltusIamUserInteractiveLoginFailure altusIamUserInteractiveLoginFailure = 26;
    // An Altus machine user was created.
    AltusIamMachineUserCreated altusIamMachineUserCreated = 16;
    // An Altus machine user was deleted.
    AltusIamMachineUserDeleted altusIamMachineUserDeleted = 17;
    // An IAM machine user was updated.
    AltusIamMachineUserUpdated altusIamMachineUserUpdated = 98;
    // An Altus access key was created.
    AltusIamAccessKeyCreated altusIamAccessKeyCreated = 18;
    // An Altus access key was deleted.
    AltusIamAccessKeyDeleted altusIamAccessKeyDeleted = 19;
    // An Altus access token was created.
    AltusIamAccessTokenCreated altusIamAccessTokenCreated = 38;
    // An Altus access token was deleted.
    AltusIamAccessTokenDeleted altusIamAccessTokenDeleted = 39;
    // A CDP Datalake cluster was requested to create.
    CDPDatalakeClusterRequested cdpDatalakeClusterRequested = 22;
    // A CDP Datalake cluster's status changed.
    CDPDatalakeClusterStatusChanged cdpDatalakeClusterStatusChanged = 23;
    // A CDP Datahub cluster was requested to create.
    CDPDatahubClusterRequested cdpDatahubClusterRequested = 24;
    // A CDP Datahub cluster's status changed.
    CDPDatahubClusterStatusChanged cdpDatahubClusterStatusChanged = 25;
    // A CDP CML workspace was requested to create.
    CDPCMLWorkspaceRequested cdpCMLWorkspaceRequested = 27;
    // A CDP CML workspace's status changed.
    CDPCMLWorkspaceStatusChanged cdpCMLWorkspaceStatusChanged = 28;
    // A CDP Environment was requested to create
    CDPEnvironmentRequested cdpEnvironmentRequested = 30;
    // A CDP Environment was requested to create
    CDPEnvironmentStatusChanged cdpEnvironmentStatusChanged = 31;
    // A CDP Datalake was requested to create
    CDPDatalakeRequested cdpDatalakeRequested = 32;
    // A CDP Datalake was requested to create
    CDPDatalakeStatusChanged cdpDatalakeStatusChanged = 33;
    // A CDP DataHub was requested to create
    CDPDatahubRequested cdpDatahubRequested = 34;
    // A CDP DataHub was requested to create
    CDPDatahubStatusChanged cdpDatahubStatusChanged = 35;
    // Sync event for a CDP Datalake cluster
    CDPDatalakeSync cdpDatalakeSync = 36;
    // Sync event for a CDP Datahub cluster
    CDPDatahubSync cdpDatahubSync = 37;
    // Autoscale event for a CDP Datahub cluster
    CDPDatahubAutoscaleTriggered cdpDatahubAutoscaleTriggered = 70;
    // Autoscale config changed for a CDP Datahub cluster
    CDPDatahubAutoscaleConfigChanged cdpDatahubAutoscaleConfigChanged = 71;
    // A CDP DF Catalog Artifact was created
    CDPDFCatalogArtifactCreated cdpDFCatalogArtifactCreated = 40;
    // A CDP DF Catalog Artifact was deleted
    CDPDFCatalogArtifactDeleted cdpDFCatalogArtifactDeleted = 41;
    // A CDP DF Catalog Artifact version was created
    CDPDFCatalogArtifactVersionCreated cdpDFCatalogArtifactVersionCreated = 42;
    // A CDP DF Catalog Artifact version was deleted
    CDPDFCatalogArtifactVersionDeleted cdpDFCatalogArtifactVersionDeleted = 43;
    // A CDP DataFlow Service was requested to be enabled, updated, or disabled.
    CDPDFServiceRequested cdpDFServiceRequested = 44;
    // A CDP DataFlow Service's status changed.
    CDPDFServiceStatusChanged cdpDFServiceStatusChanged = 45;
    // A CDP DataFlow Service was requested to be upgraded.
    CDPDFServiceUpgradeRequested cdpDFServiceUpgradeRequested = 91;
    // A CDP DataFlow Service's upgrade status changed.
    CDPDFServiceUpgradeStatusChanged cdpDFServiceUpgradeStatusChanged = 92;
    // A CDP UDX Bundle was initiated
    CDPUDXBundleInitiated cdpUDXBundleInitiated = 46;
    // A CDP UDX Bundle was received
    CDPUDXBundleReceived cdpUDXBundleReceived = 47;
    // A CDP DataFlow Deployment was requested to be created, updated, or terminated.
    CDPDFDeploymentRequested cdpDFDeploymentRequested = 48;
    // A CDP DataFlow Deployment's status changed.
    CDPDFDeploymentStatusChanged cdpDFDeploymentStatusChanged = 49;
    // A CDP DataFlow Service cluster scaled up or down.
    CDPDFServiceNodesChanged cdpDFServiceNodesChanged = 50;
    // A CDP Flow Deployment (NiFi cluster) scaled up or down
    CDPDFDeploymentPodsChanged cdpDFDeploymentPodsChanged = 51;
    // A CDP DataFlow Deployment's Current Pod Status
    CDPDFDeploymentPodStatus cdpDFDeploymentPodStatus = 96;
    // A CDP DataFlow Deployment's upgrade status changed
    CDPDFDeploymentUpgradeStatusChanged cdpDFDeploymentUpgradeStatusChanged = 94;
    // A CDP DataFlow Deployment was requested to upgrade
    CDPDFDeploymentUpgradeRequested cdpDFDeploymentUpgradeRequested = 97;
    // A CDP Liftie cluster was requested to create / update / upgrade / delete.
    CDPLiftieRequested cdpLiftieRequested = 52;
    // A CDP Liftie cluster's status changed.
    CDPLiftieClusterStatusChanged cdpLiftieClusterStatusChanged = 53;
    // A CDP Liftie heartbeat usage event
    CDPLiftieClusterNodeStatesHeartbeat cdpLiftieClusterNodeStatesHeartbeat = 99;
    // A KPI was added to a DataFlow deployment.
    CDPDFDeploymentKpiCreated cdpDFDeploymentKpiCreated = 54;
    // A KPI of a DataFlow deployment was modified.
    CDPDFDeploymentKpiUpdated cdpDFDeploymentKpiUpdated = 55;
    // A KPI of a DataFlow deployment was deleted.
    CDPDFDeploymentKpiDeleted cdpDFDeploymentKpiDeleted = 56;
    // A CDP preflight network check result reported
    CDPNetworkCheck cdpNetworkCheck = 57;
    // Hive Query Event Information from DWX
    CDPDWXHiveQuery cdpDWXHiveQuery = 58;
    // A CDP DataFlow Deployment NiFi runtime version update has been requested. Status changes for these events leverage CDPDFDeploymentStatusChanged.
    CDPDFDeploymentNifiVersionUpdateRequested cdpDFDeploymentNifiVersionUpdateRequested = 59;
    // A CDP DataWarehouse Environment was requested to be created, updated or upgraded.
    CDPCDWEnvironmentRequested cdpCDWEnvironmentRequested = 60;
    // A CDP DataWarehouse Environment's status changed.
    CDPCDWEnvironmentStatusChanged cdpCDWEnvironmentStatusChanged = 61;
    // A CDP DataWarehouse DB Catalog was requested to be created, updated or upgraded.
    CDPCDWDBCatalogRequested cdpCDWDBCatalogRequested = 62;
    // A CDP DataWarehouse DB Catalog's status changed.
    CDPCDWDBCatalogStatusChanged cdpCDWDBCatalogStatusChanged = 63;
    // A CDP DataWarehouse Virtual Warehouse was requested to be created, updated or upgraded.
    CDPCDWVirtualWarehouseRequested cdpCDWVirtualWarehouseRequested = 64;
    // A CDP DataWarehouse Virtual Warehouse's status changed.
    CDPCDWVirtualWarehouseStatusChanged cdpCDWVirtualWarehouseStatusChanged = 65;
    // A CDP DataWarehouse Real Time Event Store was requested to be created, updated or upgraded.
    CDPCDWRealTimeEventStoreRequested cdpCDWRealTimeEventStoreRequested = 66;
    // A CDP DataWarehouse Real Time Event Store's status changed.
    CDPCDWRealTimeEventStoreStatusChanged cdpCDWRealTimeEventStoreStatusChanged = 67;
    // A CDP DataEngineering service was requested to be created or updated.
    CDPCDEServiceRequested cdpCDEServiceRequested = 68;
    // A CDP DataEngineering service's status changed.
    CDPCDEServiceStatusChanged cdpCDEServiceStatusChanged = 69;
    // A CDP DataEngineering virtual cluster was requested to be created.
    CDPCDEVirtualClusterRequested cdpCDEVirtualClusterRequested = 72;
    // A CDP DataEngineering virtual cluster's status changed.
    CDPCDEVirtualClusterStatusChanged cdpCDEVirtualClusterStatusChanged = 73;
    // A CDP DataEngineering service upgrade was requested.
    CDPCDEServiceUpgradeRequested cdpCDEServiceUpgradeRequested = 78;
    // A CDP DataEngineering job is created or its status changed.
    CDPCDEJobRunStatusChanged cdpCDEJobRunStatusChanged = 79;
    // A CDP DataEngineering job is created or modified.
    CDPCDEJobCreated cdpCDEJobCreated = 80;
    // A CDP CDE resource is created or modified.
    CDPCDEResourceCreated cdpCDEResourceCreated = 81;
    // Cloudera Data Visualization Usage Event detected.
    CDPCDVEvent cdpCDVEvent = 74;
    // A CDP CML workspace's node state.
    // This "event" is not really an event but a state which is published as a heartbeat. See https://jira.cloudera.com/browse/CDPCP-5592
    CDPCMLWorkspaceNodeStatesHeartbeat cdpCMLWorkspaceNodeStatesHeartbeat = 75;
    // CDP VM diagnostics event that can be triggerd by CB API or UDX.
    CDPVMDiagnosticsEvent cdpVmDiagnosticsEvent = 76;
    // A CDP DataWarehouse Virtual Warehouse's nodes changed.
    CDPCDWVirtualWarehouseNodesChanged cdpCDWVirtualWarehouseNodesChanged = 77;
    // A CDP diagnostic event.
    CDPDiagnosticEvent cdpDiagnosticEvent = 82;
    // A CDP stack patcher event fired.
    CDPStackPatchEvent cdpStackPatchEvent = 83;
    // A CDP Data lake operation is requested.
    CDPDatalakeBackupRestoreRequested cdpDatalakeBackupRestoreRequested = 84;
    // A CDP Data lake operation is completed.
    CDPDatalakeBackupRestoreComplete cdpDatalakeBackupRestoreComplete = 85;
    // CDP PEM service created a certificate
    CDPPEMCertificateCreated cdpPEMCertificateCreated = 86;
    // CDP PEM service renewed a certificate
    CDPPEMCertificateRenewed cdpPEMCertificateRenewed = 87;
    // CDP PEM service revoked a certificate
    CDPPEMCertificateRevoked cdpPEMCertificateRevoked = 88;
    // A CDP CML Workspace Backup is created
    CDPCMLWorkspaceBackupRequested cdpCMLWorkspaceBackupRequested = 89;
    // A CDP CML Workspace Backup status changed
    CDPCMLWorkspaceBackupStatusChanged cdpCMLWorkspaceBackupStatusChanged = 90;
    // A CDP FreeIPA's status changed
    CDPFreeIPAStatusChanged cdpFreeIPAStatusChanged = 93;
    // A Replication Manager usage event was detected
    RMUsageEvent rmUsageEvent = 95;
    // A CDP stack's salt password is rotated.
    CDPSaltPasswordRotationEvent cdpSaltPasswordRotationEvent = 100;
    // A CDP trial account is assigned/requested/failed.
    CDPAssignTrialAccount cdpAssignTrialAccount = 101;
    // A CDP trial account status is changed/updated.
    CDPTrialAccountStatusChanged cdpTrialAccountStatusChanged = 102;
    // A recipe is created/attached/detached/deleted.
    CDPRecipeEvent cdpRecipeEvent = 103;
    // A cluster (FreeIPA, Data Lake, Data Hub) creation event with recipe related details.
    CDPClusterCreationRecipeEvent cdpClusterCreationRecipeEvent = 104;
    // A validation result for a CDP resource from the Metering Events Monitoring service.
    CDPMEMValidationResult cdpMEMValidationResult = 105;
    // A CDP DataFlow flow design lifecycle event was triggered
    CDPDFFlowDesignLifecycle cdpDFFlowDesignLifecycle = 106;
    // A CDP environment's proxy config is edited.
    CDPEnvironmentProxyConfigEditEvent cdpEnvironmentProxyConfigEditEvent = 107;
    // A CDP CDW Usage Event.
    CDPCDWUsageEvent cdpCDWUsageEvent = 108;
    // A CDP CML session start usage event.
    CDPCMLSessionStartEvent cdpCMLsessionStartEvent = 109;
    // A CDP CML engine stop usage event.
    CDPCMLEngineStopEvent cdpCMLengineStopEvent = 110;
    // A CDP CML engine delete usage event.
    CDPCMLEngineDeleteEvent cdpCMLengineDeleteEvent = 111;
    // A CDP CML engine heartbeat usage event.
    CDPCMLEngineHeartBeatEvent cdpCMLengineHeartBeatEvent = 112;
    // A CDP CML job start event.
    CDPCMLJobStartEvent cdpCMLjobStartEvent = 113;
    // A CDP CML job created or modified event.
    CDPCMLJobCreatedOrModifiedEvent cdpCMLjobCreatedOrModifiedEvent = 114;
    // A CDP CML experiment started event.
    CDPCMLExperimentStartEvent cdpCMLexperimentStartEvent = 115;
    // A CDP CML model deployed event.
    CDPCMLModelDeployedEvent cdpCMLmodelDeployedEvent = 116;
    // A CDP CML application deployed event.
    CDPCMLApplicationDeployedEvent cdpCMLapplicationDeployedEvent = 117;
    // A CDP CML project created event.
    CDPCMLProjectCreatedEvent cdpCMLprojectCreatedEvent = 118;
    // A CDP CML prototype completed event.
    CDPCMLPrototypeCompletedEvent cdpCMLprototypeCompletedEvent = 119;
    // A CDP CML application created or modified event.
    CDPCMLApplicationCreatedOrModifiedEvent cdpCMLapplicationCreatedOrModifiedEvent = 120;
    // A CDP CML experiment event.
    CDPCMLExperimentEvent cdpCMLexperimentEvent = 121;
    // A CDP CML experiment run event.
    CDPCMLExperimentRunEvent cdpCMLexperimentRunEvent = 122;
    // A CDP CML data connection action event.
    CDPCMLDataConnectionActionEvent cdpCMLdataConnectionActionEvent = 123;
    // A CDP CML workspace login event.
    CDPCMLLoginEvent cdpCMLLoginEvent = 124;
    // A CDP CML workspace logout event.
    CDPCMLLogoutEvent cdpCMLLogoutEvent = 125;
    // A CDP CML worker start event.
    CDPCMLWorkerStartEvent cdpCMLworkerStartEvent = 126;
    // A CDP CML spark executor event.
    CDPCMLSparkExecutorEvent cdpCMLSparkExecutorEvent = 127;
  }
}

// The type of an Altus account.
message AltusIamAccountType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // A regular Altus account.
    REGULAR = 1;
    // A trial Altus account.
    TRIAL = 2;
    // A managed Skynet CDPOne trial account.
    MANAGED_SKYNET_CDPONE_TRIAL = 3;
  }
}

// Generated when a new Altus account has been created.
message AltusIamAccountCreated {
  // The Altus account ID of the new account. This uniquely identifies the
  // account within Altus. This ID is immutable.
  string accountId = 1;
  // The identity provider ID for this account. The identity provider for an
  // account provides user identity information for the account. Note that the
  // same SFDC account can have multiple identity provider associations across
  // multiple Altus accounts. We do this for cloudera.com for example to enable
  // Altus administrative and test accounts.
  string identifyProviderId = 3;
  // The SFDC account ID associated with this account. This will always be set
  // for non-trial accounts. This may or may not be set for trial accounts.
  string sfdcAccountId = 4;
  // The type of Altus account being created.
  AltusIamAccountType.Value accountType = 5;
}

// Generated when a new Altus user has been created.
//
// Updated in usage version 2: first name, last name and email were removed for
//   GDPR compliance.
// Updated in usage version 3: one of identity provider ID or sfdcContactId will
//   always be set.
message AltusIamUserCreated {
  reserved 2, 7, 8, 9;
  // The Altus user ID of the new user. This uniquely identifies the user within
  // Altus. This ID is immutable.
  string userId = 1;
  // The Altus account ID of the user.
  string accountId = 3;
  // The ID of this user in the identity provider. This is not set for all
  // users. If this is not set sfdcContactId will be set.
  string identityProviderUserId = 4;
  // The SFDC contact ID associated with this user. This may or may not be set
  // for trial accounts or for accounts using a non-SFDC identity provider. If
  // this is not set identityProviderUserId will be set.
  string sfdcContactId = 5;
  // Whether the user is an admin in their Altus account.
  bool admin = 6;
  // The CRN for the user.
  string crn = 10;
  // The CRN of the identity provider that the user authenticate with. The value
  // can be one of three:
  // 1) <Cloudera-Default> - the ID for the Cloudera Okta identity provider.
  // 2) Altus-Administration - the ID for te Cloudera Altus Administration
  //    identity provider.
  // 3) an arbitrary CRN: The CRN for the identity provider connector in a
  //    a customer account used to establish identity federation with Altus.
  string identityProviderCrn = 11;
  // Whether the uer was created by an explicit call to createUser IAM API or
  // implicitly when the user logged in interactively.
  bool explicitlyCreated = 12;
}

// Generated when an Altus user record has been updated. This event is only
// generated when an Altus user is updated. The event includes the values of all
// mutable fields after the update, not just the values that have been updated.
//
// Updated in usage version 2: first name, last name and email were removed for
//   GDPR compliance.
message AltusIamUserUpdated {
  reserved 2, 3, 4;
  // The Altus user ID of the updated user.
  string userId = 1;
  // Whether the user is an admin in their Altus account.
  bool admin = 5;
}

// Generated when an Altus IAM user has been deleted.
message AltusIamUserDeleted {
  // The Altus user ID of the deleted user.
  string userId = 1;
}

// Generated when an Altus user logs in interactively.
message AltusIamUserInteractiveLogin {
  // The Altus user ID of the user logging in.
  string userId = 1;
}

// Generated when an Altus user interactive login fails.
message AltusIamUserInteractiveLoginFailure {
  // The Altus user ID of the user logging in.
  string userId = 1;
}

// Generated when an Altus IAM machine user has been created.
message AltusIamMachineUserCreated {
  // The Altus machine user ID of the new machine user. This uniquely identifies
  // the machine user within Altus. This ID is immutable.
  string machineUserId = 1;
  // The Altus account ID of the machine user.
  string accountId = 2;
  // The user-supplied machine user name.
  string machineUserName = 3;
  // The CRN for the machine user.
  string crn = 4;
  // Whether the machine user is an internal machine user.
  bool internal = 5;
}

// Generated when an Altus IAM machine user has been deleted.
message AltusIamMachineUserDeleted {
  // The Altus machine user ID of the deleted machine user.
  string machineUserId = 1;
}

// Generated when an IAM machine user is updated.
message AltusIamMachineUserUpdated {
  // The CDP account ID of the updated machine user.
  string accountId = 1;
  // The CRN of the update machine user.
  string crn = 2;
  // The updated status of the machine user. The possible values are ACTIVE and CONTROL_PLANE_LOCKED_OUT.
  // More statuses could be added in future.
  string status = 3;
}

// Generated when an Altus IAM access key has been created.
message AltusIamAccessKeyCreated {
  // The Altus access key ID of the new machine user. This uniquely identifies
  // the access key within Altus. This ID is immutable.
  string accessKeyId = 1;
  // The Altus account ID of the access key.
  string accountId = 2;
  // The CRN of the actor with which this access key is associated. This will be
  // either an IAM user or an IAM machine user.
  string actorCrn = 3;
  // The CRN for the access key.
  string crn = 4;
  // Whether the access key is an internal access key.
  bool internal = 5;
}

// Generated when an Altus IAM access key has been deleted.
message AltusIamAccessKeyDeleted {
  // The Altus access key ID of the deleted access key.
  string accessKeyId = 1;
}

// Generated when an IAM access token has been created.
message AltusIamAccessTokenCreated {
  // The Altus access token ID of the new actor. This uniquely identifies
  // the access token within Altus. This ID is immutable.
  string accessTokenId = 1;
  // The Altus account ID of the access token.
  string accountId = 2;
  // The CRN of the actor with which this access token is associated. This will be
  // either an IAM user or an IAM machine user.
  string actorCrn = 3;
  // The CRN for the access token.
  string crn = 4;
}

// Generated when an IAM access token has been deleted.
message AltusIamAccessTokenDeleted {
  // The access token Id of the deleted access token.
  string accessTokenId = 1;
}

// The type of a CDP environment.
message CDPEnvironmentsEnvironmentType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // AWS
    AWS = 1;
    // Azure
    AZURE = 2;
    // Google
    GCP = 3;
    // YCloud
    YARN = 4;
    // Mock
    MOCK = 5;
    // Openshift
    OPENSHIFT = 6;
  }
}

// The variant of a CDP Cluster.
message CDPCloudProviderVariantType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // AWS
    AWS = 1;
    // AWS_NATIVE
    AWS_NATIVE = 2;
    // Azure
    AZURE = 3;
    // Google
    GCP = 4;
    // YCloud
    YARN = 5;
    // Mock
    MOCK = 6;
    // AWS_GOV Deprecated/Renamed fields
    AWS_GOV = 7;
    // AWS_NATIVE_GOV
    AWS_NATIVE_GOV = 8;
  }
}

// The status of a CDP Cloudbreak cluster.
message DatalakeBackupRestoreStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Successful result for a backup/restore operation.
    SUCCESSFUL = 1;
    // Failed result for a backup/restore operation.
    FAILED = 2;
    // Failed validations for a backup/restore operation.
    VALIDATION_FAILED = 3;
    // Successful only validations for backup/restore operation.
    VALIDATION_SUCCESSFUL = 4;
  }
}

// The status of a CDP Cloudbreak cluster.
message CDPCloudbreakClusterStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status of a cluster that is being requested to create.
    REQUESTED = 1;
    // The status of a cluster that is being created.
    CREATE_IN_PROGRESS = 2;
    // The status of a cluster that is available for use.
    AVAILABLE = 3;
    // The status of a cluster that is being updated.
    UPDATE_IN_PROGRESS = 4;
    // The status of a cluster that is being requested to update.
    UPDATE_REQUESTED = 5;
    // The status of a cluster that failed to update.
    UPDATE_FAILED = 6;
    // The status of a cluster that has failed creation.
    CREATE_FAILED = 7;
    // The status of a cluster that failed to start in secure mode.
    ENABLE_SECURITY_FAILED = 8;
    // The status of a cluster that is in pre-delete phase.
    PRE_DELETE_IN_PROGRESS = 9;
    // The status of a cluster that is being deleted.
    DELETE_IN_PROGRESS = 10;
    // The status for a cluster that has failed deletion.
    DELETE_FAILED = 11;
    // The status of a cluster that is successfully deleted.
    DELETE_COMPLETED = 12;
    // The status of a cluster that is stooped.
    STOPPED = 13;
    // The status of a cluster that is being requested to stop.
    STOP_REQUESTED = 14;
    // The status of a cluster that is being requested to start.
    START_REQUESTED = 15;
    // The status of a cluster that is being stopped.
    STOP_IN_PROGRESS = 16;
    // The status of a cluster that is being started.
    START_IN_PROGRESS = 17;
    // The status of a cluster that failed to start.
    START_FAILED = 18;
    // The status of a cluster that failed to stop.
    STOP_FAILED = 19;
    // The status of a cluster that is waiting for the sync.
    WAIT_FOR_SYNC = 20;
    // The status of a cluster that had maintenance mode enabled.
    MAINTENANCE_MODE_ENABLED = 21;
  }
}

// The type of the credential
message CDPCredentialType {
  enum Value {
    // Unknown credential type
    UNKNOWN = 0;
    // Aws key based credential type
    AWS_KEY_BASED = 1;
    // Aws role based credential type
    AWS_ROLE_BASED = 2;
    // Gcp json credential type
    GCP_JSON = 3;
    // Gcp p12 credential type
    GCP_P12 = 4;
    // Azure codegrantflow credential type
    AZURE_CODEGRANTFLOW = 5;
    // Azure app based with certificate credential type
    AZURE_APPBASED_CERTIFICATE = 6;
    // Azure app based with secret credential type
    AZURE_APPBASED_SECRET = 7;
    // Yarn credential type
    YARN = 8;
    // Mock credential type
    MOCK = 9;
  }
}

// Generated when a valid CDP Datalake cluster creation request has
// been made.
message CDPDatalakeClusterRequested {
  // The CDP Datalake ID.
  string datalakeId = 1;
  // The CDP account ID of the Datalake cluster.
  string accountId = 2;
  // The user-supplied Datalake name.
  string datalakeName = 3;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 4;
  // The CRN of the Datalake cluster's environment.
  string environmentCrn = 5;
  // The CDP distribution version of the Datalake cluster.
  string cdpdVersion = 6;
  // The CRN for the Datalake cluster. This could be clusterId for now.
  string crn = 7;
  // The CRN of the Datalake cluster's creator.
  string creatorCrn = 8;
  // The name of the cluster definition.
  string clusterDefinitionName = 9;
}

// Generated when a CDP Datalake cluster's status changed.
message CDPDatalakeClusterStatusChanged {
  // The CDP Datalake ID.
  string datalakeId = 1;
  // the Datalake cluster's status before the change.
  CDPCloudbreakClusterStatus.Value oldStatus = 2;
  // the Datalake cluster's status after the change.
  CDPCloudbreakClusterStatus.Value newStatus = 3;
  // A failure message for the Datalake cluster. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
}

// Generated when a valid CDP Datahub cluster creation request has
// been made.
message CDPDatahubClusterRequested {
  // The CDP cluster ID of the Datahub cluster.
  string clusterId = 1;
  // The CDP account ID of the Datahub cluster.
  string accountId = 2;
  // The user-supplied cluster name.
  string clusterName = 3;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 4;
  // The CRN of the Datahub cluster's environment.
  string environmentCrn = 5;
  // The CDP distribution version of the Datahub cluster.
  string cdpdVersion = 6;
  // The CRN of the Datalake. This will be empty if Datalake is not
  // in use.
  string datalakeCrn = 7;
  // The CRN for the Datahub cluster. This could be clusterId for now.
  string crn = 8;
  // The CRN of the Datahub cluster's creator.
  string creatorCrn = 9;
  // The name of the cluster definition.
  string clusterDefinitionName = 10;
}

// Generated when a CDP Datahub cluster's status changed.
message CDPDatahubClusterStatusChanged {
  // The CDP cluster ID of the Datahub cluster.
  string clusterId = 1;
  // the Datahub cluster's status before the change.
  CDPCloudbreakClusterStatus.Value oldStatus = 2;
  // the Datahub cluster's status after the change.
  CDPCloudbreakClusterStatus.Value newStatus = 3;
  // A failure message for the Datahub cluster. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
}

// Generated when a valid CDP Datalake operation performed
message CDPDatalakeBackupRestoreRequested {
  // The CDP account ID of the Datalake cluster.
  string accountId = 1;
  // The user-supplied Datalake name.
  string datalakeName = 2;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 3;
  // The shape of the datalake.
  CDPDatalakeShapeType.Value shape = 4;
  // The CRN of the Datalake cluster's environment.
  string environmentCrn = 5;
  // The CDP distribution version of the Datalake cluster.
  string cdpdVersion = 6;
  // The CRN for the Datalake cluster. This could be clusterId for now.
  string crn = 7;
  // The CRN of the user performing the operation.
  string userCrn = 8;
  // Operation type
  CDPDatalakeOperationType.Value operationType = 9;
}

// Generated when a valid CDP Datalake operation status changed.
message CDPDatalakeBackupRestoreComplete {
  // The CDP account ID of the Datalake cluster.
  string accountId = 1;
  // The user-supplied Datalake name.
  string datalakeName = 2;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 3;
  // The shape of the datalake.
  CDPDatalakeShapeType.Value shape = 4;
  // The CRN of the Datalake cluster's environment.
  string environmentCrn = 5;
  // The CDP distribution version of the Datalake cluster.
  string cdpdVersion = 6;
  // The CRN for the Datalake cluster. This could be clusterId for now.
  string crn = 7;
  // The CRN of the user performing the operation.
  string userCrn = 8;
  // The duration of the operation.
  int32 totalDuration = 9;
  // The duration taken to perform operation on the audit events table.
  int32 atlasAuditsEventsDuration = 10;
  // The duration taken to perform operation on the atlasJanus table.
  int32 atlasJanusDuration = 11;
  // The duration taken to perform operation on the vertexIndexCollection collection.
  int32 vertexIndexCollectionDuration = 12;
  // The duration taken to perform operation on the edgeIndexCollection collection.
  int32 edgeIndexCollectionDuration = 13;
  // The duration taken to perform operation on the fulltextxIndexCollection collection.
  int32 fulltextIndexCollectionDuration = 14;
  // The duration taken to perform operation on the rangerAuditsCollection collection.
  int32 rangerAuditsCollectionDuration = 15;
  // The duration taken to perform deletion on the vertexIndexCollection collection.
  int32 vertexIndexCollectionDeleteDuration = 16;
  // The duration taken to perform deletion on the edgeIndexCollection collection.
  int32 edgeIndexCollectionDeleteDuration = 17;
  // The duration taken to perform deletion on the fulltextxIndexCollection collection.
  int32 fulltextIndexCollectionDeleteDuration = 18;
  // The duration taken to perform deletion on the rangerAuditsCollection collection.
  int32 rangerAuditsCollectionDeleteDuration = 19;
  // The duration taken to perform operation on the postgress database
  int32 databaseDuration = 20;
  // Operation type
  CDPDatalakeOperationType.Value operationType = 21;
  // The status of the operation
  DatalakeBackupRestoreStatus.Value status = 22;
  // A failure message for the Datalake cluster. This will only be set if status is
  // *_FAILED.
  string failureReason = 23;
}

// The status of a CDP Cloudbreak workspace.
message CDPCMLWorkspaceStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when a workspace is trying to create a kubernetes cluster.
    PROVISION_STARTED = 1;
    // The status when a workspace is done creating a kubernetes cluster.
    PROVISION_FINISHED = 2;
    // The status when a workspace failed to provision a kubernetes cluster.
    PROVISION_FAILED = 3;

    // The status when a workspace is trying to install or upgrade CDSW on a running kubernetes cluster.
    INSTALLATION_STARTED = 4;
    // The status when a workspace is done with installing or upgrading CDSW and ready to be used.
    INSTALLATION_FINISHED = 5;
    // The status when a workspace failed to install CDSW.
    INSTALLATION_FAILED = 6;

    // The status when a workspace is trying to deprovision the running kubernetes cluster.
    DEPROVISION_STARTED = 7;
    // The status when a workspace is done deprovisioning the kubernetes cluster.
    DEPROVISION_FINISHED = 8;
    // The status when a workspace failed to deprovision the kubernetes cluster.
    DEPROVISION_FAILED = 9;

    // The status when a workspace is trying to renew the certificate of a running CDSW.
    RENEW_STARTED = 10;
    // The status when a workspace is done renewing the certificate of a running CDSW.
    RENEW_FINISHED = 11;
    // The status when a workspace could not renew the certificate, but the CDSW cluster still is usable.
    RENEW_WARNING = 12;

    // The status when a workspace is trying to suspend.
    SUSPEND_STARTED = 13;
    // The status when a workspace is suspended.
    SUSPEND_FINISHED = 14;
    // The status when a workspace failed to suspend.
    SUSPEND_FAILED = 15;

    // The status when a workspace is trying to resume.
    RESUME_STARTED = 16;
    // The status when a workspace completed resuming.
    RESUME_FINISHED = 17;
    // The status when a workspace failed to resume.
    RESUME_FAILED = 18;
    // The status when a workspace failed to resume, but the nodes is up and running.
    RESUME_WARNING = 19;

    // The status when a workspace is trying to upgrade.
    UPGRADE_STARTED = 20;
    // The status when a workspace is upgraded.
    UPGRADE_FINISHED = 21;
    // The status when a workspace failed to upgrade.
    UPGRADE_FAILED = 22;

    // The status when the pre-flight validation of a workspace request is started.
    VALIDATION_STARTED = 23;
    // The status when the pre-flight validation of a workspace results in validation success.
    VALIDATION_SUCCEEDED = 24;
    // The status when the pre-flight validation of a workspace results in validation failure.
    VALIDATION_FAILED = 25;

    // The status when the pre-install validation of a workspace request is started.
    PRE_INSTALL_VALIDATION_STARTED = 26;
    // The status when the pre-install validation of a workspace results in validation success.
    PRE_INSTALL_VALIDATION_SUCCEEDED = 27;
    // The status when the pre-install validation of a workspace results in validation failure.
    PRE_INSTALL_VALIDATION_FAILED = 28;

    // The status when the mount of a volume to a workspace is started.
    MOUNT_STARTED = 29;
    // The status when the mount of a volume to a workspace is finished.
    MOUNT_FINISHED = 30;
    // The status when the mount of a volume to a workspace has failed.
    MOUNT_FAILED = 31;

    // The status when the renewing the certificate of a workspace running CDSW has failed.
    RENEW_FAILED = 32;

    // The status when a modification of a workspace is started.
    MODIFY_STARTED = 33;
    // The status when a modification of a workspace is finished.
    MODIFY_FINISHED = 34;
    // The status when a modification of a workspace has failed.
    MODIFY_FAILED = 35;

    // The status when the unmount of a volume to a workspace is started.
    UNMOUNT_STARTED = 36;
    // The status when the unmount of a volume to a workspace is finished.
    UNMOUNT_FINISHED = 37;
    // The status when the unmount of a volume to a workspace has failed.
    UNMOUNT_FAILED = 38;

    // The status when the operation to shutdown the workspace to initiate a backup is started.
    SHUTDOWN_FOR_BACKUP_STARTED = 39;
    // The status when the operation to shutdown the workspace to initiate a backup is finished.
    SHUTDOWN_FOR_BACKUP_FINISHED = 40;
    // The status when the operation to shutdown the workspace to initiate a backup has failed.
    SHUTDOWN_FOR_BACKUP_FAILED = 41;

    // The status when the operation to restart the workspace (after the backup operation was completed) is started.
    RESTART_AFTER_BACKUP_STARTED = 42;
    // The status when the operation to restart the workspace (after the backup operation was completed) is finished.
    RESTART_AFTER_BACKUP_FINISHED = 43;
    // The status when the operation to restart the workspace (after the backup operation was completed) has failed.
    RESTART_AFTER_BACKUP_FAILED = 44;

    // The status when the operation to backup the workspace is started.
    BACKUP_STARTED = 45;
    // The status when the operation to backup the workspace is finished.
    BACKUP_FINISHED = 46;
    // The status when the operation to backup the workspace has failed.
    BACKUP_FAILED = 47;

    // The status when the operation to restore the storage has started.
    RESTORE_STARTED = 48;
    // The status when the operation to restore the storage has finished.
    RESTORE_FINISHED = 49;
    // The status when the operation to restore the storage has failed.
    RESTORE_FAILED = 50;

    // The status when the operation to scale down for upgrading the storage has started.
    SCALE_DOWN_FOR_UPGRADE_STARTED = 51;
    // The status when the operation to scale down for upgrading the storage has finished.
    SCALE_DOWN_FOR_UPGRADE_FINISHED = 52;
    // The status when the operation to scale down for upgrading the storage has failed.
    SCALE_DOWN_FOR_UPGRADE_FAILED = 53;

    // The status when the operation to scale up after upgrading the storage has started.
    SCALE_UP_AFTER_UPGRADE_STARTED = 54;
    // The status when the operation to scale up after upgrading the storage has finished.
    SCALE_UP_AFTER_UPGRADE_FINISHED = 55;
    // The status when the operation to scale up after upgrading the storage has failed.
    SCALE_UP_AFTER_UPGRADE_FAILED = 56;

    // The status when the CDSW migration has started.
    MIGRATION_STARTED = 57;
    // The status when the CDSW migration has finished.
    MIGRATION_FINISHED = 58;
    // The status when the CDSW migration has failed.
    MIGRATION_FAILED = 59;

    // The status when the CDSW migration readiness check has started.
    MIGRATION_READINESS_CHECK_STARTED = 60;
    // The status when the CDSW migration readiness check has finished.
    MIGRATION_READINESS_CHECK_FINISHED = 61;
    // The status when the CDSW migration readiness check has failed.
    MIGRATION_READINESS_CHECK_FAILED = 62;

    // The status when the validate CDSW migration has started.
    VALIDATE_MIGRATION_STARTED = 63;
    // The status when the validate CDSW migration has finished.
    VALIDATE_MIGRATION_FINISHED = 64;
    // The status when the validate CDSW migration has failed.
    VALIDATE_MIGRATION_FAILED = 65;
  }
}

// The status of the Cloudera Machine Learning workspace backups.
message CDPCMLWorkspaceBackupStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;

    // The status when the backup of a workspace has started.
    CREATION_STARTED = 1;
    // The status when backup of a workspace has succeeded.
    CREATION_SUCCEEDED = 2;
    // The status when backup of a workspace has failed.
    CREATION_FAILED = 3;

    // The status when deletion of the backup snapshot has started.
    DELETION_STARTED = 4;
    // The status when backup of a workspace has been successfully deleted.
    DELETION_SUCCEEDED = 5;
    // The status when deletion of the backup snapshot has failed.
    DELETION_FAILED = 6;

    // The status when validation for creating backup request has started.
    VALIDATION_STARTED = 7;
    // The status when validation for creating backup request has succeeded.
    VALIDATION_SUCCEEDED = 8;
    // The status when validation for creating backup request has failed.
    VALIDATION_FAILED = 9;
    // The status when cancellation of a backup has started.
    ABORTING = 10;
    // The status when cancellation of a backup has succeeded.
    ABORTED = 11;
  }
}

// AWS metadata about the workspace when it was created or updated.
message CDPCMLAWSWorkspaceMetadata {
  // Requested min workers for the auto scaling workers group.
  int32 minWorkers = 1;
  // Requested max workers for the auto scaling workers group.
  int32 maxWorkers = 2;
  // Requested min gpu for the auto scaling gpu group.
  int32 minGpu = 3;
  // Requested max gpu for the auto scaling gpu group.
  int32 maxGpu = 4;
  // The instance type selected for the workers auto scaling group.
  string workerInstanceType = 5;
  // The instance type selected for the gpu auto scaling group.
  string gpuInstanceType = 6;
}

// Azure metadata about the workspace when it was created or updated.
message CDPCMLAzureWorkspaceMetadata {
  // Requested min workers for the auto scaling workers group.
  int32 minWorkers = 1;
  // Requested max workers for the auto scaling workers group.
  int32 maxWorkers = 2;
  // Requested min gpu for the auto scaling gpu group.
  int32 minGpu = 3;
  // Requested max gpu for the auto scaling gpu group.
  int32 maxGpu = 4;
  // The instance type selected for the workers auto scaling group.
  string workerInstanceType = 5;
  // The instance type selected for the gpu auto scaling group.
  string gpuInstanceType = 6;
}

// Backup Metadata about the workspace
message CDPCMLWorkspaceBackupMetadata {
  // The CDP workspace backup crn of the backup
  string backupCrn = 1;
  // The user-supplied backup name
  string backupName = 2;
}

// Restore Metadata about the workspace
message CDPCMLWorkspaceRestoreMetadata {
  // The backup crn from which workspace is restored
  string backupCrn = 1;
}

// Generated when a valid CDP CML workspace creation request has been made.
message CDPCMLWorkspaceRequested {
  // The CDP workspace CRN of the CML workspace.
  string crn = 1;
  // The CDP account ID of the CML workspace.
  string accountId = 2;
  // The user-supplied workspace name.
  string workspaceName = 3;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 4;
  // The CRN of the CML workspace's environment.
  string environmentCrn = 5;
  // The CML crud app version.
  string cdpdVersion = 6;
  // The CRN of the CML workspace's creator.
  string creatorCrn = 7;
  // metadata
  oneof metadata {
    // AWS specific metadata about the workspace.
    CDPCMLAWSWorkspaceMetadata cdpCMLAWSWorkspaceMetadata = 8;
    // AZURE specific metadata about the workspace.
    CDPCMLAzureWorkspaceMetadata cdpCMLAzureWorkspaceMetadata = 9;
  }
  // The CML workspace version deployed.
  string workspaceVersion = 10;
  // the request id of the create event
  string requestId = 11;
  // The user-defined tags for the workspace. These should not include automatically
  // added tags that are product-specific. The format of this is a map serialized
  // into a string as json. e.g.:   "tags": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string userTags = 12;
  // custom AMI, image catalog.
  oneof imageCatalog {
    // CRN of the image catalog.
    string imageCatalogCrn = 13;
    // Name of the image catalog.
    string imageCatalogName = 14;
  }
  // private cluster.
  bool privateCluster = 15;
  // Flag to identify if workspace is created by restoring from a backup
  bool isRestore = 16;
  // Backup metadata for workspace restore
  CDPCMLWorkspaceBackupMetadata cdpCMLWorkspaceBackupMetadata = 17;
  // Tenant type to identify the formfactor i.e. Saas or Paas
  string tenantType = 18;
  // Flag to identify if workspace is created to serve as model registry.
  bool isModelRegistry = 19;
}

// Generated when a CDP CML workspace's status changed.
message CDPCMLWorkspaceStatusChanged {
  // The CDP workspace CRN of the CML workspace.
  string crn = 1;
  // the CML workspace's status before the change.
  CDPCMLWorkspaceStatus.Value oldStatus = 2;
  // the CML workspace's status after the change.
  CDPCMLWorkspaceStatus.Value newStatus = 3;
  // A failure message for the CML workspace. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
  string fromVersion = 5;
  string toVersion = 6;
  // the request id to track the whole event.  Can be any event. (delete, update, create, install, etc)
  string requestId = 7;
  // the liftie cluster id to use when watching the cluster logs
  string liftieId = 8;
  // The user-defined tags for the workspace. These should not include automatically
  // added tags that are product-specific. The format of this is a map serialized
  // into a string as json. e.g.:   "tags": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string userTags = 9;
  // Restore metadata for workspace
  CDPCMLWorkspaceRestoreMetadata cdpCMLWorkspaceRestoreMetadata = 10;
  // Tenant type to identify the formfactor i.e. Saas or Paas
  string tenantType = 11;
  // added tags that are workspace reconfiguration specific. The format of this is a map serialized
  // into a string as json. e.g.:   "tags": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string updateTags = 12;
}

// Generated when a valid CDP CML workspace backup creation request has been made
message CDPCMLWorkspaceBackupRequested{
  // The CDP workspace crn of the CML Workspace
  string workspaceCrn = 1;
  // The CDP backup crn of the CML Workspace
  string backupCrn  = 2;
  // The user-supplied backup name
  string backupName = 3;
  // The CDP account ID of the CML workspace.
  string accountId = 4;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 5;
  // The CRN of the CML workspace's environment.
  string environmentCrn = 6;
  // The CML crud app version.
  string cmlVersion = 7;
  // The CML workspace version deployed.
  string workspaceVersion = 8;
  // the request id of the create event
  string requestId = 9;
  // Tenant type to identify the formfactor i.e. Saas or Paas
  string tenantType = 10;
}

// Generated when a CDP CML workspace backup status chnages
message CDPCMLWorkspaceBackupStatusChanged {
  // The CDP workspace backup crn of CML workspace
  string backupCrn = 1;
  // the CML workspace's status before the change.
  CDPCMLWorkspaceBackupStatus.Value oldStatus = 2;
  // the CML workspace's status after the change.
  CDPCMLWorkspaceBackupStatus.Value newStatus = 3;
  // NFS size of the the workspace Backup
  int64 nfsSize = 4;
  // A failure message for the CML workspace backup. This will only be set if newStatus is FAILED
  string failureReason = 5;
  // the request id to track the whole event.  Can be any event. (delete, update, create, install, etc)
  string requestId = 6;
  // Tenant type to identify the formfactor i.e. Saas or Paas
  string tenantType = 7;
}

// States of the nodes in a CDP CML workspace.
message CDPCMLWorkspaceNodeStatesHeartbeat {
  // List of states of each node in a  CDP CML workspace.
  repeated CDPCMLWorkspaceNodeState nodeStates = 1;
  // The CDP workspace CRN of the CML workspace.
  string workspaceCrn = 2;
  // The CDP account ID (tenantID) of the CML workspace.
  string accountId = 3;
  // The user-supplied workspace name.
  string workspaceName = 4;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 5;
  // The CRN of the CML workspace's environment.
  string environmentCrn = 6;
  // The CML crud app version.
  string cdpdVersion = 7;
  // The CML workspace version deployed.
  string workspaceVersion = 8;
}

message CDPCMLWorkspaceNodeState {
  // ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>.
  string providerId = 1;
  // Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration.
  bool unschedulable = 2;
  // The name of the node.
  string name = 3;
  // The pool (or nodegroup) this node belongs to.
  string agentPool = 4;
  // The architecture of the node's CPU.
  string architecture = 5;
  // The instance type of the node.
  string instanceType = 6;
  // The OS running on the node.
  string os = 7;
  // The region this node is running in.
  string region = 8;
  // The zone this node is running in.
  string zone = 9;
  // All labels present on this node.
  string labels = 10;
  // The conditions present on this node.
  CDPCMLWorkspaceNodeConditions nodeConditions = 11;
}

// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition.
message CDPCMLWorkspaceNodeConditions {
  // Indicates the Ready condition on this node.
  string ready = 1;
  // Indicates the NetworkUnavailable condition on this node.
  string networkUnavailable = 2;
  // Indicates the MemoryPressure condition on this node.
  string memoryPressure = 3;
  // Indicates the DiskPressure condition on this node.
  string diskPressure = 4;
  // Indicates the PIDPressure condition on this node.
  string pidPressure = 5;
}

// The status of a CDP Liftie managed cluster.
message CDPLiftieClusterStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when liftie is trying to create a kubernetes cluster.
    PROVISION_STARTED = 1;
    // The status when liftie is done creating a kubernetes cluster.
    PROVISION_FINISHED = 2;
    // The status when liftie failed to provision a kubernetes cluster.
    PROVISION_FAILED = 3;

    // The status when liftie is trying to install deployments in the kubernetes cluster.
    DEPLOYMENT_STARTED = 4;
    // The status when liftie is done installing deployments in the kubernetes cluster.
    DEPLOYMENT_FINISHED = 5;
    // The status when liftie failed to install deployments in the kubernetes cluster.
    DEPLOYMENT_FAILED = 6;

    // The status when liftie is trying to delete a running kubernetes cluster.
    DELETE_STARTED = 7;
    // The status when liftie is done deleting a kubernetes cluster.
    DELETE_FINISHED = 8;
    // The status when liftie failed to delete a kubernetes cluster.
    DELETE_FAILED = 9;

    // The status when lifite is trying to update a cluster.
    UPDATE_STARTED = 10;
    // The status when lifite is done updating a cluster.
    UPDATE_FINISHED = 11;
    // The status when lifite failed to update a cluster.
    UPDATE_FAILED = 12;

    // The status when lifite is trying to upgrade a cluster.
    UPGRADE_STARTED = 13;
    // The status when lifite is done upgrading a cluster.
    UPGRADE_FINISHED = 14;
    // The status when lifite failed to upgrade a cluster.
    UPGRADE_FAILED = 15;

    // The status when liftie is trying to rollback failed provisioned kubernetes cluster.
    ROLLBACK_STARTED = 16;
    // The status when liftie is done rolling back kubernetes cluster.
    ROLLBACK_FINISHED = 17;
    // The status when liftie failed to rollback the kubernetes cluster.
    ROLLBACK_FAILED = 18;

    // The status when liftie is trying to validate a request.
    VALIDATION_STARTED = 19;
    // The status when liftie is done validating the request.
    VALIDATION_FINISHED = 20;
    // The status when liftie failed to validate the request.
    VALIDATION_FAILED = 21;
  }
}

// Autoscaling InstanceGroup metadata about the cluster when it was created or updated.
message CDPLiftieInstanceGroupMetadata {
  // auto scaling instance group name.
  string instanceGroupName = 1;
  // Requested instance type for the auto scaling instance group.
  string instanceType = 2;
  // Requested instance tier (SPOT/ON_DEMAND) for the auto scaling instance group.
  string instanceTier = 3;
  // Requested min workers for the auto scaling instance group.
  int32 minWorkers = 4;
  // Requested max workers for the auto scaling instance group.
  int32 maxWorkers = 5;
  // Requested instance count
  int32 instanceCount = 6;
  // Requested instance root volume
  int32 rootVolume = 7;
  // Reqested instance group is single zone
  bool singleZone = 8;
  // Whether the instance group is using availability zones or availability sets. Used in conjunction with singleZone for Azure
  bool useAvailabilityZones = 9;
}

// Collection of Autoscaling Instance Groups metadata
message CDPLiftieInstanceGroups {
  repeated CDPLiftieInstanceGroupMetadata instanceGroup = 1;
}

// AWS metadata about the cluster when it was created or updated.
message CDPLiftieAWSMetadata {
  // AWS region
  string region = 1;
}

// Azure metadata about the cluster when it was created or updated.
message CDPLiftieAzureMetadata {
  // Azure availability zone
  string region = 1;
}

// GCP metadata about the cluster when it was created or updated.
message CDPLiftieGCPMetadata {
  string region = 1;
}

// Usage Event generated when a create/update/upgrade/delete request is made in Liftie
message CDPLiftieRequested {
  // The CDP actor CRN of the request.
  string actorCrn = 1;
  // The tenant of the request.
  string tenant = 2;
  // The CRN of the environment.
  string envCrn = 3;
  // The Liftie cluster Id.
  string clusterId = 4;
  // The Liftie app version.
  string liftieVersion = 5;
  // instance groups metadata
  CDPLiftieInstanceGroups cdpLiftieInstanceGroups = 6;
  // entitlements. The format of this is a map serialized
  // into a string as json. e.g.: "cdpLiftieAddons": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string cdpLiftieEntitlements = 7;
  // add-ons. The format of this is a map serialized
  // into a string as json. e.g.: "cdpLiftieAddons": "{\"key\":\"val\"}"
  string cdpLiftieAddons = 8;
  // metadata
  oneof metadata {
    // AWS specific metadata about the workspace.
    CDPLiftieAWSMetadata cdpLiftieAWSMetadata = 9;
    // AZURE specific metadata about the workspace.
    CDPLiftieAzureMetadata cdpLiftieAzureMetadata = 10;
    // GCP specific metadata about the workspace.
    CDPLiftieGCPMetadata cdpLiftieGCPMetadata = 11;
  }
  // the kubernetes version requested
  string kubernetesVersion = 12;
  // the request id of the create event
  string requestId = 13;
  // the experience that send the request, (CML, DEX, etc.)
  string experience = 14;
  // operation type (Create, Update, etc.)
  string opType = 15;
  // api type (Cluster, User, etc.)
  string apiType = 16;
  // the paying customer
  string customer = 17;
  // the cluster crn
  string clusterCrn = 18;
}

// Generated when a CDP Liftie cluster's status changed.
message CDPLiftieClusterStatusChanged {
  // Deprecated/Removed fields
  reserved 5;
  // The tenant of the request.
  string tenant = 1;
  // The CRN of the environment.
  string envCrn = 2;
  // The Liftie app version.
  string clusterId = 3;
  // The cloud provider
  string provider = 4;
  // the Liftie Cluster's status before the change.
  CDPLiftieClusterStatus.Value oldStatus = 6;
  // the Liftie Cluster's status after the change.
  CDPLiftieClusterStatus.Value newStatus = 7;
  // A failure message for the Liftie Cluster. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 8;
  // old kubernetes version.
  string oldVersion = 9;
  // new kubernetes version
  string newVersion = 10;
  // old instance groups.
  CDPLiftieInstanceGroups oldInstanceGroups = 11;
  // new instance groups.
  CDPLiftieInstanceGroups newInstanceGroups = 12;
  // the request id to track the whole event.  Can be any event. (delete, update, create, install, etc)
  string requestId = 13;
  // the experience that send the request, (CML, DEX, etc.)
  string experience = 14;
  // operation type (Create, Update, etc.)
  string opType = 15;
  // api type (Cluster, User, etc.)
  string apiType = 16;
  // the paying customer
  string customer = 17;
  // the cluster crn
  string clusterCrn = 18;
  // the customers entitlements
  repeated string entitlements = 19;
  // the workload crn
  string workloadCrn = 20;
  // the Liftie app version.
  string liftieVersion = 21;
}

// States of the nodes in a Liftie Cluster
message CDPLiftieClusterNodeStatesHeartbeat {
  // List of states of each node in a Liftie cluster.
  repeated CDPLiftieClusterNodeState nodeStates = 1;
  // The Compute Cluster CRN
  string clusterCrn = 2;
  // The Compute Cluster type (Dedicated or Shared)
  string clusterType = 3;
  // The CDP account ID (tenantID).
  string accountId = 4;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 5;
  // The CDP environment CRN.
  string environmentCrn = 6;
  // CDP Control Plane Liftie Version.
  string liftieVersion = 7;
  // The Kubernetes version.
  string kubernetesVersion = 8;
}

message CDPLiftieClusterNodeState {
  // ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>.
  string providerId = 1;
  // Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration.
  bool unschedulable = 2;
  // The name of the node.
  string name = 3;
  // The pool (or nodegroup) this node belongs to.
  string agentPool = 4;
  // The architecture of the node's CPU.
  string architecture = 5;
  // The instance type of the node.
  string instanceType = 6;
  // The OS running on the node.
  string os = 7;
  // The region this node is running in.
  string region = 8;
  // The zone this node is running in.
  string zone = 9;
  // All labels present on this node.
  repeated string labels = 10;
  // Node Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition.
  repeated CDPLiftieClusterNodeCondition nodeConditions = 11;
  // Is this a metered node
  bool metered = 12;
  // workload CRN for which this node is metered (optional, should NOT be set for liftie-infra, ml-infra)
  string workloadCRN = 13;
  // Node’s annotations
  repeated string annotations = 14;
}

// Node condition has all the details from kubernetes about a condition the node is in
message CDPLiftieClusterNodeCondition {
  // Indicates the condition
  string condition = 1;
  // Indicates the status of this condition
  string status = 2;
  // Indicates the last time an update was retrieved on this condition
  uint64 lastHeartbeatTime = 3;
  // Indicates the last time this condition changed
  uint64 lastTransitionTime = 4;
  // Reason for the conditions last transition
  string reason = 5;
  // Human readable string containing details about the last transition
  string message = 6;
}

// The status of a CDP request
message CDPRequestProcessingStep {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // First step of the request processing
    INIT = 1;
    // Last step of the request processing
    FINAL = 2;
    // Indicating that the event is a sync event
    SYNC = 3;
  }
}

// The status of a CDP environment
message CDPEnvironmentStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when CDP CP is trying to create an environment.
    CREATE_STARTED = 1;
    // The status when CDP CP is done creating an environment.
    CREATE_FINISHED = 2;
    // The status when CDP CP failed to provision an environment.
    CREATE_FAILED = 3;

    // The status when CDP CP is trying to delete an environment.
    DELETE_STARTED = 4;
    // The status when CDP CP is done deleting an environment.
    DELETE_FINISHED = 5;
    //  The status when CDP CP failed to delete an environment.
    DELETE_FAILED = 6;

    // The status when an environment is trying to suspend.
    SUSPEND_STARTED = 7;
    // The status when an environment is suspended.
    SUSPEND_FINISHED = 8;
    // The status when an environment failed to suspend.
    SUSPEND_FAILED = 9;

    // The status when an environment is trying to resume.
    RESUME_STARTED = 10;
    // The status when an environment completed resuming.
    RESUME_FINISHED = 11;
    // The status when an environment failed to resume.
    RESUME_FAILED = 12;
  }
}

// The status of a CDP FreeIPA
message CDPFreeIPAStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when CDP FreeIPA upscale is initiated.
    UPSCALE_STARTED = 1;
    // The status when CDP FreeIPA upscale has successfully finished.
    UPSCALE_FINISHED = 2;
    // The status when CDP FreeIPA upscale has failed.
    UPSCALE_FAILED = 3;

    // The status when CDP FreeIPA downscale is initiated.
    DOWNSCALE_STARTED = 4;
    // The status when CDP FreeIPA downscale has successfully finished.
    DOWNSCALE_FINISHED = 5;
    // The status when CDP FreeIPA downscale has failed.
    DOWNSCALE_FAILED = 6;

    // The status when CDP FreeIPA upgrade is initiated.
    UPGRADE_STARTED = 7;
    // The status when CDP FreeIPA upgrade has successfully finished.
    UPGRADE_FINISHED = 8;
    // The status when CDP FreeIPA upgrade has failed.
    UPGRADE_FAILED = 9;

    // The status when CDP FreeIPA vertical scale is initiated.
    VERTICAL_SCALE_STARTED = 10;
    // The status when CDP FreeIPA vertical scale has successfully finished.
    VERTICAL_SCALE_FINISHED = 11;
    // The status when CDP FreeIPA vertical scale has failed.
    VERTICAL_SCALE_FAILED = 12;

    // The status when a FreeIPA ccm upgrade operation is started.
    CCM_UPGRADE_STARTED = 13;
    // The status when a FreeIPA ccm upgrade operation completed.
    CCM_UPGRADE_FINISHED = 14;
    // The status when a FreeIPA ccm upgrade operation failed.
    CCM_UPGRADE_FAILED = 15;

    // The status when CDP FreeIPA creation started.
    CREATE_STARTED = 16;
    // The status when CDP FreeIPA creation finished.
    CREATE_FINISHED = 17;
    // The status when CDP FreeIPA creation failed.
    CREATE_FAILED = 18;

    // The status when CDP FreeIPA deletion started
    DELETE_STARTED = 19;
    // The status when CDP FreeIPA deletion finished.
    DELETE_FINISHED = 20;
    // The status when CDP FreeIPA deletion failed.
    DELETE_FAILED = 21;

    // The status when CDP FreeIPA is trying to suspend.
    SUSPEND_STARTED = 22;
    // The status when CDP FreeIPA is suspended.
    SUSPEND_FINISHED = 23;
    // The status when CDP FreeIPA failed to suspend.
    SUSPEND_FAILED = 24;

    // The status when CDP FreeIPA is trying to resume.
    RESUME_STARTED = 25;
    // The status when CDP FreeIPA completed resuming.
    RESUME_FINISHED = 26;
    // The status when CDP FreeIPA failed to resume.
    RESUME_FAILED = 27;
  }
}

// The status of a CDP Cluster
message CDPClusterStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when CDP CP is trying to create a cluster.
    CREATE_STARTED = 1;
    // The status when CDP CP is done creating a cluster.
    CREATE_FINISHED = 2;
    // The status when CDP CP failed to provision a cluster.
    CREATE_FAILED = 3;

    // The status when CDP CP is trying to delete a cluster.
    DELETE_STARTED = 4;
    // The status when CDP CP is done deleting a cluster.
    DELETE_FINISHED = 5;
    //  The status when CDP CP failed to delete a cluster.
    DELETE_FAILED = 6;

    // The status when a cluster is trying to suspend.
    SUSPEND_STARTED = 7;
    // The status when a cluster is suspended.
    SUSPEND_FINISHED = 8;
    // The status when a cluster failed to suspend.
    SUSPEND_FAILED = 9;

    // The status when a cluster is trying to resume.
    RESUME_STARTED = 10;
    // The status when a cluster completed resuming.
    RESUME_FINISHED = 11;
    // The status when a cluster failed to resume.
    RESUME_FAILED = 12;

    // The status when a cluster is trying to upgrade.
    UPGRADE_STARTED = 13;
    // The status when a cluster completed upgrading.
    UPGRADE_FINISHED = 14;
    // The status when a cluster failed to upgrade.
    UPGRADE_FAILED = 15;

    // The status when a cluster is trying to repair.
    REPAIR_STARTED = 16;
    // The status when a cluster completed repairing.
    REPAIR_FINISHED = 17;
    // The status when a cluster failed to repair.
    REPAIR_FAILED = 18;

    // The status when a cluster is trying to upscale.
    UPSCALE_STARTED = 19;
    // The status when a cluster completed upscaling.
    UPSCALE_FINISHED = 20;
    // The status when a cluster failed to upscale.
    UPSCALE_FAILED = 21;

    // The status when a cluster is trying to downscale.
    DOWNSCALE_STARTED = 22;
    // The status when a cluster completed downscaling.
    DOWNSCALE_FINISHED = 23;
    // The status when a cluster failed to downscale.
    DOWNSCALE_FAILED = 24;

    // The status when CB is trying to renew the public facing certificate of the cluster, Letsencrypt certificate
    RENEW_PUBLIC_CERT_STARTED = 25;
    // The status when CB is done renewing the public facing certificate of the cluster, Letsencrypt certificate
    RENEW_PUBLIC_CERT_FINISHED = 26;
    // The status when CB could not renew the public facing certificate of the cluster, Letsencrypt certificate
    RENEW_PUBLIC_CERT_FAILED = 27;

    // The status when CB is trying to renew the internal certificates of the cluster
    RENEW_CLUSTER_INTERNAL_CERT_STARTED = 28;
    // The status when CB is done renewing the internal certificates of the cluster
    RENEW_CLUSTER_INTERNAL_CERT_FINISHED = 29;
    // The status when CB could not renew the internal certificates of the cluster
    RENEW_CLUSTER_INTERNAL_CERT_FAILED = 30;

    // The status when CB is trying to do a backup of the cluster
    BACKUP_STARTED = 31;
    // The status when CB has finished backing up the cluster
    BACKUP_FINISHED = 32;
    // The status when CB could not do a backup of the cluster
    BACKUP_FAILED = 33;

    // The status when CB is trying to create a diagnostic bundle for the the cluster
    DIAGNOSTIC_COLLECTION_STARTED = 34;
    // The status when CB is done creating the diagnostic bundle for the the cluster
    DIAGNOSTIC_COLLECTION_FINISHED = 35;
    // The status when CB could not create the diagnostic bundle for the the cluster
    DIAGNOSTIC_COLLECTION_FAILED = 36;

    // The status when a cluster is trying to upscale via stop-start
    STOP_START_UPSCALE_STARTED = 37;
    // The status when a cluster has completed upscale via stop-start
    STOP_START_UPSCALE_FINISHED = 38;
    // The status when a cluster failed to upscale via stop-start
    STOP_START_UPSCALE_FAILED = 39;

    // The status when a cluster is trying to downscale via stop-start
    STOP_START_DOWNSCALE_STARTED = 40;
    // The status when a cluster has completed downscale via stop-start
    STOP_START_DOWNSCALE_FINISHED = 41;
    // The status when a cluster failed to downscale via stop-start
    STOP_START_DOWNSCALE_FAILED = 42;

    // The status when a datalake trying to resize
    DATALAKE_RESIZE_STARTED = 43;
    // The status when a datalake resize finished
    DATALAKE_RESIZE_FINISHED = 44;
    // The status when a datalake resize failed
    DATALAKE_RESIZE_FAILED = 45;

    // The status when a cluster validate and prepare upgrade operation is started.
    UPGRADE_PREPARE_STARTED = 46;
    // The status when a cluster validate and prepare upgrade operation completed.
    UPGRADE_PREPARE_FINISHED = 47;
    // The status when a cluster validate and prepare upgrade operation failed.
    UPGRADE_PREPARE_FAILED = 48;

    // The status when CDP Cluster vertical scale is initiated.
    VERTICAL_SCALE_STARTED = 49;
    // The status when CDP Cluster vertical scale has successfully finished.
    VERTICAL_SCALE_FINISHED = 50;
    // The status when CDP Cluster vertical scale has failed.
    VERTICAL_SCALE_FAILED = 51;

    // The status when a cluster ccm upgrade operation is started.
    CCM_UPGRADE_STARTED = 52;
    // The status when a cluster ccm upgrade operation completed.
    CCM_UPGRADE_FINISHED = 53;
    // The status when a cluster ccm upgrade operation failed.
    CCM_UPGRADE_FAILED = 54;

    // The status when the database server upgrade is started for a DL / DH
    DATABASE_UPGRADE_STARTED = 55;
    // The status when the database server upgrade is finished for a DL / DH
    DATABASE_UPGRADE_FINISHED = 56;
    // The status when the database server upgrade fails for a DL / DH
    DATABASE_UPGRADE_FAILED = 57;

    // The status when a salt update operation on the cluster is started
    SALT_UPDATE_STARTED = 58;
    // The status when a salt update operation on the cluster is finished
    SALT_UPDATE_FINISHED = 59;
    // The status when a salt update operation on the cluster is failed
    SALT_UPDATE_FAILED = 60;
  }
}

message CDPOperationDetails {
  // The CDP account id of the event
  string accountId = 1;
  // The CRN for the resource
  string resourceCrn = 2;
  // Name of the resource
  string resourceName = 3;
  // User CRN initiated this event (it might be internal actor)
  string initiatorCrn = 4;
  // Version of the application that created this event
  string applicationVersion = 5;
  // Request processing type
  CDPRequestProcessingStep.Value cdpRequestProcessingStep = 6;
  // Flow UUID, to make it easy to identify which flow has triggered this event
  string flowId = 7;
  // Flow Chain UUID, to make it easy to identify which flowchain has triggered this event
  string flowChainId = 8;
  // Flow state when this event is written
  string flowState = 9;
  // Correlation ID to correlate events written together
  string correlationId = 10;
  // Cloud provider identifier
  CDPEnvironmentsEnvironmentType.Value environmentType = 11;
}

message CDPEnvironmentDetails {
  // Cloud provider identifier
  CDPEnvironmentsEnvironmentType.Value environmentType = 1;
  // Region of the deployment
  string region = 2;
  // Number of availability zones used in the environment
  int32 numberOfAvailabilityZones = 3;
  // Number of availability zones used in the environment
  string availabilityZones = 4;
  // Network metadata
  CDPNetworkDetails networkDetails = 5;
  // AWS specific details of the environment
  CDPEnvironmentAwsDetails awsDetails = 6;
  // Azure specific details of the environment
  CDPEnvironmentAzureDetails azureDetails = 7;
  // The user-defined tags for the environment. These should not include automatically
  // added tags that are product-specific. The format of this is a map serialized
  // into a string as json. e.g.:   "tags": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string userTags = 8;
  // GCP specific details of the environment
  CDPEnvironmentGcpDetails gcpDetails = 9;
  // Credential details of the environment
  CDPCredentialDetails credentialDetails = 10;
}

// CDP FreeIPA details closely related to the CDP Environment
message CDPFreeIPADetails {
  // Number of nodes
  int32 nodes = 1;
  // Shows whether spot is used for any FreeIPA nodes
  bool spot = 2;
  // multi az for freeipa
  bool multiAz = 3;
}

// Azure specific environment details
message CDPEnvironmentAzureDetails {
  // True if user provides a resource group, allowing CDP to create resources only within the specified resource group
  bool singleResourceGroup = 1;
  // True if user provides encryption key URL to encrypt Azure managed disks with CMK
  bool resourceEncryptionEnabled = 2;
}

// GCP specific environment details
message CDPEnvironmentGcpDetails {
  // True if user provides encryption key URL to encrypt GCP managed disks with CMEK
  bool resourceEncryptionEnabled = 1;
}

// AWS specific environment details
message CDPEnvironmentAwsDetails {
  // True if user provides encryption key ARN to encrypt AWS EBS volumes with CMEK
  bool resourceEncryptionEnabled = 1;
}

message CDPEnvironmentTelemetryFeatureDetails {
  // Workload analytics is enabled on this environment
  string workloadAnalytics = 1;
  // Cluster log collection is enabled on this environment
  string clusterLogsCollection = 2;
}

message CDPProxyDetails {
  // Shows whether a proxy is used
  bool proxy = 1;
  // Shows whether it is http or https
  string protocol = 2;
  // Shows whether NONE or BASIC auth
  string authentication = 3;
}

// Show services for which the customer has provided their own DNS zones
message CDPOwnDnsZones {
  // Whether DNS is provided for the postgres by the customer or not
  bool postgres = 1;
}

message CDPNetworkDetails {
  // Whether the network is created by CDP CP or by the customer
  string networkType = 1;
  // How CDP CP connects to the environment
  string connectivity = 2;
  // How many public subnets are used
  int32 numberPublicSubnets = 3;
  // How many private subnets are used
  int32 numberPrivateSubnets = 4;
  // Private endpoints are created for this particular environment
  string serviceEndpointCreation = 5;
  // Metadata around what type of proxy is used in this environment
  CDPProxyDetails proxyDetails = 6;
  // Public Endpoint Access Gateway (aka semi-private networks) are enabled or not
  string publicEndpointAccessGateway = 7;
  // Whether the security groups are created by CDP CP or by the customer
  string securityAccessType = 8;
  // How CDP using tls
  string controlPlaneAndCCMAgentConnectionSecurity = 9;
  // Generated domain name
  string domain = 10;
  // If the customer is using their own DNS zones for some services
  CDPOwnDnsZones ownDnsZones= 11;
  // How many public loadbalancer subnets are used
  int32 numberPublicLoadBalancerSubnets = 12;
  // How many private loadbalancer subnets are used
  int32 numberPrivateLoadBalancerSubnets = 13;
}

message CDPCredentialDetails {
  // The type of the used credential
  CDPCredentialType.Value credentialType = 1;
}

// Generated when Environment creation has been requested or finished
message CDPEnvironmentRequested {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Environment metadata
  CDPEnvironmentDetails environmentDetails = 2;
  // Data collection metadata
  CDPEnvironmentTelemetryFeatureDetails telemetryFeatureDetails = 3;
  // FreeIPA metadata
  CDPFreeIPADetails freeIPA = 4;
}

// Generated when Environment status has changed
message CDPEnvironmentStatusChanged {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // The environment's status before the change.
  CDPEnvironmentStatus.Value oldStatus = 2;
  // The environment's status after the change.
  CDPEnvironmentStatus.Value newStatus = 3;
  // Describe the reason of the failure if any
  string failureReason = 4;
  // Environment metadata
  CDPEnvironmentDetails environmentDetails = 5;
  // Data collection metadata
  CDPEnvironmentTelemetryFeatureDetails telemetryFeatureDetails = 6;
  // FreeIPA metadata
  CDPFreeIPADetails freeIPA = 7;
}

message CDPFreeIPAShape {
  // Number of nodes
  int32 nodes = 1;
  // Detailed node count per host group
  string hostGroupNodeCount = 2;
}

message CDPFreeIPAStatusDetails {
  // Status of the stack
  string stackStatus = 1;
  // Detailed status of the stack
  string stackDetailedStatus = 2;
  // Status reason of the stack
  string stackStatusReason = 3;
}

// Extended details of a CDP FreeIPA
message CDPFreeIPAExtendedDetails {
  // Shape of the freeIPA
  CDPFreeIPAShape freeIPAShape = 1;
  // Image details
  CDPImageDetails imageDetails = 2;
  // A CDP vertical scale status.
  CDPVerticalScaleDetails cdpVerticalScaleDetails = 3;
}

// Generated when FreeIPA status has changed
message CDPFreeIPAStatusChanged {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // FreeIPA extended details
  CDPFreeIPAExtendedDetails freeIPADetails = 2;
  // Image details
  CDPFreeIPAStatusDetails statusDetails = 3;
  // Environment Crn
  string environmentCrn = 4;
  // The environment's status after the change.
  CDPFreeIPAStatus.Value newStatus = 5;
}

message CDPImageDetails {
  // CDP Image ID
  string imageId = 1;
  // Image catalog name
  string imageCatalog = 2;
  // Image catalog url
  string imageCatalogUrl = 3;
  // OS type
  string osType = 4;
}

message CDPClusterShape {
  // Cluster template
  string clusterTemplateName = 1;
  // Number of nodes
  int32 nodes = 2;
  // Detailed node count per host group
  string hostGroupNodeCount = 3;
  // Definition details in a json format
  string definitionDetails = 4;
  // Indicating whether Temporary Storage is used in the cluster
  bool temporaryStorageUsed = 5;
  // Cluster template details in JSON format
  string clusterTemplateDetails = 6;
  // Cluster template overrides in JSON format
  string clusterTemplateOverridesDetails = 7;
}

// The Shape of the Data lake.
message CDPDatalakeShapeType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // LIGHT DUTY
    LIGHT_DUTY = 1;
    // MEDIUM DUTY.
    MEDIUM_DUTY_HA = 2;
    // MICRO DUTY.
    MICRO_DUTY = 3;
    // CUSTOM
    CUSTOM = 4;
  }
}

// The type the operation.
message CDPDatalakeOperationType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Backup Operation
    BACKUP = 1;
    // Restore Operation
    RESTORE = 2;
  }
}

message CDPVersionDetails {
  // Cloudera Runtime Version
  string crVersion = 1;
  // CM Version
  string cmVersion = 2;
  // CDPD Version
  string cdpdVersion = 3;
  // Salt Version
  string saltVersion = 4;
  // Date when the OS was updated last time
  string osPatchLevel = 5;
  // Key value pairs of every version what we know
  string all = 6;
  // Java Version
  string javaVersion = 7;
  // Java Version forced to be used
  bool javaVersionForced = 8;
}

message CDPClusterDetails {
  // Shape of the cluster
  CDPClusterShape clusterShape = 1;
  // Version details
  CDPVersionDetails versionDetails = 2;
  // Image details
  CDPImageDetails imageDetails = 3;
  // The user-defined tags for the cluster. These should not include automatically
  // added tags that are product-specific. The format of this is a map serialized
  // into a string as json. e.g.:   "tags": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string userTags = 4;
  // The cluster specific variant e.g.: in case of AWS it can be AWS or AWS_NATIVE
  CDPCloudProviderVariantType.Value cloudProviderVariant = 5;
  // multi az for freeipa
  bool multiAz = 6;
  // Application defined (product specific) tags for the cluster. The format of this is a map serialized
  // into a string as json. e.g.:   "tags": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string applicationTags = 7;
  // A CDP vertical scale status.
  CDPVerticalScaleDetails cdpVerticalScaleDetails = 8;
  // If the given Datalake is going to use external DB or not.
  bool usingExternalDatabase = 10;
  // If the SSL connection is being used upon the database communication.
  bool sslEnabled = 11;
}

message CDPStatusDetails {
  // Status of the stack
  string stackStatus = 1;
  // Detailed status of the stack
  string stackDetailedStatus = 2;
  // Status reason of the stack
  string stackStatusReason = 3;
  // Status of the cluster
  string clusterStatus = 4;
  // Status reason of the cluster
  string clusterStatusReason = 5;
}

message CDPDatalakeFeatures {
  // Ranger Authorization feature tracking
  CDPRaz raz = 1;
}

message CDPRaz {
  // Status whether RAZ is enabled for this cluster ot not
  string status = 1;
}

// Generated when Datalake creation has been requested or finished
message CDPDatalakeRequested {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Environment Crn
  string environmentCrn = 2;
  // Cluster details for Datalake
  CDPClusterDetails clusterDetails = 3;
  // Feature tracking for DL
  CDPDatalakeFeatures features = 4;
}

// Generated when Datalake status has changed
message CDPDatalakeStatusChanged {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // The datalake's status before the change.
  CDPClusterStatus.Value oldStatus = 2;
  // The datalake's status after the change.
  CDPClusterStatus.Value newStatus = 3;
  // Describes the detailed status of the stack and the cluster of the datalake
  CDPStatusDetails statusDetails = 4;
  // Environment Crn
  string environmentCrn = 5;
  // Cluster details for Datalake
  CDPClusterDetails clusterDetails = 6;
  // Feature tracking for DL
  CDPDatalakeFeatures features = 7;
}

// Generated when Datahub creation has been requested or finished
message CDPDatahubRequested {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Environment Crn
  string environmentCrn = 2;
  // Details for datahub
  CDPClusterDetails clusterDetails = 3;
}

// Generated when Datahub status has changed
message CDPDatahubStatusChanged {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // The datahub's status before the change.
  CDPClusterStatus.Value oldStatus = 2;
  // The datahub's status after the change.
  CDPClusterStatus.Value newStatus = 3;
  // Describes the detailed status of the stack and the cluster of the datahub
  CDPStatusDetails statusDetails = 4;
  // Environment Crn
  string environmentCrn = 5;
  // Cluster details for Datahub
  CDPClusterDetails clusterDetails = 6;
}

message CDPSyncDetails {
  // Status of the stack
  string status = 1;
  // Detailed status of the stack
  string detailedStatus = 2;
  // The timestamp of the start of the cluster creation
  uint64 clusterCreationStarted = 3;
  // The timestamp of the finish of the cluster creation
  uint64 clusterCreationFinished = 4;
  // The database type of the cluster
  string databaseType = 5;
}

// Generated periodically for Datalake clusters
message CDPDatalakeSync {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Additional metadata about the cluster
  CDPSyncDetails syncDetails = 2;
  // Details for datalake
  CDPClusterDetails clusterDetails = 3;
  // Describes the detailed status of the stack and the cluster of the datalake
  CDPStatusDetails statusDetails = 4;
  // Feature tracking for DL
  CDPDatalakeFeatures features = 5;
}

// Generated periodically for Datahub clusters
message CDPDatahubSync {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Additional metadata about the cluster
  CDPSyncDetails syncDetails = 2;
  // Details for datahub
  CDPClusterDetails clusterDetails = 3;
  // Describes the detailed status of the stack and the cluster of the datahub
  CDPStatusDetails statusDetails = 4;
}

// Supported types of catalog artifacts in DF.
message CDPDFCatalogArtifactType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // NiFi Flow
    FLOW = 1;
  }
}

message CDPDFEventSource {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // A value indicating the event was initiated from the UI (or the REST API)
    UI = 1;
    // A value indicating the event was initiated from the CLI (or the gRPC API)
    CLI = 2;
  }
}

// Generated periodically when users upload/create a new catalog artifact in DF
message CDPDFCatalogArtifactCreated {
  // The id of the artifact created.
  string artifactId = 1;
  // The CDP account ID.
  string accountId = 2;
  // The crn of the catalog artifact.
  string crn = 3;
  // The type of artifact created
  CDPDFCatalogArtifactType.Value type = 4;
  // The source API that triggered the event.
  CDPDFEventSource.Value eventSource = 5;
}

// Generated periodically when users delete a catalog artifact in DF
message CDPDFCatalogArtifactDeleted {
  // The id of the artifact deleted.
  string artifactId = 1;
  // The CDP account ID.
  string accountId = 2;
  // The crn of the catalog artifact.
  string crn = 3;
  // The type of artifact deleted
  CDPDFCatalogArtifactType.Value type = 4;
  // The source API that triggered the event.
  CDPDFEventSource.Value eventSource = 5;
}

// Generated periodically when users upload/create a new version of a catalog artifact in DF
message CDPDFCatalogArtifactVersionCreated {
  // The id of the catalog artifact version.
  string versionId = 1;
  // The id of the catalog artifact associated with the version.
  string artifactId = 2;
  // The crn of the catalog artifact version.
  string crn = 3;
  // The CDP account ID of the version.
  string accountId = 4;
  // The source API that triggered the event.
  CDPDFEventSource.Value eventSource = 5;
}

// Generated periodically when users delete a version of a catalog artifact in DF
message CDPDFCatalogArtifactVersionDeleted {
  // The id of the catalog artifact version.
  string versionId = 1;
  // The id of the catalog artifact associated with the version.
  string artifactId = 2;
  // The crn of the catalog artifact version.
  string crn = 3;
  // The CDP account ID of the version.
  string accountId = 4;
  // The source API that triggered the event.
  CDPDFEventSource.Value eventSource = 5;
}

// The various lifecycle actions that can be taken on flow designs.
message CDPDFFlowDesignAction {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // A value indicating the flow design was created.
    CREATED = 1;
    // A value indicating the flow design was opened in the designer.
    OPENED = 2;
    // A value indicating the flow design was closed from the designer.
    CLOSED = 3;
    // A value indicating the flow design was deleted.
    DELETED = 4;
    // A value indicating the flow design was published to the flow catalog.
    PUBLISHED = 5;
  }
}

// Generated when users interact with flow designs
message CDPDFFlowDesignLifecycle {
  // The id of the flow design.
  string flowDesignerId = 1;
  // The lifecycle action taken on the flow design.
  CDPDFFlowDesignAction.Value action = 2;
  // The crn of the data flow service.
  string dfServiceCrn = 3;
  // The id of the data flow service.
  string dfServiceId = 4;
  // The crn of the CDP environment where the flow design was created.
  string environmentCrn = 5;
  // The CDP account ID of the version.
  string accountId = 6;
  // Username of the actor that created the flow.
  string username = 7;
  // Optional. Actor crn publishing the flow design to the flow catalog. Should only have a value for events coming from the control plane (CDPDFFlowDesignAction.PUBLISHED action)
  string actorCrn = 8;
}

// The status of a CDP DataFlow service.
message CDPDFServiceStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status of a df service that is being requested to enable.
    ENABLE_REQUESTED = 1;
    // The status of a df service that is being enabled.
    ENABLE_IN_PROGRESS = 2;
    // The status of a df service that is available for use.
    ENABLE_COMPLETED = 3;
    // The status of a df service that failed to enable.
    ENABLE_FAILED = 4;
    // The status of a df service that is being requested to enable.
    DISABLE_REQUESTED = 5;
    // The status of a df service that is being disabled.
    DISABLE_IN_PROGRESS = 6;
    // The status of a df service that is successfully disabled.
    DISABLE_COMPLETED = 7;
    // The status of a df service that failed to disable.
    DISABLE_FAILED = 8;
    // The status of a df service that is being requested to update.
    UPDATE_REQUESTED = 9;
    // The status of a df service that is being updated.
    UPDATE_IN_PROGRESS = 10;
    // The status of a df service that failed to update.
    UPDATE_FAILED = 11;
    // The status of a df service was updated successfully.
    UPDATE_COMPLETED = 12;
    // The status of a df service that is being requested to reset.
    RESET_REQUESTED = 13;
    // The status of a df service reset is in progress.
    RESET_IN_PROGRESS = 14;
    // The status of a df service that was reset
    RESET_COMPLETED = 15;
    // The status of a df service that failed to reset.
    RESET_FAILED = 16;
    // The status of a df service that became orphaned (df service enabled)
    ORPHANED = 17;
    // The status of a df service that became orphaned (df service not enabled)
    ORPHANED_NOT_ENABLED = 18;
    // The status of a df service that became unorphaned
    UNORPHANED = 19;
    // The status of a df service that is being requested to upgrade.
    UPGRADE_REQUESTED = 20;
    // The status of a df service that failed to upgrade.
    UPGRADE_FAILED = 21;
    // The status of a df service was upgraded successfully.
    UPGRADE_COMPLETED = 22;
    // The status of a df service that has k8s version upgrade in progress
    UPGRADE_K8S_VERSION_IN_PROGRESS = 23;
    // The status of a df service that has workload components upgrade in progress
    UPGRADE_WORKLOAD_IN_PROGRESS = 24;
    // The status of a df service that is being rolled back.
    ROLLBACK_IN_PROGRESS = 25;
    // The status of a df service that has deployments upgrade in progress
    UPGRADE_DEPLOYMENTS_IN_PROGRESS = 26;
    // The status of a df service that indicates that the PEM certificate renewal was requested
    PEM_CERTIFICATE_RENEWAL_REQUESTED = 27;
    // The status of a df service that indicates that the PEM certificate renewal is in progress
    PEM_CERTIFICATE_RENEWAL_IN_PROGRESS = 28;
    // The status of a df service that indicates that the PEM certificate renewal failed
    PEM_CERTIFICATE_RENEWAL_FAILED = 29;
    // The status of a df service that indicates that the PEM certificate renewal succeeded
    PEM_CERTIFICATE_RENEWAL_SUCCEEDED = 30;
    // The status of a df service where rollback succeeded
    ROLLBACK_COMPLETED = 31;
    // The status of a df service where rollback failed
    ROLLBACK_FAILED = 32;
    // The status of a df service where aborting upgrade is in progress
    ABORT_UPGRADE_IN_PROGRESS = 33;
    // The status of a df service where aborting upgrade succeeded
    ABORT_UPGRADE_COMPLETED = 34;
    // The status of a df service where aborting upgrade failed
    ABORT_UPGRADE_FAILED = 35;
    // The status that indicates that the pre-flight validation was requested before the df service enablement
    ENABLE_VALIDATION_IN_PROGRESS = 36;
  }
}

// Common items among all async workflow executions of DF.
message CDPDFOperationDetails {
  // The id of the resource that is the subject of the operation.
  string id = 1;
  // The crn of the resource that is the subject of the operation.
  string crn = 2;
  // The CDP account ID.
  string accountId = 3;
  // The workflow id associated with the operation
  string workflowId = 4;
  // The run id of workflow execution.
  string runId = 5;
  // The source API that triggered the event.
  CDPDFEventSource.Value eventSource = 6;
}

// Generated when DataFlow Service enable, update, or disable has been requested
message CDPDFServiceRequested {
  // Operation metadata
  CDPDFOperationDetails operationDetails = 1;
  // The crn of the CDP environment being enabled for DF.
  string environmentCrn = 2;
  // The environment type / cloud provider.
  CDPEnvironmentsEnvironmentType.Value environmentType = 3;
  // The instance type of nodes used in the DF service
  string instanceType = 4;
  // Minimum number of nodes.
  int32 minNodes = 5;
  // Maximum number of nodes to scale to.
  int32 maxNodes = 6;
  // Version of k8s requested to be provisioned.
  string k8sServerVersion = 7;
  // Requested version of DataFlow service.
  string version = 8;
  // Is the load balancer publicly available on the internet?
  bool publicEndpoint = 9;
  // Is K8S API access restricted by ip ranges (CIDR)?
  bool accessRestricted = 10;
  // The initial status of the df service. Should be ENABLE_REQUESTED, UPDATE_REQUESTED, or DISABLE_REQUESTED.
  CDPDFServiceStatus.Value status = 11;
  // Is the load balancer (if configured) restricting access by ip ranges?
  bool loadBalancerAccessRestricted = 12;
  // CRN of the actor that created the request
  string actorCrn = 13;
  // Is private cluster
  bool privateCluster = 14;
  // Is validation skipped for enable and update requests
  bool runValidations = 15;
}

message CDPDFServiceStatusChanged {
  // Operation metadata
  CDPDFOperationDetails operationDetails = 1;
  // The status of the df service before the change
  CDPDFServiceStatus.Value oldStatus = 2;
  // The status of the df service after the change
  CDPDFServiceStatus.Value newStatus = 3;
  // A failure message for the df service. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
  // CRN of Cloudbreak environment
  string environmentCrn = 5;
}

// Generated when DataFlow Service upgrade has been requested
message CDPDFServiceUpgradeRequested {
  // Operation metadata
  CDPDFOperationDetails operationDetails = 1;
  // The crn of the CDP environment being enabled for DF.
  string environmentCrn = 2;
  // The environment type / cloud provider.
  CDPEnvironmentsEnvironmentType.Value environmentType = 3;
  // The instance type of nodes used in the DF service
  string instanceType = 4;
  // Minimum number of nodes.
  int32 minNodes = 5;
  // Maximum number of nodes to scale to.
  int32 maxNodes = 6;
  // The new k8s version requested to be upgraded to.
  string newK8sServerVersion = 7;
  // The k8s version that df service is on before the upgrade is requested.
  string oldK8sServerVersion = 8;
  // The new requested version of DataFlow service to be upgraded.
  string newVersion = 9;
  // The version that df service is on before the upgrade is requested.
  string oldVersion = 10;
  // Is the load balancer publicly available on the internet?
  bool publicEndpoint = 11;
  // Is K8S API access restricted by ip ranges (CIDR)?
  bool accessRestricted = 12;
  // The initial status of the df service. Should be UPGRADE_REQUESTED.
  CDPDFServiceStatus.Value status = 13;
  // Is the load balancer (if configured) restricting access by ip ranges?
  bool loadBalancerAccessRestricted = 14;
  // CRN of the actor that created the request
  string actorCrn = 15;
  // Is validation skipped for upgrade request
  bool runValidations = 16;
}

message CDPDFServiceUpgradeStatusChanged {
  // Operation metadata
  CDPDFOperationDetails operationDetails = 1;
  // The status of the df service before the change
  CDPDFServiceStatus.Value oldStatus = 2;
  // The status of the df service after the change
  CDPDFServiceStatus.Value newStatus = 3;
  // A failure message for the df service. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
  // CRN of Cloudbreak environment
  string environmentCrn = 5;
  // The new requested version of DataFlow service to be upgraded.
  string newVersion = 6;
  // The version that df service is on before the upgrade is requested.
  string oldVersion = 7;
  // The new k8s version requested to be upgraded to.
  string newK8sServerVersion = 8;
  // The k8s version that df service is on before the upgrade is requested.
  string oldK8sServerVersion = 9;
}

// The status of a CDP Deployment.
message CDPDFDeploymentStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status of a deployment that is being requested.
    CREATE_REQUESTED = 1;
    // The status of a deployment.
    CREATE_IN_PROGRESS = 2;
    // The status of a deployment that is available for use.
    CREATE_COMPLETED = 3;
    // The status of a deployment that failed.
    CREATE_FAILED = 4;
    // The status of a deployment that is being requested.
    TERMINATE_REQUESTED = 5;
    // The status of a deployment that is being terminated.
    TERMINATE_IN_PROGRESS = 6;
    // The status of a deployment that is successfully terminated.
    TERMINATE_COMPLETED = 7;
    // The status of a deployment that failed to terminate.
    TERMINATE_FAILED = 8;
    // The status of a deployment that is being requested to terminate.
    UPDATE_REQUESTED = 9;
    // The status of a deployment that is being updated.
    UPDATE_IN_PROGRESS = 10;
    // The status of a deployment was updated successfully.
    UPDATE_COMPLETED = 11;
    // The status of a deployment that failed to update.
    UPDATE_FAILED = 12;
    // The status of a deployment that is updating the version of NiFi.
    NIFI_VERSION_UPDATE_REQUESTED = 13;
    // The status of a deployment that is updating the version of NiFi.
    NIFI_VERSION_UPDATE_IN_PROGRESS = 14;
    // The status of a deployment that has updated the version of NiFi successfully.
    NIFI_VERSION_UPDATE_COMPLETED = 15;
    // The status of a deployment that has failed to update the version of NiFi.
    NIFI_VERSION_UPDATE_FAILED = 16;
    // The status of a deployment that is cancelling an update the version of NiFi.
    CANCEL_NIFI_VERSION_UPDATE_REQUESTED = 17;
    // The status of a deployment that is cancelling an update the version of NiFi.
    CANCEL_NIFI_VERSION_UPDATE_IN_PROGRESS = 18;
    // The status of a deployment that has cancelled the update to of NiFi.
    CANCEL_NIFI_VERSION_UPDATE_COMPLETED = 19;
    // The status of a deployment that has failed to cancel the update the version of NiFi.
    CANCEL_NIFI_VERSION_UPDATE_FAILED = 20;
    // The status of a deployment that is suspending the running NiFi flow.
    SUSPEND_FLOW_REQUESTED = 21;
    // The status of a deployment that is suspending the running NiFi flow.
    SUSPEND_FLOW_IN_PROGRESS = 22;
    // The status of a deployment that successfully suspended the running NiFi flow.
    SUSPEND_FLOW_COMPLETED = 23;
    // The status of a deployment that failed to suspend the running NiFi flow.
    SUSPEND_FLOW_FAILED = 24;
    // The status of a deployment that is starting the NiFi flow.
    START_FLOW_REQUESTED = 25;
    // The status of a deployment that is starting the NiFi flow.
    START_FLOW_IN_PROGRESS = 26;
    // The status of a deployment that successfully started the NiFi flow.
    START_FLOW_COMPLETED = 27;
    // The status of a deployment that failed to start the NiFi flow.
    START_FLOW_FAILED = 28;
    // The status of deployment that has upgrade initiated.
    UPGRADE_REQUESTED= 33;
    // The status of deployment that is upgrading.
    UPGRADE_IN_PROGRESS = 29;
    // The status of a deployment that successfully completed upgrading.
    UPGRADE_COMPLETED = 30;
    // The status of a deployment that failed to upgrade.
    UPGRADE_FAILED = 31;
    // The status of a deployment that is being rolled back.
    ROLLBACK_IN_PROGRESS = 32;
    // The status of a deployment that has rollback initiated.
    ROLLBACK_REQUESTED = 34;
    // The status of a deployment that is failed to roll back.
    ROLLBACK_FAILED = 35;
    // The status of a deployment that is successfully rolled back.
    ROLLBACK_COMPLETED = 36;
  }
}

message CDPDFDeploymentRequested {
  // Operation metadata
  CDPDFOperationDetails operationDetails = 1;
  // The crn of the CDP environment where the deployment is to land.
  string environmentCrn = 2;
  // The number of parameters defined for the deployment
  int32 parameterCount = 3;
  // The number of KPIs monitored in the deployment
  int32 kpiCount = 4;
  // Is autoscaling of the NiFi cluster enabled?
  bool autoscalingEnabled = 5;
  // Minimum number of nodes.
  int32 minNodes = 6;
  // Maximum number of nodes to scale to.
  int32 maxNodes = 7;
  // The node type selected (small, medium, large, x-large).
  string nodeType = 8;
  // The version of NiFi to run as part of the deployment
  string nifiVersion = 9;
  // The initial status of the Deployment. Should be one of the ***_REQUESTED statuses.
  CDPDFDeploymentStatus.Value status = 10;
  // Does the deployment have asset references?
  bool assetReferences = 11;
  // Is this a deployment of a ReadyFlow?
  bool readyFlow = 12;
  // CRN of the flow version
  string flowVersionCrn = 13;
  // Deployment name
  string deploymentName = 14;
  // Does the deployment have custom nar configuration?
  bool customNarConfiguration = 15;
  // Does the deployment support inbound connections?
  bool supportInboundConnection = 16;
  // Is this deployment a test session?
  bool testSession = 17;
  // Optional identifier of the flow design. Should only ever have a value if testSession is true.
  string flowDesignerId = 18;
  // Username of the actor that is requesting the deployment. Since this is a workload event, actorCrn is not available.
  string username = 19;
  // The crn of the DataFlow Service.
  string dataFlowServiceCrn = 20;
}

message CDPDFDeploymentStatusChanged {
  // Operation metadata
  CDPDFOperationDetails operationDetails = 1;
  // The status of the deployment before the change
  CDPDFDeploymentStatus.Value oldStatus = 2;
  // The status of the deployment after the change
  CDPDFDeploymentStatus.Value newStatus = 3;
  // A failure message for the df service. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
  // CRN of the flow version
  string flowVersionCrn = 5;
  // Deployment name
  string deploymentName = 6;
  // The id of the flow design. Either this or flowVersionCrn should be set, but not both.
  string flowDesignerId = 7;
  // The crn of the DataFlow Service.
  string dataFlowServiceCrn = 8;
}

message CDPDFDeploymentPodStatus {
  // The id of the DataFlow Deployment.
  string id = 1;
  // The crn of the DataFlow Deployment.
  string crn = 2;
  // The CDP account ID.
  string accountId = 3;
  // The crn of the CDP environment.
  string environmentCrn = 4;
  // The id of the DataFlow Service.
  string dataFlowServiceId = 5;
  // The crn of the DataFlow Service.
  string dataFlowServiceCrn = 6;
  // The number of pods running.
  int32 currentPodCount = 7;
}

message CDPDFDeploymentUpgradeRequested {
  // Operation metadata. Identifiers refer to the NiFi deployment within the environment.
  CDPDFOperationDetails operationDetails = 1;
  // The crn of the CDP environment of the deployment.
  string environmentCrn = 2;
  // The id of the DataFlow Service. This is the internal id used by dfx to refer to a dataflow-enabled cdp environment.
  string dataFlowServiceId = 3;
  // The crn of the DataFlow Service. This is the crn used by dfx to refer to a dataflow-enabled cdp environment.
  string dataFlowServiceCrn = 4;
  // The version of NiFi runtime in the deployment prior to the upgrade.
  string oldNifiVersion = 5;
  // The version of NiFi that deployment is upgraded to.
  string newNifiVersion = 6;
  // The initial status of the Deployment Upgrade. Should only be UPGRADE_REQUESTED/ROLLBACK_REQUESTED.
  CDPDFDeploymentStatus.Value status = 7;
  // CRN of the flow version
  string flowVersionCrn = 8;
  // Deployment name
  string deploymentName = 9;
  // The workflow run id of parent workflow that initiated deployments upgrade.
  string parentRunId = 10;
}

message CDPDFDeploymentUpgradeStatusChanged {
  // Removed parentRunId
  reserved 12;
  // Operation metadata
  CDPDFOperationDetails operationDetails = 1;
  // The status of the deployment before the change
  CDPDFDeploymentStatus.Value oldStatus = 2;
  // The status of the deployment after the change
  CDPDFDeploymentStatus.Value newStatus = 3;
  // A failure message for the df service. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
  // CRN of the flow version
  string flowVersionCrn = 5;
  // Deployment name
  string deploymentName = 6;
  // The crn of the DataFlow Service. This is the crn used by dfx to refer to a dataflow-enabled cdp environment.
  string dataFlowServiceCrn = 7;
  // The id of the DataFlow Service. This is the internal id used by dfx to refer to a dataflow-enabled cdp environment.
  string dataFlowServiceId = 8;
  // The crn of the CDP environment of the deployment.
  string environmentCrn = 9;
  // The version of NiFi before the upgrade is initiated
  string oldNifiVersion = 10;
  // The version of NiFi that deployment is upgraded to
  string newNifiVersion = 11;

}

// Generated when users initiate diagnostics collection
message CDPUDXBundleInitiated {
  // The details for the bundle.
  CDPUDXBundleDetails bundleDetails = 1;
  // The CRN of the user who initiated the diagnostics collection.
  string initiatorCrn = 2;
  // The support case number for the diagnostics collection.
  string caseNumber = 3;
}

// Generated when a new diagnostics bundle is received.
message CDPUDXBundleReceived {
  // The details for the bundle.
  CDPUDXBundleDetails bundleDetails = 1;
  // The host for which the bundle was collected.
  string host = 2;
  // The processing status of the diagnostics collection.
  string status = 3;
}

// Details for a UDX diagnostics bundle
message CDPUDXBundleDetails {
  // The CDP account ID of the resource for which diagnostics is being collected.
  string accountId = 1;
  // The uuid for the diagnostics collection.
  string uuid = 2;
  // The CRN of the environment.
  string environmentCrn = 3;
  // The CRN of the resource for which diagnostics is being collected.
  string resourceCrn = 4;
  // The type of the diagnostics bundle.
  string type = 5;
}

// Generated when a DataFlow Service's number of nodes change.
message CDPDFServiceNodesChanged {
  // The id of the DataFlow Service.
  string id = 1;
  // The crn of the DataFlow Service.
  string crn = 2;
  // The CDP account ID.
  string accountId = 3;
  // The crn of the CDP environment.
  string environmentCrn = 4;
  // The number of nodes before the scaling event occurred.
  int32 oldNodeCount = 5;
  // The number of nodes after the scaling event occurred.
  int32 newNodeCount = 6;
}

message CDPDFDeploymentPodsChanged {
  // The id of the DataFlow Deployment.
  string id = 1;
  // The crn of the DataFlow Deployment.
  string crn = 2;
  // The CDP account ID.
  string accountId = 3;
  // The crn of the CDP environment.
  string environmentCrn = 4;
  // The id of the DataFlow Service.
  string dataFlowServiceId = 5;
  // The crn of the DataFlow Service.
  string dataFlowServiceCrn = 6;
  // The number of pods before the scaling event occurred.
  int32 oldPodCount = 7;
  // The number of pods after the scaling event occurred.
  int32 newPodCount = 8;
}

// General information regarding a KPI created by a user.
message CDPDFKpiDetails {
  // The scope of the kpi. (SYSTEM, NIFI_FLOW, NIFI_PROCESSOR, NIFI_PROCESS_GROUP, NIFI_CONNECTION, ...)
  string scope = 1;
  // The actual metric being monitored. (cpu, data in, data out, bytes read, bytes written, ...)
  string metric = 2;
  // Whether or not an alert was set to trigger at a threshold or not.
  bool alert = 3;
}

// Generated when a user creates a new KPI for a deployment
message CDPDFDeploymentKpiCreated {
  // The id of the deployment kpi.
  string id = 1;
  // The id of the deployment that the kpi is associated with.
  string deploymentId = 2;
  // The CDP account ID.
  string accountId = 3;
  // The crn of the CDP environment.
  string environmentCrn = 4;
  // The details about the kpi created
  CDPDFKpiDetails kpiDetails = 5;
  // The source API that triggered the event.
  CDPDFEventSource.Value eventSource = 6;
}

// Generated when a user modifies an existing KPI.
message CDPDFDeploymentKpiUpdated {
  // The id of the deployment kpi.
  string id = 1;
  // The id of the deployment that the kpi is associated with.
  string deploymentId = 2;
  // The CDP account ID.
  string accountId = 3;
  // The crn of the CDP environment.
  string environmentCrn = 4;
  // The details about the kpi created
  CDPDFKpiDetails kpiDetails = 5;
  // The source API that triggered the event.
  CDPDFEventSource.Value eventSource = 6;
}

// Generated when a user deletes a KPI. The details are not important. Just tracking the fact it happened.
message CDPDFDeploymentKpiDeleted {
  // The id of the deployment kpi.
  string id = 1;
  // The source API that triggered the event.
  CDPDFEventSource.Value eventSource = 2;
}

message CDPDFDeploymentNifiVersionUpdateRequested {
  // Operation metadata. Identifiers refer to the NiFi deployment within the environment.
  CDPDFOperationDetails operationDetails = 1;
  // The crn of the CDP environment of the deployment.
  string environmentCrn = 2;
  // The id of the DataFlow Service. This is the internal id used by dfx to refer to a dataflow-enabled cdp environment.
  string dataFlowServiceId = 3;
  // The crn of the DataFlow Service. This is the crn used by dfx to refer to a dataflow-enabled cdp environment.
  string dataFlowServiceCrn = 4;
  // The version of NiFi runtime in the deployment prior to the update.
  string oldNifiVersion = 5;
  // The version of NiFi runtime requested to update to.
  string newNifiVersion = 6;
  // The initial status of the Deployment. Should only be NIFI_VERSION_UPDATE_REQUESTED or CANCEL_NIFI_VERSION_UPDATE_REQUESTED.
  CDPDFDeploymentStatus.Value status = 7;
  // CRN of the flow version
  string flowVersionCrn = 8;
  // Deployment name
  string deploymentName = 9;
}

//Autoscale Policy Type
message AutoscalePolicyType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The schedule-based autoscale policy.
    TIME_BASED = 1;
    // The load-based autoscale policy.
    LOAD_BASED = 2;
  }
}

//Autoscale Policy Definition
message CDPAutoscalePolicyDefinition {
  // The autoscale policy type
  AutoscalePolicyType.Value autoscalePolicyType = 1;
  // The autoscale policy parameters
  string autoscalePolicyParameters = 2;
  // The autoscale host group
  string autoscalingHostGroup = 3;
  // The autoscale policy name.
  string autoscalingPolicyName = 4;
}

//Autoscale Trigger Status
message AutoscaleScalingStatusType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Scaling requested successfully.
    SCALING_REQUESTED = 1;
    // Scaling request failed.
    SCALING_REQUEST_FAILED = 2;
    // Autoscale trigger failed.
    AUTOSCALE_TRIGGER_FAILED = 3;
  }
}

//Autoscale Trigger Details
message CDPAutoscaleTriggerDetails {
  // The CDP account ID of the datahub cluster.
  string accountId = 1;
  // The user-supplied cluster name.
  string clusterName = 2;
  // The cluster crn.
  string clusterCrn = 3;
  // The autoscaling policy definition.
  CDPAutoscalePolicyDefinition autoscalingPolicyDefinition = 4;
  // The original hostGroup node count.
  int32 originalHostGroupNodeCount = 5;
  // The desired hostGroup node count.
  int32 desiredHostGroupNodeCount = 6;
  // The autoscaling action that was performed.
  string autoscalingAction = 7;
  // The status of the trigger
  AutoscaleScalingStatusType.Value autoscaleStatus = 8;
}

// Generated after autoscale has been triggered.
message CDPDatahubAutoscaleTriggered {
  // The autoscaling trigger details
  CDPAutoscaleTriggerDetails autoscaleTriggerDetails = 1;
}

// Generated after autoscale config has been updated.
message CDPDatahubAutoscaleConfigChanged {
  // The user crn who updated the autoscale config.
  string userCrn = 1;
  // True if autoscaling is enabled for the cluster.
  bool autoscalingEnabled = 2;
  // The autoscaling policy definition.
  repeated CDPAutoscalePolicyDefinition autoscalingPolicyDefinition = 3;
  // The CDP account ID of the datahub cluster.
  string accountId = 4;
  // The user-supplied cluster name.
  string clusterName = 5;
  // The cluster crn.
  string clusterCrn = 6;
  // Flag to indicate if stop-start scaling is enabled for the cluster.
  bool stopStartScalingEnabled = 7;
}

// Holds network check result
message CDPNetworkCheckResult {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Successful result for a network check
    SUCCESSFUL = 1;
    // Failed result for a network check
    FAILED = 2;
  }
}

// Holds network check type
message CDPNetworkCheckType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // AWS S3 endpoint.
    S3 = 1;
    // AWS Security Token Service endpoint.
    STS = 2;
    // ADLS v2 (ABFS) endpoint (<azure_storage_account>.dfs.core.windows.net).
    ADLSV2 = 3;
    // Azure management endpoint (management.azure.com).
    AZURE_MGMT = 4;
    // GCS endpoint (storage.googleapis.com).
    GCS = 5;
    // Cloudera archive endpoint (archive.cloudera.com).
    CLOUDERA_ARCHIVE = 6;
    // DataBus API endpoint.
    DATABUS = 7;
    // DataBus S3 endpoint.
    DATABUS_S3 = 8;
    // Cloudera service delivery cache S3 address (cloudera-service-delivery-cache.s3.amazonaws.com).
    SERVICE_DELIVERY_CACHE_S3 = 9;
  }
}

// Pre flight network check result for VM based clusters.
message CDPNetworkCheck {
  // Deprecated network check types.
  reserved 5;
  // Type of the pre flight network check.
  CDPNetworkCheckType.Value type = 1;
  // Result of the pre flight network check.
  CDPNetworkCheckResult.Value result = 2;
  // CDP account id. This uniquely identifies the account within CDP
  string accountId = 3;
  // The crn of the cluster resource.
  string crn = 4;
  // Represents comma separated hosts where network check failed.
  string failedHostsJoined = 6;
  // Name of the cluster resource
  string clusterName = 7;
  // Type of the cluster
  string clusterType = 8;
  // Crn of the environment.
  string environmentCrn = 9;
  // The environment type. (cloud platform)
  CDPEnvironmentsEnvironmentType.Value environmentType = 10;
}

// Generated event by Event-processor per hive Query
message CDPDWXHiveQuery {
  // The CRN of the compute cluster. This is the same as the CRN used for metering.
  string computeCRN = 1;
  // Hive Query Id information
  string hiveQueryId = 2;
  // Triggered by , base64 encoded user-name
  string user = 3;
  // Execution time of query in milliseconds
  int64 executionTimeinMs = 4;
}

// The status of a CDP CDW resource.
message CDPCDWResourceStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when CDP CDW resource creation is requested.
    CREATE_REQUESTED = 1;
    // The status when CDP CDW resource creation has succeeded.
    CREATE_SUCCEEDED = 2;
    // The status when CDP CDW resource creation has failed.
    CREATE_FAILED = 3;
    // The status when CDP CDW resource deletion is requested.
    DELETE_REQUESTED = 4;
    // The status when CDP CDW resource deletion has succeeded.
    DELETE_SUCCEEDED = 5;
    // The status when CDP CDW resource deletion has failed.
    DELETE_FAILED = 6;
    // The status when CDP CDW resource start is requested.
    START_REQUESTED = 7;
    // The status when CDP CDW resource start API has succeeded.
    START_ASYNC_SUCCEEDED = 8;
    // The status when CDP CDW resource start has succeeded.
    START_SUCCEEDED = 9;
    // The status when CDP CDW resource start has failed.
    START_FAILED = 10;
    // The status when CDP CDW resource stop is requested.
    STOP_REQUESTED = 11;
    // The status when CDP CDW resource stop has succeeded.
    STOP_SUCCEEDED = 12;
    // The status when CDP CDW resource stop has failed.
    STOP_FAILED = 13;
    // The status when CDP CDW resource update is requested.
    UPDATE_REQUESTED = 14;
    // The status when CDP CDW resource update API has succeeded.
    UPDATE_ASYNC_SUCCEEDED = 15;
    // The status when CDP CDW resource update has succeeded.
    UPDATE_SUCCEEDED = 16;
    // The status when CDP CDW resource update has failed.
    UPDATE_FAILED = 17;
    // The status when CDP CDW resource upgrade is requested.
    UPGRADE_REQUESTED = 18;
    // The status when CDP CDW resource upgrade API has succeeded.
    UPGRADE_ASYNC_SUCCEEDED = 19;
    // The status when CDP CDW resource upgrade has succeeded.
    UPGRADE_SUCCEEDED = 20;
    // The status when CDP CDW resource upgrade has failed.
    UPGRADE_FAILED = 21;
  }
}

// Generic CDW Usage Event generated for different cases.
message CDPCDWUsageEvent {
  // The CDP account ID.
  string accountId = 1;
  // The CDP environment name.
  string environmentName = 2;
  // The CDP CDW environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 3;
  // The CDP CDW cluster ID.
  string clusterId = 4;
  // The type of CDW resource.
  CDPCDWResourceType.Value resourceType = 5;
  // The id of CDW resource.
  string resourceId = 6;
  // The component sending the event.
  string component = 7;
  // The type of CDW usage event.
  string eventType = 8;
  // The data of CDW usage event.
  string eventData = 9;
}

// The type of a CDW Resource.
message CDPCDWResourceType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Environment.
    ENVIRONMENT = 1;
    // Database Catalog.
    DATABASE_CATALOG = 2;
    // Virtual Warehouse.
    VIRTUAL_WAREHOUSE = 3;
    // Data Visualization.
    DATA_VISUALIZATION = 4;
  }
}

// Generated when a CDP CDW environment create, update or upgrade has been requested.
message CDPCDWEnvironmentRequested {
  // The ID of the CDW environment.
  string id = 1;
  // The CDP account ID.
  string accountId = 2;
  // The CRN of the CDP environment.
  string environmentCrn = 3;
  // The name of the CDW environment.
  string environmentName = 4;
  // The type of the CDW environment.
  CDPEnvironmentsEnvironmentType.Value environmentType = 5;
  // The CRN of the actor.
  string actorCrn = 6;
  // The status of the CDW environment.
  CDPCDWResourceStatus.Value status = 7;
  // Track Enable Das Link
  bool enableDas = 8;
}

// Generated when a CDP CDW environment's status has changed.
message CDPCDWEnvironmentStatusChanged {
  // The ID of the CDW environment.
  string id = 1;
  // The CDP account ID.
  string accountId = 2;
  // The status of the CDW environment before the change.
  CDPCDWResourceStatus.Value oldStatus = 3;
  // The status of the CDW environment after the change.
  CDPCDWResourceStatus.Value newStatus = 4;
  // A failure message for the CDW environment. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 5;
  // The CRN of the actor.
  string actorCrn = 6;
}

// The type of a CDW DB catalog.
message CDPCDWDBCatalogType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // SDX DB catalog.
    SDX = 1;
    // CDW DB catalog.
    CDW = 2;
  }
}

// Generated when a CDP CDW DB catalog create, update or upgrade has been requested.
message CDPCDWDBCatalogRequested {
  // The ID of the CDW DB catalog.
  string id = 1;
  // The CDP account ID.
  string accountId = 2;
  // The name of the CDW DB catalog.
  string dbCatalogName = 3;
  // The type of CDW DB catalog.
  CDPCDWDBCatalogType.Value dbCatalogType = 4;
  // The ID of the CDW environment to which the DB catalog is attached.
  string environmentId = 5;
  // The CRN of the actor.
  string actorCrn = 6;
  // The status of the CDW DB catalog.
  CDPCDWResourceStatus.Value status = 7;
}

// Generated when a CDP CDW DB catalog's status has changed.
message CDPCDWDBCatalogStatusChanged {
  // The ID of the CDW DB catalog.
  string id = 1;
  // The CDP account ID.
  string accountId = 2;
  // The status of the CDW DB catalog before the change.
  CDPCDWResourceStatus.Value oldStatus = 3;
  // The status of the CDW DB catalog after the change.
  CDPCDWResourceStatus.Value newStatus = 4;
  // A failure message for the CDW DB catalog. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 5;
  // The CRN of the actor.
  string actorCrn = 6;
}

// The type of a CDW virtual warehouse.
message CDPCDWVirtualWarehouseType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Hive virtual warehouse.
    HIVE = 1;
    // Impala virtual warehouse.
    IMPALA = 2;
  }
}

// Generated when a CDP CDW virtual warehouse create, update or upgrade has been requested.
message CDPCDWVirtualWarehouseRequested {
  // The ID of the CDW virtual warehouse.
  string id = 1;
  // The CDP account ID.
  string accountId = 2;
  // The CRN of the CDW virtual warehouse.
  string crn = 3;
  // The name of the CDW virtual warehouse.
  string virtualWarehouseName = 4;
  // The type of the CDW virtual warehouse.
  CDPCDWVirtualWarehouseType.Value virtualWarehouseType = 5;
  // The ID of the CDW DB catalog to which the virtual warehouse is attached.
  string dbCatalogId = 6;
  // The CRN of the actor.
  string actorCrn = 7;
  // The status of the CDW virtual warehouse.
  CDPCDWResourceStatus.Value status = 8;
  // The minimum number of nodes of the CDW virtual warehouse.
  int32 minNodes = 9;
  // The maximum number of nodes of the CDW virtual warehouse.
  int32 maxNodes = 10;
}

// Generated when a CDP CDW virtual warehouse's status has changed.
message CDPCDWVirtualWarehouseStatusChanged {
  // The ID of the CDW virtual warehouse.
  string id = 1;
  // The CDP account ID.
  string accountId = 2;
  // The CRN of the CDW virtual warehouse.
  string crn = 3;
  // The status of the CDW virtual warehouse before the change.
  CDPCDWResourceStatus.Value oldStatus = 4;
  // The status of the CDW virtual warehouse after the change.
  CDPCDWResourceStatus.Value newStatus = 5;
  // A failure message for the CDW virtual warehouse. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 6;
  // The CRN of the actor.
  string actorCrn = 7;
}

// Generated when a CDP CDW virtual warehouse's nodes has changed.
message CDPCDWVirtualWarehouseNodesChanged {
  // The ID of the CDW virtual warehouse.
  string id = 1;
  // The CDP account ID.
  string accountId = 2;
  // The CRN of the CDW virtual warehouse.
  string crn = 3;
  // The number of nodes before the scaling event occurred.
  int32 oldNodeCount = 4;
  // The number of nodes after the scaling event occurred.
  int32 newNodeCount = 5;
}

// The type of a CDW real time event store.
message CDPCDWRealTimeEventStoreType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Druid real time event store.
    DRUID = 1;
  }
}

// Generated when a CDP CDW real time event store create, update or upgrade has been requested.
message CDPCDWRealTimeEventStoreRequested {
  // The ID of the CDW real time event store.
  string id = 1;
  // The CDP account ID.
  string accountId = 2;
  // The CRN of the CDW real time event store.
  string crn = 3;
  // The name of the CDW real time event store.
  string realTimeEventStoreName = 4;
  // The type of the CDW real time event store.
  CDPCDWRealTimeEventStoreType.Value realTimeEventStoreType = 5;
  // The ID of the CDW environment to which the real time event store is attached.
  string environmentId = 6;
  // The CRN of the actor.
  string actorCrn = 7;
  // The status of the CDW real time event store.
  CDPCDWResourceStatus.Value status = 8;
  // The minimum number of nodes of the CDW real time event store.
  int32 minNodes = 9;
  // The maximum number of nodes of the CDW real time event store.
  int32 maxNodes = 10;
}

// Generated when a CDP CDW real time event store's status has changed.
message CDPCDWRealTimeEventStoreStatusChanged {
  // The ID of the CDW real time event store.
  string id = 1;
  // The CDP account ID.
  string accountId = 2;
  // The CRN of the CDW real time event store.
  string crn = 3;
  // The status of the CDW real time event store before the change.
  CDPCDWResourceStatus.Value oldStatus = 4;
  // The status of the CDW real time event store after the change.
  CDPCDWResourceStatus.Value newStatus = 5;
  // A failure message for the CDW real time event store. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 6;
  // The CRN of the actor.
  string actorCrn = 7;
}

// Generated when a CDP CDE service creation or update is requested.
message CDPCDEServiceRequested {
  reserved 10, 11, 13;
  // The ID of the CDE service.
  string id = 1;
  // The CDP account ID.
  string accountId = 2;
  // The CRN of the CDE cluster's environment.
  string environmentCrn = 3;
  // The cluster CRN.
  string clusterCrn = 4;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 5;
  // The CDP actor CRN of the creator.
  string creatorCrn = 6;
  // The CDE version.
  string cdeVersion = 7;
  // metadata
  oneof metadata {
    // AWS specific metadata about the service.
    CDPCDEAWSServiceMetadata cdpCDEAwsMetadata = 8;
    // Azure specific metadata about the service.
    CDPCDEAzureServiceMetadata cdpCDEAzureMetadata = 9;
  }
  // The user-defined tags for the CDE service. These should not include automatically
  // added tags that are product-specific. The format of this is a map serialized
  // into a string as json. e.g.:   "tags": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string userTags = 12;
  // Status of the CDP CDE service.
  string status = 15;
  // Set of properties used while requesting CDE service. The format of this is a map serialized
  // into a string as json. e.g.:   "properties": "{\"prop1\":\"value1\",\"prop2\":\"value2\"}"
  string properties = 14;
}

// Generated when the status of a CDE service changes.
message CDPCDEServiceStatusChanged {
  reserved 5, 6, 7;
  // The ID of the CDP CDE service.
  string id = 1;
  // The CRN of the CDP CDE service.
  string clusterCrn = 2;
  // Liftie ID of the CDP CDE service.
  string liftieId = 3;
  // The CDP account ID.
  string accountId = 4;
  // New status of the CDP CDE service
  string status = 9;
  // Reason for status change(if any).
  string reason = 8;
}

// Generated when a CDP CDE virtual cluster creation is requested.
message CDPCDEVirtualClusterRequested {
  reserved 9;
  // The ID of the CDP CDE virtual cluster.
  string id = 1;
  // The CRN of the CDP CDE service for which the virtual cluster creation was requested.
  string clusterCrn = 2;
  // The CDP account ID.
  string accountId = 3;
  // The CDP user ID of the creator.
  string creatorId = 4;
  // The version of CDP CDE service where virtual cluster creation was requested.
  string cdeVersion = 5;
  // Number of CPU cores requested for the virtual cluster autoscaling.
  uint32 cpuRequested = 6;
  // Memory requested for the virtual cluster autoscaling.
  string memoryRequested = 7;
  // Spark version of the virtual cluster.
  string sparkVersion = 8;
  // Status of the CDP CDE virtual cluster.
  string status = 11;
  // Set of properties used while requesting virtual clusters. The format of this is a map serialized
  // into a string as json. e.g.:   "properties": "{\"prop1\":\"value1\",\"prop2\":\"value2\"}"
  string properties = 10;
  // Indicates where the CDE Spark driver and executor pods run(spot/Ondemand)
  CDPCDESpotInstanceUsage.Value spotInstanceUsage = 12;
}

// CDPCDESpotInstanceUsage indicates where the CDE spark driver and executor pods run(Spot/Ondemand)
message CDPCDESpotInstanceUsage {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // DEFAULT indicates driver pod runs on on-demand instances while executor pods run on spot instances.
    DEFAULT = 1;
    // ALL indicates all the driver and executor pods run on spot instances.
    ALL = 2;
    // NONE indicates all the driver and executor pods run on on-demand instances
    NONE = 3;
  }
}

// Generated when status of a CDP CDE virtual cluster changes.
message CDPCDEVirtualClusterStatusChanged {
  reserved 4, 5, 6;
  // The ID of the CDP CDE virtual cluster.
  string id = 1;
  // The ID of the CDP CDE service for which the virtual cluster creation was requested.
  string clusterCrn = 2;
  // The CDP account ID.
  string accountId = 3;
  // New status of the CDP CDE Virtual cluster
  string status = 8;
  // Reason for failure. This will be only set if the newStatus is set to *_FAILED.
  string reason = 7;
}

//Generated when a CDP CDE service upgrade is requested.
message CDPCDEServiceUpgradeRequested {
  // The ID of the CDP CDE service.
  string id = 1;
  // The CRN of the CDP CDE service.
  string clusterCrn = 2;
  // The CDP account ID.
  string accountId = 3;
  // CDE version from which upgrade was requested.
  string fromVersion = 4;
  // Version CDE service was upgraded to.
  string toVersion = 5;
}


// Generated when a CDP CDE job run is initiated or its status changes.
message CDPCDEJobRunStatusChanged {
  // CRN of the cluster where the job was running.
  string clusterCrn = 1;
  // ID of the virtual cluster where the job was running.
  string vcId = 2;
  // ID if the job run.
  string runId = 3;
  // Name of the user running the job(hashed)
  string user = 8;
  // New status of the job run.
  string status = 4;
  // Details of the job run.
  CDPCDEJobDetails jobDetails = 5;
  // Indicates when the job was started
  uint64 started = 6;
  // Indicates when the job run ended
  uint64 ended = 7;
  // Indicates the duration of the job run
  int32 duration = 9;
  // cde-client header
  string client = 10;
}

// Generated when a CDP CDE job is created or is modified.
message CDPCDEJobCreated {
  // CRN of the cluster where the job was created or modified.
  string clusterCrn = 1;
  // ID of the virtual cluster where the job was created or modified.
  string vcId = 2;
  // Job Details.
  CDPCDEJobDetails job = 3;
  // Status: Created, modified or deleted.
  CDPCDEEventType.Value eventType = 4;
  // cde-client header
  string client = 5;
}

// Type for CDPCDE event generated.
message CDPCDEEventType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // A new job/resource is created.
    CREATED = 1;
    // An existing job/resource is modified.
    MODIFIED = 2;
    // An existing job/resource is deleted.
    DELETED = 3;
  }
}

// Generated when a CDP CDE resource is created or modified.
message CDPCDEResourceCreated {
  // CRN of the cluster where the resource was created or modified.
  string clusterCrn = 1;
  // ID of the virtual cluster where the resource was created or modified.
  string vcId = 2;
  // Resource Details.
  CDPCDEResourceDetails resource = 3;
  // Status: Created, modified or deleted.
  CDPCDEEventType.Value eventType = 4;
  // cde-client header
  string client = 5;
}

// Metadata about AWS CDE service when it was created or updated.
message CDPCDEAWSServiceMetadata {
  reserved 6;
  // Minimum number of instances requested for compute autoscaling.
  int32 minimumInstances = 1;
  // Maximum number of instances requested for compute autoscaling.
  int32 maximumInstances = 2;
  // Minimum number of spot instances requested for compute autoscaling.
  int32 minimumSpotInstances = 3;
  // Maximum number of spot instances requested for compute autoscaling.
  int32 maximumSpotInstances = 4;
  // Instance type requested for compute nodes.
  string instanceType = 5;
}

// Metadata about Azure CDE service when it was created or updated.
message CDPCDEAzureServiceMetadata {
  reserved 4;
  // Minimum number of instances requested for compute autoscaling.
  int32 minimumInstances = 1;
  // Maximum number of instances requested for compute autoscaling.
  int32 maximumInstances = 2;
  // Minimum number of spot instances requested for compute autoscaling.
  // Instance type requested for compute nodes.
  string instanceType = 3;
}

// Details of a CDE Job.
message CDPCDEJobDetails {
  // Name of the Job.
  string jobName = 1;
  // Type of CDE job, eg spark, airflow, etc.
  string jobType = 2;
  // Cron schedule for for Job run.
  string schedule = 3;
  // Resource information of the job run requested.
  repeated CDPCDEResourceDetails resources = 4;
  // User defined configurations of the job. The format is a map serialized into
  // a json string.
  string jobConfigurations = 5;
  // Python version for the requested job run
  string pythonVersion = 6;
  // Driver memory for the job run.
  string driverMemory = 7;
  // Executor memory for the job run.
  string executorMemory = 8;
  // Number of cores for the executor requested for job run.
  int32 executorCores = 9;
  // Number of cores for the driver requested for job run.
  int32 driverCores = 10;
  // Log level requested for the job
  string logLevel = 11;
  // Indicates if the job was created using Pipelines Editor.
  bool pipelinesUsed = 12;
}

// Details of a CDP CDE resource type.
message CDPCDEResourceDetails {
  // Name of the resource
  string name = 1;
  // Resource type, eg file, pythonEnv, etc
  string type = 2;
}

// Cloudera Data Visualization Usage Event detected.
message CDPCDVEvent {
  // The type of event that occurred for CDV, i.e. create, delete, update
  string eventType = 1;
  // The time at which the event occurred.
  string eventTime = 2;
  // The User CRN corresponding to the CDV
  string userCrn = 3;
  // The Customer ID corresponding to the CDV
  string customerId = 4;
  // The Account Name corresponding to the CDV
  string accountName = 5;
  // The CDV Image version
  string cdvVersion = 6;
  // The CDV ID
  string cdvId = 7;
  // The T-shirt size of the CDV.
  string size = 8;
  // The Number of CPUs consumed by the CDV
  int32 cpu = 9;
  // The memory consumed by the CDV
  int32 memory = 10;
  // The environment name to which the CDV is associated.
  string environmentName = 11;
  // The environment crn to which the CDV is associated.
  string environmentCrn = 12;
}

// Triggered after CDP VM diagnostics flow has been finished.
message CDPVMDiagnosticsEvent {
  // Unique identifier for the VM diagnostic flow.
  string uuid = 1;
  // Resource CRN for VM based diagnostic flow.
  string resourceCrn = 2;
  // Account ID for VM based diagnostic flow.
  string accountId = 3;
  // Description for VM based diagnostic flow.
  string description = 4;
  // Destination of the diagnostics.
  CDPVMDiagnosticsDestination.Value destination = 5;
  // Result of the diagnostics flow.
  CDPVMDiagnosticsResult.Value result = 6;
  // Failure type (based on phases of the diagnostics flow).
  CDPVMDiagnosticsFailureType.Value failureType = 7;
  // Failure status message (if available).
  string failureMessage = 8;
  // Input parameters of the diagnostics collections in string format.
  string inputParameters = 9;
  // Identifier for the diagnostics bundle that can be a case number (for SUPPORT destination) or anything else like a Jira issue.
  string caseNumber = 10;
}

// Destination of CDP VM diagnostics.
message CDPVMDiagnosticsDestination {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Local destination of VM diagnostics (/var/lib/filecollector).
    LOCAL = 1;
    // Cloud storage destination (cloud provider specific).
    CLOUD_STORAGE = 2;
    // Cloudera UDX databus S3 destination.
    SUPPORT = 3;
    // Kibana (Cloudera SRE) destination for VM diagnostics (as stream).
    ENGINEERING = 4;
  }
}

// Result of the CDP VM diagnostics.
message CDPVMDiagnosticsResult {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Successfully finished diagnostics flow.
    SUCCESSFUL = 1;
    // Failed diagnostics flow.
    FAILED = 2;
  }
}

// Specific VM diagnotics failure.
message CDPVMDiagnosticsFailureType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Salt minion failure during diagnostics.
    SALT_VALIDATION_FAILURE = 1;
    // Initialization failure (e.g: network issue before collection)
    INITIALIZATION_FAILURE = 2;
    // UMS resource (machine user) check failure.
    UMS_RESOURCE_CHECK_FAILURE = 3;
    // Preflight check failure before triggering diagnostics collections.
    PREFLIGHT_VM_CHECK_FAILURE = 4;
    // Failure during diagnostics collection phase.
    COLLECTION_FAILURE = 5;
    // Failure during diagnostics bundle upload.
    UPLOAD_FAILURE = 6;
    // Failure during cleaning up resources.
    CLEANUP_FAILURE = 7;
    // Failure during salt pillar update.
    SALT_PILLAR_UPDATE_FAILURE = 8;
    // Failure during salt state update.
    SALT_STATE_UPDATE_FAILURE = 9;
    // Failure during telemetry upgrade.
    TELEMETRY_UPGRADE_FAILURE = 10;
  }
}

// Generated when a service in CDP has diagnostic event to report.
message CDPDiagnosticEvent {
  // The lowest level billable resource CRN.
  string resourceCrn = 1;
  // The CDP account ID.
  string accountId = 2;
  // The CDP service type the event is generated from.
  ServiceType.Value serviceType = 3;
  // The result of the diagnostic.
  CDPDiagnosticResult.Value result = 4;
  // The result in more details.
  string details = 5;
  // The failure message, if available.
  string failureMessage = 6;
  // The environment CRN.
  string environmentCrn = 7;
  // The environment name.
  string environmentName = 8;
  // Additional event details, if any need to be captured, in a json format.
  string eventDetails = 9;
}

// The service types. Any new services added to CDP which will have their own
// billable events must be added here. These values should match the customer
// visible values used in the CLI.
//
// This list below is a subset of the values in the Crn.Service enumeration.
// The exact value need not match, but it should correspond to some Crn.Service.
//
// This should match meteringevents.ServiceType.
message ServiceType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // DataHub
    DATAHUB = 1;
    // Machine Learning
    MACHINE_LEARNING = 2;
    // Data Warehouse
    DATA_WAREHOUSE = 3;
    // Data Engineering
    DATA_ENGINEERING = 4;
    // Operational Database
    OPERATIONAL_DB = 5;
    // Data Flow
    DATA_FLOW = 6;
    // Environment, which contains one or multiple services
    ENVIRONMENT = 7;
    // Liftie
    LIFTIE = 8;
  }
}

// The CDP diagnostic result.
message CDPDiagnosticResult {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // DBus is not available.
    DBUS_UNAVAILABLE = 1;
    // Metering heartbeat generation is failing.
    METERING_HB_FAILURE = 2;
    // Cluster Not Reachable
    CLUSTER_NOT_REACHABLE = 3;
  }
}

// Triggered when a CDP stack patcher either finds an affected stack, successfully patches it, or fails.
message CDPStackPatchEvent {
  // Resource CRN of the affected stack.
  string resourceCrn = 1;
  // Type of stack patch that affects the referenced stack.
  string stackPatchType = 2;
  // Type of the stack patch event.
  CDPStackPatchEventType.Value eventType = 3;
  // Optional message with more details about the event.
  string message = 4;
}

// Type of stack patch event.
message CDPStackPatchEventType {
  enum Value {
    UNSET = 0;
    AFFECTED = 1;
    SUCCESS = 2;
    FAILURE = 3;
  }
}

// Generated when PEM service creates a certificate successfully.
message CDPPEMCertificateCreated {
  // PEM certificate request details.
  CDPPEMCertificateRequestDetails requestDetails = 1;
  // Certificate workflowId, to trace more details on the certificate workflow.
  string workflowId = 2;
}

// Generated when PEM service renews a certificate successfully.
message CDPPEMCertificateRenewed {
  // PEM certificate request details.
  CDPPEMCertificateRequestDetails requestDetails = 1;
  // Certificate workflowId, to trace more details on the certificate workflow.
  string workflowId = 2;
  // Certificate provider that issued the certificate before renewal.
  string prevCertificateProvider = 3;
}

// Generated when PEM service revokes a certificate successfully.
message CDPPEMCertificateRevoked {
  // PEM certificate request details.
  CDPPEMCertificateRequestDetails requestDetails = 1;
  // Reason to revoke the certificate.
  string revocationReason = 2;
}

// The PEM certificate request details
message CDPPEMCertificateRequestDetails {
  // The CDP account ID of the user.
  string accountId = 1;
  // The cluster CRN.
  string clusterCrn = 2;
  // Name of the client (cb, dfx, cml) that requested certificate.
  string clientName = 3;
  // Certificate Serial Number.
  string certSerialNumber = 4;
  // Subjective Alternative Name OR domain name of certificate.
  string san = 5;
  // Hash of the SAN.
  string sanHash = 6;
  // Certificate not valid before.
  string notBefore = 7;
  // Certificate not valid before.
  string notAfter = 8;
  // Certificate Provider that issued the certificate.
  string certificateProvider = 9;
}

// Generic event emitted when a Replication Manager user makes requests of interest, such as
// operations on policies, downloading logs and diagnostic bundles, etc
message RMUsageEvent {
  // The internal trace id of the request associated with the usage event
  string requestId = 1;
  // The CDP actor CRN of the request.
  string actorCrn = 2;
  // The usage event will be identified by the DMX controller which handles the event
  string controller = 3;
  // The timestamp of the start time of the request associated with the usage event
  uint64 eventStarted = 4;
  // The timestamp of the end time of the request associated with the usage event
  uint64 eventFinished = 5;
  // The result status of the request associated with the usage event
  uint32 resultStatus = 6;
  // The source which the usage event was originated from
  RMUsageEventSource.Value eventSource = 7;
  // The length of the request payload associated with the event
  uint64 requestLength = 8;
  // The length of the response payload associated with the event
  uint64 responseLength = 9;
  // The version of the application deployed when emitting the event
  string applicationVersion = 10;
}

// Type holding the source of a Replication Manager usage event
message RMUsageEventSource {
  enum Value {
    // A value indication that the enum is unset
    UNSET = 0;
    // A value indicating that the request was made from the browser UI
    UI = 1;
    // A value indication that the request was made from the CLI
    CLI = 2;
  }
}

// A CDP stack's salt password is rotated.
message CDPSaltPasswordRotationEvent {
  // Resource CRN of the affected stack.
  string resourceCrn = 1;
  // Reason for salt password rotation.
  CDPSaltPasswordRotationEventReason.Value reason = 2;
  // Result of salt password rotation.
  CDPSaltPasswordRotationEventResult.Value eventResult = 3;
  // Optional message with more details about the event.
  string message = 4;
}

// Reason for salt password rotation.
message CDPSaltPasswordRotationEventReason {
  enum Value {
    UNSET = 0;
    MANUAL = 1;
    EXPIRED = 2;
    UNAUTHORIZED = 3;
  }
}

// Result of salt password rotation.
message CDPSaltPasswordRotationEventResult {
  enum Value {
    UNSET = 0;
    SUCCESS = 1;
    FAILURE = 2;
  }
}

// Generated when a new CDP trial account has been assigned/requested/failed.
message CDPAssignTrialAccount {
  // CDP Account id
  string accountId = 1;
  // CDP User Id of the trial user.
  string userId = 2;
  // Skynet managed account id
  string managedSkynetAccountId = 3;
  // The ID of this user in the identity provider. This is not set for all
  // users. If this is not set sfdcContactId will be set.
  string identityProviderUserId = 4;
  // The SFDC contact ID associated with this user. This may or may not be set
  // for trial accounts or for accounts using a non-SFDC identity provider. If
  // this is not set identityProviderUserId will be set.
  string sfdcContactId = 5;
  // CDP Trial details contain trial information like the current status and start and end time.
  CDPTrialDetails cdpTrialDetails = 6;
  // Details of the CDP trial environment
  CDPTrialEnvironment cdpTrialEnvironment = 7;
  // Status of CDP Assign Trial Request
  CDPAssignTrialStatus.Value status = 8;
}

// Generated when a CDP trial account status is changed/updated.
message CDPTrialAccountStatusChanged {
  // CDP Account id
  string accountId = 1;
  // Old trial details contains old trial status, old trial start time and old trial end time
  CDPTrialDetails oldCdpTrialDetails = 2;
  // New trial details contains new trial status, new trial start time and new trial end time
  CDPTrialDetails newCdpTrialDetails = 3;
  // initiatorCrn contain the crn of caller of the request ie either trial monitoring service or admin api call
  string initiatorCrn = 4;
}

// CDP Trial Details contains trial status, trial start time and trial end time
message CDPTrialDetails {
  // Status of Trial.
  TrialStatus.Value status = 1;
  // Starting datetime of the trial period.
  uint64 startTime = 2;
  // Ending datetime of the trial period.
  uint64 endTime = 3;
}

// Status options for CDPTrials.
message TrialStatus {
  enum Value {
    // Indicates trial status is active.
    ACTIVE = 0;
    // Indicates the trial period has expired.
    // The associated environment will be stopped.
    EXPIRED = 1;
    // Indicates trial is being terminated after x days of expired status.
    // Once the trial status is terminated, extending the trial is not possible.
    TERMINATED = 2;
  }
}

// Details of the CDP Trial Environment.
message CDPTrialEnvironment {
  // The CRN of the environment.
  string crn = 1;
  // The name of the environment.
  string name = 2;
  // List of CDP trial workloads deployed in the environment, each workload is for a specific pattern.
  repeated CDPTrialWorkload workloads = 3;
}

// The pattern and status for CDP Trial workloads.
message CDPTrialWorkload {
  // Pattern used by the trial workload. Currently supported CDP trial workload patterns are CDP_OPEN_DATA_LAKEHOUSE.
  // CDP_OPEN_DATA_LAKEHOUSE - Indicates open data lakehouse pattern for CDP.
  string pattern = 1;
  // Status of the workload deployment for the trial.
  CDPTrialWorkloadStatus.Value status = 2;
}

// Status options for CDP Trial Workload.
message CDPTrialWorkloadStatus {
  enum Value {
    // Indicates the CDP Trial workload was not deployed.
    NOT_DEPLOYED = 0;
    // Indicates the deployment of the CDP Trial workload is in progress.
    DEPLOYMENT_IN_PROGRESS = 1;
    // Indicates the CDP Trial workload was deployed and is ready for us.
    DEPLOYED = 2;
  }
}

// Status options for CDP Assign Trial.
message CDPAssignTrialStatus {
  enum Value {
    // Indicates CAP Trial Request status is REQUESTED.
    REQUESTED = 0;
    // Indicates CAP Trial Request status is ASSIGNED.
    ASSIGNED = 1;
    // Indicates CAP Trial Request status is FAILED.
    FAILED = 2;
  }
}

// Generated after vertical scale.
message CDPVerticalScaleDetails {
  string newInstanceType = 1;
}

// Type of recipe
message CDPRecipeType {
  enum Value {
    // Indicates there is some error, type cannot be recognized
    UNKNOWN = 0;
    // Indicates that recipe will be executed before CM start, deprecated status
    PRE_CLOUDERA_MANAGER_START = 1;
    // Indicates that recipe will be executed before service starts
    PRE_SERVICE_DEPLOYMENT = 2;
    // Indicates that recipe will be executed before termination
    PRE_TERMINATION = 3;
    // Indicates that recipe will be executed after CM start, deprecated
    POST_CLOUDERA_MANAGER_START = 4;
    // Indicates that recipe will be executed after cluster provision
    POST_CLUSTER_INSTALL = 5;
    // Indicates that recipe will be executed after service starts
    POST_SERVICE_DEPLOYMENT = 6;
  }
}

// Status of recipe event
message CDPRecipeStatus {
  enum Value {
    // Indicates that status cannot be recognized
    UNKNOWN = 0;
    // Indicates that it is a recipe creation event
    CREATED = 1;
    // Indicates that it is a recipe attachment event
    ATTACHED = 2;
    // Indicates that it is a recipe detachment event
    DETACHED = 3;
    // Indicates that it is a recipe deletion event
    DELETED = 4;
  }
}

// Event about recipe
message CDPRecipeEvent {
  // Status of recipe
  CDPRecipeStatus.Value status = 1;
  // CRN of recipe
  string recipeCrn = 2;
  // Name of recipe
  string name = 3;
  // Type of recipe
  CDPRecipeType.Value type = 4;
  // Name of host group in case of attachment/detachment, otherwise it is empty
  string hostGroup = 5;
  // CRN of related stack in case of attachment/detachment, otherwise it is empty
  string stackCrn = 6;
  // corresponding account id
  string accountId = 7;
}

// Recipe related event about cluster creation
message CDPClusterCreationRecipeEvent {
  // CRN of related stack
  string stackCrn = 1;
  // Overall recipe count of related stack
  int32 recipeCount = 2;
  // Details of recipe count by type in JSON format
  string typeDetails = 3;
  // Details of recipe count by host group in JSON format
  string hostGroupDetails = 4;
  // corresponding account id
  string accountId = 5;
}

// A validation result for a CDP resource from the Metering Events Monitor Service.
// The result is generated by cross-checking usage events with Metering heartbeats.
message CDPMEMValidationResult {
  // CRN of the resource that was validated
  string resourceCrn = 1;
  // The CDP account ID.
  string accountId = 2;
  // The CDP service type the event is generated from.
  ServiceType.Value serviceType = 3;
  // The validation window starting timestamp in ms from the Java epoch of 1970-01-01T00:00:00Z.
  uint64 startTimestamp = 4;
  // The validation window ending timestamp in ms from the Java epoch of 1970-01-01T00:00:00Z.
  uint64 endTimestamp = 5;
  // The error message if the validation failed.
  string error = 6;
  // The number of nodes that were reported via usage events.
  int32 nodeCountFromUsageEvents = 7;
  // The number of nodes that were reported via metering heartbeats.
  int32 nodeCountFromHeartbeats = 8;
  // Status of validation
  CDPMEMValidationStatus.Value status = 9;
  // The timestamp of the most recent usage event in ms from the Java epoch of 1970-01-01T00:00:00Z.
  uint64 lastEventTimestamp = 10;
  // The number of usage events received during the validation window.
  int32 usageEventCount = 11;
  // The timestamp for when the validation was run in ms from the Java epoch of 1970-01-01T00:00:00Z.
  uint64 validationTimestamp = 12;
  // A numerical ID for the validation result.
  uint64 validationID = 13;
  // A string containing JSON to provide further error details.
  string errorDetails = 14;
  // A string containing JSON to provide further validation details.
  string validationDetails = 15;
}

// The status for a MEM Validation result.
message CDPMEMValidationStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The validation passed.
    PASSED = 1;
    // The validation failed.
    FAILED = 2;
  }
}

// Event for a CDP environment's proxy config edit.
message CDPEnvironmentProxyConfigEditEvent {
  // CRN of the environment that the edit is requested for.
  string environmentCrn = 1;
  // CRN of the proxy config the edit is requested with.
  string proxyConfigCrn = 2;
  // CRN of the previous proxy config of the environment.
  string previousProxyConfigCrn = 3;
  // Result of the environment proxy config edit.
  CDPEnvironmentProxyConfigEditResult.Value result = 4;
  // Optional message with more details about the event.
  string message = 5;
}

// Result of a CDP environment's proxy config edit.
message CDPEnvironmentProxyConfigEditResult {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The proxy edit successfully finished.
    SUCCESS = 1;
    // The proxy edit failed with an error while editing the environment.
    ENVIRONMENT_FAILURE = 2;
    // The proxy edit failed with an error while editing the freeipa of the environment.
    FREEIPA_FAILURE = 3;
    // The proxy edit failed with an error while editing the datalake of the environment.
    DATALAKE_FAILURE = 4;
    // The proxy edit failed with an error while editing a datahub of the environment.
    DATAHUB_FAILURE = 5;
  }
}

// CDP CML workload event status.
enum CDPCMLWorkloadEventStatus {
  SCHEDULING = 0;
  STARTING = 1;
  RUNNING = 2;
  STOPPING = 3;
  STOPPED = 4;
  UNKNOWN = 5;
  PENDING = 6;
  SUCCEEDED = 7;
  FAILED = 8;
}

// CDP CML internal error codes for workloads.
enum CDPCMLWorkloadInternalErrorCode {
  UNKNOWN_INTERNAL = 0;
  QUOTA_REQUESTS_CPU_NOT_SPECIFIED = 1;
  QUOTA_REQUESTS_MEMORY_NOT_SPECIFIED = 2;
  QUOTA_REQUESTS_MEMORY = 3;
  QUOTA_REQUESTS_CPU = 4;
  QUOTA_COUNT_POD = 5;
  QUOTA_REQUESTS_GPU = 6;
  NOT_ENOUGH_RESOURCE_REQUEST = 7;
}

// CDP CML kubernetes engine status.
message CDPCMLK8SEngineStatus {
  string engineId = 1;
  CDPCMLWorkloadEventStatus status = 2;
  string podIP = 3;
  bool oomKilled = 4;
  int32 k8sExitCode = 5;
  int32 k8sSignal = 6;
  string k8sMessage = 7;
  string k8sReason = 8;
  google.protobuf.Timestamp k8sStartedAt = 9;
  google.protobuf.Timestamp k8sFinishedAt = 10;
  bool found = 11;
  CDPCMLWorkloadInternalErrorCode internalErrorCode = 12;
}

// CDP CML addons for runtimes.
message CDPCMLUsageRuntimeAddon {
  string uniqueName = 1;
  string component = 2;
}

// CDP CML workload runtimes.
message CDPCMLUsageRuntime {
  string kernel = 1;
  string editor = 2;
  string version = 3;
  string edition = 4;
}

// A CDP CML session start usage event.
message CDPCMLSessionStartEvent {
  reserved 1;
  float cpu = 2;
  float mem = 3;
  uint32 gpu = 4;
  uint32 userId = 5;
  uint32 projectId = 6;
  string kernel = 7;
  string image = 9;
  string engineId = 10;
  bool cli = 11;
  CDPCMLK8SEngineStatus k8SEngineStatus = 12;
  CDPCMLUsageRuntime runtime = 13;
  repeated CDPCMLUsageRuntimeAddon addons = 14;
}

// A CDP CML engine stop usage event.
message CDPCMLEngineStopEvent {
  uint32 userId = 1;
  uint32 projectId = 2;
  string engineId = 3;
  enum KilledByReason {
    UNKNOWN = 0;
    USER = 1;
    TIMEOUT = 2;
    FAILED = 3;
  }
  KilledByReason killedBy = 4;
  reserved 5;
  CDPCMLK8SEngineStatus k8SEngineStatus = 6;
}

// A CDP CML engine delete usage event.
message CDPCMLEngineDeleteEvent {
  string engineId = 1;
  enum DeletedByReason {
    UNKNOWN = 0; //Default value
    IDLE_TIMEOUT = 1; //Pod IDLE timed out
    DB_NO_INFO = 2; //Database does not contain engine but there is a pod for it
    K8S_HAS_TERMINATE_INFO = 3; //The pod has corresponding engine in DB and the engine container has terminated status
    DB_HAS_STOPPING_STATUS = 4; //Pod has stopping status in postgres database
    DB_IN_ERROR_STATE = 5; //Pod is in pending state and the engine container is in one of the error states for a long period
    START_STOP_SCHEDULE_TIMEOUT = 6; //Engine has been in status (scheduling, starting or stopping) for more than allowed lifetime
    NO_APP = 7; //Pod is running, but application is no longer referring it as its dashboard
  }
  DeletedByReason deletedByReason = 2;
  CDPCMLK8SEngineStatus k8SEngineStatus = 3;
}

// A CDP CML engine heartbeat usage event.
message CDPCMLEngineHeartBeatEvent {
  string engineId = 1;
  double engineAge = 2;
  CDPCMLK8SEngineStatus k8SEngineStatus = 3;
}

message CDPCMLJobStartEvent {
  string type = 1;
  float cpu = 2;
  float mem = 3;
  uint32 gpu = 4;
  uint32 userId = 5;
  uint32 projectId = 6;
  string kernel = 7;
  reserved 8;
  string image = 9;
  string engineId = 10;
  CDPCMLK8SEngineStatus k8SEngineStatus = 11;
  uint32 jobId = 12;
  CDPCMLUsageRuntime runtime = 13;
  repeated CDPCMLUsageRuntimeAddon addons = 14;
}

message CDPCMLJobCreatedOrModifiedEvent {
  uint32 userId = 1;
  uint32 projectId = 2;
  uint32 jobId = 3;
  string schedule = 4;
  string kernel = 5;
  bool includeConsoleLog = 6;
  uint32 notifySuccess = 7;
  uint32 notifyFailure = 8;
  uint32 notifyTimeout = 9;
  uint32 notifyStopped = 10;
  string file = 11;
  string reportAttachments = 12;
}

message CDPCMLExperimentStartEvent {
  float cpu = 1;
  float mem = 2;
  uint32 gpu = 3;
  uint32 userId = 4;
  uint32 projectId = 5;
  string kernel = 6;
  string file = 7;
  uint32 runId = 8;
  string image = 9;
  string engineId = 10;
  CDPCMLK8SEngineStatus k8SEngineStatus = 11;
  CDPCMLUsageRuntime runtime = 12;
  repeated CDPCMLUsageRuntimeAddon addons = 13;
}

message CDPCMLExperimentEvent {
  string projectId = 1;
  uint32 userId = 2;
  string experimentId = 3;
  string status = 4;
  string action = 5;
}

message CDPCMLExperimentRunEvent {
  string projectId = 1;
  uint32 userId = 2;
  string experimentId = 3;
  string runId = 4;
  string status = 5;
  string action= 6;
  uint32 tags = 7;
  uint32 metrics = 8;
  uint32 params = 9;
  uint32 artifacts = 10;
}

message CDPCMLModelDeployedEvent {
  float cpu = 1;
  float mem = 2;
  uint32 gpu = 3;
  uint32 userId = 4;
  uint32 projectId = 5;
  string kernel = 6;
  string file = 7;
  uint32 replicas = 8;
  string image = 9;
  string functionName = 10;
  string engineId = 11;
  CDPCMLUsageRuntime runtime = 12;
  repeated CDPCMLUsageRuntimeAddon addons = 13;
}

message CDPCMLApplicationDeployedEvent {
  float cpu = 1;
  float mem = 2;
  uint32 gpu = 3;
  uint32 userId = 4;
  uint32 projectId = 5;
  string kernel = 6;
  string file = 7;
  string image = 8;
  string subdomain = 9;
  string engineId = 10;
  uint32 applicationId = 11;
  CDPCMLUsageRuntime runtime = 12;
  repeated CDPCMLUsageRuntimeAddon addons = 13;
  enum EmbeddedApp {
    NONE = 0;
    CDV = 1;
  }
  EmbeddedApp embeddedApp = 14;
}

message CDPCMLApplicationCreatedOrModifiedEvent {
  uint32 applicationId = 1;
  enum BypassAuthentication {
    NOT_CHANGED = 0;
    FALSE = 1;
    TRUE = 2;
  }
  BypassAuthentication bypassAuthentication = 2;
}

message CDPCMLProjectCreatedEvent {
  uint32 userId = 1;
  enum UserType {
    USER = 0;
    USER_ORGANIZATION = 1;
  }
  UserType userType = 2;
  uint32 ownerId = 3;
  uint32 projectId = 4;
  enum Type {
    BUILTIN_TEMPLATE = 0;
    CUSTOM_TEMPLATE = 1;
    GIT = 2;
    LOCAL = 3;
    BLANK = 4;
    FORK = 5;
  }
  Type type = 5;
  bool isPrototype = 6;
  string gitUrl = 7;
  enum VisibilityType {
    PRIVATE = 0;
    ORGANIZATION = 1;
    PUBLIC = 2;
  }
  VisibilityType visibility = 8;
  uint32 forkedProjectId = 9;
}

message CDPCMLPrototypeCompletedEvent {
  uint32 projectId = 1;
  bool succeeded = 2;
}

message CDPCMLLoginEvent {
  uint32 userId = 1;
  string usernameHash = 2;
  bool isAdmin = 3;
  bool isBusiness = 4;
  enum AuthType {
    LOCAL = 0;
    LDAP = 1;
    SAML = 2;
  }
  AuthType authType = 5;
}

message CDPCMLLogoutEvent {
  uint32 userId = 1;
}

message CDPCMLWorkerStartEvent {
  uint32 userId = 1;
  uint32 projectId = 2;
  string engineId = 3;
  string masterId = 4;
  float cpu = 5;
  float mem = 6;
  uint32 gpu = 7;
}

message CDPCMLSparkExecutorEvent {
  string executorId = 1;
  string action = 2;
  string masterId = 3;
  int64 cpu = 4;
  int64 mem = 5;
  int64 gpu = 6;
  string applicationId = 7;
}

message CDPCMLDataConnectionActionEvent {
  uint32 userId = 1;
  uint32 projectId = 2;
  uint32 dataConnectionId = 3;
  string dataConnectionType = 4;
  uint32 workspaceConnectionId = 5;
  bool autoDiscovered = 6;
  bool isProjectConnection = 7;
  string dataConnectionAction = 8;
  string virtualWarehouseName = 9;
  string crn = 10;
  string engineId = 11;
}
