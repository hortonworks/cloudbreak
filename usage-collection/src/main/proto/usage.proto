syntax = "proto3";

package usage;

option java_package = "com.cloudera.thunderhead.service.common.usage";
option java_outer_classname = "UsageProto";
option go_package = "com/cloudera/cdp/protobuf";

// This proto defines the Altus usage event schema. Find the usage system design
// at docs/usage_reporting.md. This proto file is meant to be the documentation
// for the usage event schema, so it should be kept well commented. Note that
// this usage schema is a compatibility surface since we do not want consumers
// of usage data to have their queries or reports break when we make changes.

// A usage event.
message Event {
  // Deprecated event types
  reserved 8, 9, 10, 11, 12, 13, 14, 15, 20, 21;
  // The event's ID.
  string id = 1;
  // The event timestamp in ms from the Java epoch of 1970-01-01T00:00:00Z.
  uint64 timestamp = 2;
  // The version of the usage system that generated the event.
  //
  // This should be bumped when it would make parsing of usage events easier,
  // e.g. when we've changed the semantics around what is and is not optional
  // or have made some semantic change for some event. It need not be bumped
  // for all changes to the usage model. If an event has semantics that have
  // changed over time, it should be noted in the comments for the specific
  // event message below.
  //
  // The current version and history is maintained in UsageReporter.java.
  uint32 version = 3;
  // The event-specific details.
  oneof details {
    // An Altus account was created.
    AltusIamAccountCreated altusIamAccountCreated = 4;
    // An Altus user was created.
    AltusIamUserCreated altusIamUserCreated = 5;
    // An Altus user record was updated.
    AltusIamUserUpdated altusIamUserUpdated = 6;
    // An Altus user was deleted.
    AltusIamUserDeleted altusIamUserDeleted = 29;
    // An Altus user interactively logged in.
    AltusIamUserInteractiveLogin altusIamUserInteractiveLogin = 7;
    // An Altus user interactively login failure.
    AltusIamUserInteractiveLoginFailure altusIamUserInteractiveLoginFailure = 26;
    // An Altus machine user was created.
    AltusIamMachineUserCreated altusIamMachineUserCreated = 16;
    // An Altus machine user was deleted.
    AltusIamMachineUserDeleted altusIamMachineUserDeleted = 17;
    // An Altus access key was created.
    AltusIamAccessKeyCreated altusIamAccessKeyCreated = 18;
    // An Altus access key was deleted.
    AltusIamAccessKeyDeleted altusIamAccessKeyDeleted = 19;
    // An Altus access token was created.
    AltusIamAccessTokenCreated altusIamAccessTokenCreated = 38;
    // An Altus access token was deleted.
    AltusIamAccessTokenDeleted altusIamAccessTokenDeleted = 39;
    // A CDP Datalake cluster was requested to create.
    CDPDatalakeClusterRequested cdpDatalakeClusterRequested = 22;
    // A CDP Datalake cluster's status changed.
    CDPDatalakeClusterStatusChanged cdpDatalakeClusterStatusChanged = 23;
    // A CDP Datahub cluster was requested to create.
    CDPDatahubClusterRequested cdpDatahubClusterRequested = 24;
    // A CDP Datahub cluster's status changed.
    CDPDatahubClusterStatusChanged cdpDatahubClusterStatusChanged = 25;
    // A CDP CML workspace was requested to create.
    CDPCMLWorkspaceRequested cdpCMLWorkspaceRequested = 27;
    // A CDP CML workspace's status changed.
    CDPCMLWorkspaceStatusChanged cdpCMLWorkspaceStatusChanged = 28;
    // A CDP Environment was requested to create
    CDPEnvironmentRequested cdpEnvironmentRequested = 30;
    // A CDP Environment was requested to create
    CDPEnvironmentStatusChanged cdpEnvironmentStatusChanged = 31;
    // A CDP Datalake was requested to create
    CDPDatalakeRequested cdpDatalakeRequested = 32;
    // A CDP Datalake was requested to create
    CDPDatalakeStatusChanged cdpDatalakeStatusChanged = 33;
    // A CDP DataHub was requested to create
    CDPDatahubRequested cdpDatahubRequested = 34;
    // A CDP DataHub was requested to create
    CDPDatahubStatusChanged cdpDatahubStatusChanged = 35;
    // Sync event for a CDP Datalake cluster
    CDPDatalakeSync cdpDatalakeSync = 36;
    // Sync event for a CDP Datahub cluster
    CDPDatahubSync cdpDatahubSync = 37;
    // Autoscale event for a CDP Datahub cluster
    CDPDatahubAutoscaleTriggered cdpDatahubAutoscaleTriggered = 70;
    // Autoscale config changed for a CDP Datahub cluster
    CDPDatahubAutoscaleConfigChanged cdpDatahubAutoscaleConfigChanged = 71;
    // A CDP DF Catalog Artifact was created
    CDPDFCatalogArtifactCreated cdpDFCatalogArtifactCreated = 40;
    // A CDP DF Catalog Artifact was deleted
    CDPDFCatalogArtifactDeleted cdpDFCatalogArtifactDeleted = 41;
    // A CDP DF Catalog Artifact version was created
    CDPDFCatalogArtifactVersionCreated cdpDFCatalogArtifactVersionCreated = 42;
    // A CDP DF Catalog Artifact version was deleted
    CDPDFCatalogArtifactVersionDeleted cdpDFCatalogArtifactVersionDeleted = 43;
    // A CDP DataFlow Service was requested to be enabled, updated, or disabled.
    CDPDFServiceRequested cdpDFServiceRequested = 44;
    // A CDP DataFlow Service's status changed.
    CDPDFServiceStatusChanged cdpDFServiceStatusChanged = 45;
    // A CDP UDX Bundle was initiated
    CDPUDXBundleInitiated cdpUDXBundleInitiated = 46;
    // A CDP UDX Bundle was received
    CDPUDXBundleReceived cdpUDXBundleReceived = 47;
    // A CDP DataFlow Deployment was requested to be created, updated, or terminated.
    CDPDFDeploymentRequested cdpDFDeploymentRequested = 48;
    // A CDP DataFlow Deployment's status changed.
    CDPDFDeploymentStatusChanged cdpDFDeploymentStatusChanged = 49;
    // A CDP DataFlow Service cluster scaled up or down.
    CDPDFServiceNodesChanged cdpDFServiceNodesChanged = 50;
    // A CDP Flow Deployment (NiFi cluster) scaled up or down
    CDPDFDeploymentPodsChanged cdpDFDeploymentPodsChanged = 51;
    // A CDP Liftie cluster was requested to create / update / upgrade / delete.
    CDPLiftieRequested cdpLiftieRequested = 52;
    // A CDP Liftie cluster's status changed.
    CDPLiftieClusterStatusChanged cdpLiftieClusterStatusChanged = 53;
    // A KPI was added to a DataFlow deployment.
    CDPDFDeploymentKpiCreated cdpDFDeploymentKpiCreated = 54;
    // A KPI of a DataFlow deployment was modified.
    CDPDFDeploymentKpiUpdated cdpDFDeploymentKpiUpdated = 55;
    // A KPI of a DataFlow deployment was deleted.
    CDPDFDeploymentKpiDeleted cdpDFDeploymentKpiDeleted = 56;
    // A CDP preflight network check result reported
    CDPNetworkCheck cdpNetworkCheck = 57;
  }
}

// The type of an Altus account.
message AltusIamAccountType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // A regular Altus account.
    REGULAR = 1;
    // A trial Altus account.
    TRIAL = 2;
  }
}

// Generated when a new Altus account has been created.
message AltusIamAccountCreated {
  // The Altus account ID of the new account. This uniquely identifies the
  // account within Altus. This ID is immutable.
  string accountId = 1;
  // The identity provider ID for this account. The identity provider for an
  // account provides user identity information for the account. Note that the
  // same SFDC account can have multiple identity provider associations across
  // multiple Altus accounts. We do this for cloudera.com for example to enable
  // Altus administrative and test accounts.
  string identifyProviderId = 3;
  // The SFDC account ID associated with this account. This will always be set
  // for non-trial accounts. This may or may not be set for trial accounts.
  string sfdcAccountId = 4;
  // The type of Altus account being created.
  AltusIamAccountType.Value accountType = 5;
}

// Generated when a new Altus user has been created.
//
// Updated in usage version 2: first name, last name and email were removed for
//   GDPR compliance.
// Updated in usage version 3: one of identity provider ID or sfdcContactId will
//   always be set.
message AltusIamUserCreated {
  reserved 2, 7, 8, 9;
  // The Altus user ID of the new user. This uniquely identifies the user within
  // Altus. This ID is immutable.
  string userId = 1;
  // The Altus account ID of the user.
  string accountId = 3;
  // The ID of this user in the identity provider. This is not set for all
  // users. If this is not set sfdcContactId will be set.
  string identityProviderUserId = 4;
  // The SFDC contact ID associated with this user. This may or may not be set
  // for trial accounts or for accounts using a non-SFDC identity provider. If
  // this is not set identityProviderUserId will be set.
  string sfdcContactId = 5;
  // Whether the user is an admin in their Altus account.
  bool admin = 6;
  // The CRN for the user.
  string crn = 10;
  // The CRN of the identity provider that the user authenticate with. The value
  // can be one of three:
  // 1) <Cloudera-Default> - the ID for the Cloudera Okta identity provider.
  // 2) Altus-Administration - the ID for te Cloudera Altus Administration
  //    identity provider.
  // 3) an arbitrary CRN: The CRN for the identity provider connector in a
  //    a customer account used to establish identity federation with Altus.
  string identityProviderCrn = 11;
  // Whether the uer was created by an explicit call to createUser IAM API or
  // implicitly when the user logged in interactively.
  bool explicitlyCreated = 12;
}

// Generated when an Altus user record has been updated. This event is only
// generated when an Altus user is updated. The event includes the values of all
// mutable fields after the update, not just the values that have been updated.
//
// Updated in usage version 2: first name, last name and email were removed for
//   GDPR compliance.
message AltusIamUserUpdated {
  reserved 2, 3, 4;
  // The Altus user ID of the updated user.
  string userId = 1;
  // Whether the user is an admin in their Altus account.
  bool admin = 5;
}

// Generated when an Altus IAM user has been deleted.
message AltusIamUserDeleted {
  // The Altus user ID of the deleted user.
  string userId = 1;
}

// Generated when an Altus user logs in interactively.
message AltusIamUserInteractiveLogin {
  // The Altus user ID of the user logging in.
  string userId = 1;
}

// Generated when an Altus user interactive login fails.
message AltusIamUserInteractiveLoginFailure {
  // The Altus user ID of the user logging in.
  string userId = 1;
}

// Generated when an Altus IAM machine user has been created.
message AltusIamMachineUserCreated {
  // The Altus machine user ID of the new machine user. This uniquely identifies
  // the machine user within Altus. This ID is immutable.
  string machineUserId = 1;
  // The Altus account ID of the machine user.
  string accountId = 2;
  // The user-supplied machine user name.
  string machineUserName = 3;
  // The CRN for the machine user.
  string crn = 4;
  // Whether the machine user is an internal machine user.
  bool internal = 5;
}

// Generated when an Altus IAM machine user has been deleted.
message AltusIamMachineUserDeleted {
  // The Altus machine user ID of the deleted machine user.
  string machineUserId = 1;
}


// Generated when an Altus IAM access key has been created.
message AltusIamAccessKeyCreated {
  // The Altus access key ID of the new machine user. This uniquely identifies
  // the access key within Altus. This ID is immutable.
  string accessKeyId = 1;
  // The Altus account ID of the access key.
  string accountId = 2;
  // The CRN of the actor with which this access key is associated. This will be
  // either an IAM user or an IAM machine user.
  string actorCrn = 3;
  // The CRN for the access key.
  string crn = 4;
  // Whether the access key is an internal access key.
  bool internal = 5;
}

// Generated when an Altus IAM access key has been deleted.
message AltusIamAccessKeyDeleted {
  // The Altus access key ID of the deleted access key.
  string accessKeyId = 1;
}

// Generated when an IAM access token has been created.
message AltusIamAccessTokenCreated {
  // The Altus access token ID of the new actor. This uniquely identifies
  // the access token within Altus. This ID is immutable.
  string accessTokenId = 1;
  // The Altus account ID of the access token.
  string accountId = 2;
  // The CRN of the actor with which this access token is associated. This will be
  // either an IAM user or an IAM machine user.
  string actorCrn = 3;
  // The CRN for the access token.
  string crn = 4;
}

// Generated when an IAM access token has been deleted.
message AltusIamAccessTokenDeleted {
  // The access token Id of the deleted access token.
  string accessTokenId = 1;
}

// The type of a CDP environment.
message CDPEnvironmentsEnvironmentType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // AWS
    AWS = 1;
    // Azure
    AZURE = 2;
    // Google
    GCP = 3;
    // YCloud
    YARN = 4;
    // Mock
    MOCK = 5;
  }
}

// The variant of a CDP Cluster.
message CDPCloudProviderVariantType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // AWS
    AWS = 1;
    // AWS_NATIVE
    AWS_NATIVE = 2;
    // Azure
    AZURE = 3;
    // Google
    GCP = 4;
    // YCloud
    YARN = 5;
    // Mock
    MOCK = 6;
  }
}

// The status of a CDP Cloudbreak cluster.
message CDPCloudbreakClusterStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status of a cluster that is being requested to create.
    REQUESTED = 1;
    // The status of a cluster that is being created.
    CREATE_IN_PROGRESS = 2;
    // The status of a cluster that is available for use.
    AVAILABLE = 3;
    // The status of a cluster that is being updated.
    UPDATE_IN_PROGRESS = 4;
    // The status of a cluster that is being requested to update.
    UPDATE_REQUESTED = 5;
    // The status of a cluster that failed to update.
    UPDATE_FAILED = 6;
    // The status of a cluster that has failed creation.
    CREATE_FAILED = 7;
    // The status of a cluster that failed to start in secure mode.
    ENABLE_SECURITY_FAILED = 8;
    // The status of a cluster that is in pre-delete phase.
    PRE_DELETE_IN_PROGRESS = 9;
    // The status of a cluster that is being deleted.
    DELETE_IN_PROGRESS = 10;
    // The status for a cluster that has failed deletion.
    DELETE_FAILED = 11;
    // The status of a cluster that is successfully deleted.
    DELETE_COMPLETED = 12;
    // The status of a cluster that is stooped.
    STOPPED = 13;
    // The status of a cluster that is being requested to stop.
    STOP_REQUESTED = 14;
    // The status of a cluster that is being requested to start.
    START_REQUESTED = 15;
    // The status of a cluster that is being stopped.
    STOP_IN_PROGRESS = 16;
    // The status of a cluster that is being started.
    START_IN_PROGRESS = 17;
    // The status of a cluster that failed to start.
    START_FAILED = 18;
    // The status of a cluster that failed to stop.
    STOP_FAILED = 19;
    // The status of a cluster that is waiting for the sync.
    WAIT_FOR_SYNC = 20;
    // The status of a cluster that had maintenance mode enabled.
    MAINTENANCE_MODE_ENABLED = 21;
  }
}

// Generated when a valid CDP Datalake cluster creation request has
// been made.
message CDPDatalakeClusterRequested {
  // The CDP Datalake ID.
  string datalakeId = 1;
  // The CDP account ID of the Datalake cluster.
  string accountId = 2;
  // The user-supplied Datalake name.
  string datalakeName = 3;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 4;
  // The CRN of the Datalake cluster's environment.
  string environmentCrn = 5;
  // The CDP distribution version of the Datalake cluster.
  string cdpdVersion = 6;
  // The CRN for the Datalake cluster. This could be clusterId for now.
  string crn = 7;
  // The CRN of the Datalake cluster's creator.
  string creatorCrn = 8;
  // The name of the cluster definition.
  string clusterDefinitionName = 9;
}

// Generated when a CDP Datalake cluster's status changed.
message CDPDatalakeClusterStatusChanged {
  // The CDP Datalake ID.
  string datalakeId = 1;
  // the Datalake cluster's status before the change.
  CDPCloudbreakClusterStatus.Value oldStatus = 2;
  // the Datalake cluster's status after the change.
  CDPCloudbreakClusterStatus.Value newStatus = 3;
  // A failure message for the Datalake cluster. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
}

// Generated when a valid CDP Datahub cluster creation request has
// been made.
message CDPDatahubClusterRequested {
  // The CDP cluster ID of the Datahub cluster.
  string clusterId = 1;
  // The CDP account ID of the Datahub cluster.
  string accountId = 2;
  // The user-supplied cluster name.
  string clusterName = 3;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 4;
  // The CRN of the Datahub cluster's environment.
  string environmentCrn = 5;
  // The CDP distribution version of the Datahub cluster.
  string cdpdVersion = 6;
  // The CRN of the Datalake. This will be empty if Datalake is not
  // in use.
  string datalakeCrn = 7;
  // The CRN for the Datahub cluster. This could be clusterId for now.
  string crn = 8;
  // The CRN of the Datahub cluster's creator.
  string creatorCrn = 9;
  // The name of the cluster definition.
  string clusterDefinitionName = 10;
}

// Generated when a CDP Datahub cluster's status changed.
message CDPDatahubClusterStatusChanged {
  // The CDP cluster ID of the Datahub cluster.
  string clusterId = 1;
  // the Datahub cluster's status before the change.
  CDPCloudbreakClusterStatus.Value oldStatus = 2;
  // the Datahub cluster's status after the change.
  CDPCloudbreakClusterStatus.Value newStatus = 3;
  // A failure message for the Datahub cluster. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
}


// The status of a CDP Cloudbreak workspace.
message CDPCMLWorkspaceStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when a workspace is trying to create a kubernetes cluster.
    PROVISION_STARTED = 1;
    // The status when a workspace is done creating a kubernetes cluster.
    PROVISION_FINISHED = 2;
    // The status when a workspace failed to provision a kubernetes cluster.
    PROVISION_FAILED = 3;

    // The status when a workspace is trying to install or upgrade CDSW on a running kubernetes cluster.
    INSTALLATION_STARTED = 4;
    // The status when a workspace is done with installing or upgrading CDSW and ready to be used.
    INSTALLATION_FINISHED = 5;
    // The status when a workspace failed to install CDSW.
    INSTALLATION_FAILED = 6;

    // The status when a workspace is trying to deprovision the running kubernetes cluster.
    DEPROVISION_STARTED = 7;
    // The status when a workspace is done deprovisioning the kubernetes cluster.
    DEPROVISION_FINISHED = 8;
    // The status when a workspace failed to deprovision the kubernetes cluster.
    DEPROVISION_FAILED = 9;

    // The status when a workspace is trying to renew the certificate of a running CDSW.
    RENEW_STARTED = 10;
    // The status when a workspace is done renewing the certificate of a running CDSW.
    RENEW_FINISHED = 11;
    // The status when a workspace could not renew the certificate, but the CDSW cluster still is usable.
    RENEW_WARNING = 12;

    // The status when a workspace is trying to suspend.
    SUSPEND_STARTED = 13;
    // The status when a workspace is suspended.
    SUSPEND_FINISHED = 14;
    // The status when a workspace failed to suspend.
    SUSPEND_FAILED = 15;

    // The status when a workspace is trying to resume.
    RESUME_STARTED = 16;
    // The status when a workspace completed resuming.
    RESUME_FINISHED = 17;
    // The status when a workspace failed to resume.
    RESUME_FAILED = 18;
    // The status when a workspace failed to resume, but the nodes is up and running.
    RESUME_WARNING = 19;

    // The status when a workspace is trying to upgrade.
    UPGRADE_STARTED = 20;
    // The status when a workspace is upgraded.
    UPGRADE_FINISHED = 21;
    // The status when a workspace failed to upgrade.
    UPGRADE_FAILED = 22;

    // The status when the pre-flight validation of a workspace request is started.
    VALIDATION_STARTED = 23;
    // The status when the pre-flight validation of a workspace results in validation success.
    VALIDATION_SUCCEEDED = 24;
    // The status when the pre-flight validation of a workspace results in validation failure.
    VALIDATION_FAILED = 25;

    // The status when the pre-install validation of a workspace request is started.
    PRE_INSTALL_VALIDATION_STARTED = 26;
    // The status when the pre-install validation of a workspace results in validation success.
    PRE_INSTALL_VALIDATION_SUCCEEDED = 27;
    // The status when the pre-install validation of a workspace results in validation failure.
    PRE_INSTALL_VALIDATION_FAILED = 28;
  }
}

// AWS metadata about the workspace when it was created or updated.
message CDPCMLAWSWorkspaceMetadata {
  // Requested min workers for the auto scaling workers group.
  int32 minWorkers = 1;
  // Requested max workers for the auto scaling workers group.
  int32 maxWorkers = 2;
  // Requested min gpu for the auto scaling gpu group.
  int32 minGpu = 3;
  // Requested max gpu for the auto scaling gpu group.
  int32 maxGpu = 4;
  // The instance type selected for the workers auto scaling group.
  string workerInstanceType = 5;
  // The instance type selected for the gpu auto scaling group.
  string gpuInstanceType = 6;
}

// Azure metadata about the workspace when it was created or updated.
message CDPCMLAzureWorkspaceMetadata {
  // Requested min workers for the auto scaling workers group.
  int32 minWorkers = 1;
  // Requested max workers for the auto scaling workers group.
  int32 maxWorkers = 2;
  // Requested min gpu for the auto scaling gpu group.
  int32 minGpu = 3;
  // Requested max gpu for the auto scaling gpu group.
  int32 maxGpu = 4;
  // The instance type selected for the workers auto scaling group.
  string workerInstanceType = 5;
  // The instance type selected for the gpu auto scaling group.
  string gpuInstanceType = 6;
}

// Generated when a valid CDP CML workspace creation request has been made.
message CDPCMLWorkspaceRequested {
  // The CDP workspace CRN of the CML workspace.
  string crn = 1;
  // The CDP account ID of the CML workspace.
  string accountId = 2;
  // The user-supplied workspace name.
  string workspaceName = 3;
  // The environment type.
  CDPEnvironmentsEnvironmentType.Value environmentType = 4;
  // The CRN of the CML workspace's environment.
  string environmentCrn = 5;
  // The CML crud app version.
  string cdpdVersion = 6;
  // The CRN of the CML workspace's creator.
  string creatorCrn = 7;
  // metadata
  oneof metadata {
    // AWS specific metadata about the workspace.
    CDPCMLAWSWorkspaceMetadata cdpCMLAWSWorkspaceMetadata = 8;
    // AZURE specific metadata about the workspace.
    CDPCMLAzureWorkspaceMetadata cdpCMLAzureWorkspaceMetadata = 9;
  }
  // The CML workspace version deployed.
  string workspaceVersion = 10;
  // the request id of the create event
  string requestId = 11;
  // The user-defined tags for the workspace. These should not include automatically
  // added tags that are product-specific. The format of this is a map serialized
  // into a string as json. e.g.:   "tags": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string userTags = 12;
}

// Generated when a CDP CML workspace's status changed.
message CDPCMLWorkspaceStatusChanged {
  // The CDP workspace CRN of the CML workspace.
  string crn = 1;
  // the CML workspace's status before the change.
  CDPCMLWorkspaceStatus.Value oldStatus = 2;
  // the CML workspace's status after the change.
  CDPCMLWorkspaceStatus.Value newStatus = 3;
  // A failure message for the CML workspace. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
  string fromVersion = 5;
  string toVersion = 6;
  // the request id to track the whole event.  Can be any event. (delete, update, create, install, etc)
  string requestId = 7;
  // the liftie cluster id to use when watching the cluster logs
  string liftieId = 8;
  // The user-defined tags for the workspace. These should not include automatically
  // added tags that are product-specific. The format of this is a map serialized
  // into a string as json. e.g.:   "tags": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string userTags = 9;
}

// The status of a CDP Liftie managed cluster.
message CDPLiftieClusterStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when liftie is trying to create a kubernetes cluster.
    PROVISION_STARTED = 1;
    // The status when liftie is done creating a kubernetes cluster.
    PROVISION_FINISHED = 2;
    // The status when liftie failed to provision a kubernetes cluster.
    PROVISION_FAILED = 3;

    // The status when liftie is trying to install deployments in the kubernetes cluster.
    DEPLOYMENT_STARTED = 4;
    // The status when liftie is done installing deployments in the kubernetes cluster.
    DEPLOYMENT_FINISHED = 5;
    // The status when liftie failed to install deployments in the kubernetes cluster.
    DEPLOYMENT_FAILED = 6;

    // The status when liftie is trying to delete a running kubernetes cluster.
    DELETE_STARTED = 7;
    // The status when liftie is done deleting a kubernetes cluster.
    DELETE_FINISHED = 8;
    // The status when liftie failed to delete a kubernetes cluster.
    DELETE_FAILED = 9;

    // The status when lifite is trying to update a cluster.
    UPDATE_STARTED = 10;
    // The status when lifite is done updating a cluster.
    UPDATE_FINISHED = 11;
    // The status when lifite failed to update a cluster.
    UPDATE_FAILED = 12;

    // The status when lifite is trying to upgrade a cluster.
    UPGRADE_STARTED = 13;
    // The status when lifite is done upgrading a cluster.
    UPGRADE_FINISHED = 14;
    // The status when lifite failed to upgrade a cluster.
    UPGRADE_FAILED = 15;

    // The status when liftie is trying to rollback failed provisioned kubernetes cluster.
    ROLLBACK_STARTED = 16;
    // The status when liftie is done rolling back kubernetes cluster.
    ROLLBACK_FINISHED = 17;
    // The status when liftie failed to rollback the kubernetes cluster.
    ROLLBACK_FAILED = 18;

    // The status when liftie is trying to validate a request.
    VALIDATION_STARTED = 19;
    // The status when liftie is done validating the request.
    VALIDATION_FINISHED = 20;
    // The status when liftie failed to validate the request.
    VALIDATION_FAILED = 21;
  }
}

// Autoscaling InstanceGroup metadata about the cluster when it was created or updated.
message CDPLiftieInstanceGroupMetadata {
  // auto scaling instance group name.
  string instanceGroupName = 1;
  // Requested instance type for the auto scaling instance group.
  string instanceType = 2;
  // Requested instance tier (SPOT/ON_DEMAND) for the auto scaling instance group.
  string instanceTier = 3;
  // Requested min workers for the auto scaling instance group.
  int32 minWorkers = 4;
  // Requested max workers for the auto scaling instance group.
  int32 maxWorkers = 5;
  // Requested instance count
  int32 instanceCount = 6;
  // Requested instance root volume
  int32 rootVolume = 7;
  // Reqested instance group is single zone
  bool singleZone = 8;
}

// Collection of Autoscaling Instance Groups metadata
message CDPLiftieInstanceGroups {
  repeated CDPLiftieInstanceGroupMetadata instanceGroup = 1;
}

// AWS metadata about the cluster when it was created or updated.
message CDPLiftieAWSMetadata {
  // AWS region
  string region = 1;
}

// Azure metadata about the cluster when it was created or updated.
message CDPLiftieAzureMetadata {
  // Azure availability zone
  string region = 1;
}

// GCP metadata about the cluster when it was created or updated.
message CDPLiftieGCPMetadata {
  string region = 1;
}

// Generated when a valid CDP Liftie cluster provisioning request has been made.
message CDPLiftieRequested {
  // The CDP actor CRN of the request.
  string actorCrn = 1;
  // The tenant of the request.
  string tenant = 2;
  // The CRN of the environment.
  string envCrn = 3;
  // The Liftie cluster Id.
  string clusterId = 4;
  // The Liftie app version.
  string liftieVersion = 5;
  // instance groups metadata
  CDPLiftieInstanceGroups cdpLiftieInstanceGroups = 6;
  // entitlements. The format of this is a map serialized
  // into a string as json. e.g.: "cdpLiftieAddons": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string cdpLiftieEntitlements = 7;
  // add-ons. The format of this is a map serialized
  // into a string as json. e.g.: "cdpLiftieAddons": "{\"key\":\"val\"}"
  string cdpLiftieAddons = 8;
  // metadata
  oneof metadata {
    // AWS specific metadata about the workspace.
    CDPLiftieAWSMetadata cdpLiftieAWSMetadata = 9;
    // AZURE specific metadata about the workspace.
    CDPLiftieAzureMetadata cdpLiftieAzureMetadata = 10;
    // GCP specific metadata about the workspace.
    CDPLiftieGCPMetadata cdpLiftieGCPMetadata = 11;
  }
  // the kubernetes version requested
  string kubernetesVersion = 12;
  // the request id of the create event
  string requestId = 13;
  // the experience that send the request, (CML, DEX, etc.)
  string experience = 14;
  // operation type (Create, Update, etc.)
  string opType = 15;
  // api type (Cluster, User, etc.)
  string apiType = 16;
}

// Generated when a CDP Liftie cluster's status changed.
message CDPLiftieClusterStatusChanged {
  // Deprecated/Removed fields
  reserved 5;
  // The tenant of the request.
  string tenant = 1;
  // The CRN of the environment.
  string envCrn = 2;
  // The Liftie app version.
  string clusterId = 3;
  // The cloud provider
  string provider = 4;
  // the Liftie Cluster's status before the change.
  CDPLiftieClusterStatus.Value oldStatus = 6;
  // the Liftie Cluster's status after the change.
  CDPLiftieClusterStatus.Value newStatus = 7;
  // A failure message for the Liftie Cluster. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 8;
  // old kubernetes version.
  string oldVersion = 9;
  // new kubernetes version
  string newVersion = 10;
  // old instance groups.
  CDPLiftieInstanceGroups oldInstanceGroups = 11;
  // new instance groups.
  CDPLiftieInstanceGroups newInstanceGroups = 12;
  // the request id to track the whole event.  Can be any event. (delete, update, create, install, etc)
  string requestId = 13;
  // the experience that send the request, (CML, DEX, etc.)
  string experience = 14;
  // operation type (Create, Update, etc.)
  string opType = 15;
  // api type (Cluster, User, etc.)
  string apiType = 16;
}

// The status of a CDP request
message CDPRequestProcessingStep {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // First step of the request processing
    INIT = 1;
    // Last step of the request processing
    FINAL = 2;
    // Indicating that the event is a sync event
    SYNC = 3;
  }
}

// The status of a CDP environment
message CDPEnvironmentStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when CDP CP is trying to create an environment.
    CREATE_STARTED = 1;
    // The status when CDP CP is done creating an environment.
    CREATE_FINISHED = 2;
    // The status when CDP CP failed to provision an environment.
    CREATE_FAILED = 3;

    // The status when CDP CP is trying to delete an environment.
    DELETE_STARTED = 4;
    // The status when CDP CP is done deleting an environment.
    DELETE_FINISHED = 5;
    //  The status when CDP CP failed to delete an environment.
    DELETE_FAILED = 6;

    // The status when an environment is trying to suspend.
    SUSPEND_STARTED = 7;
    // The status when an environment is suspended.
    SUSPEND_FINISHED = 8;
    // The status when an environment failed to suspend.
    SUSPEND_FAILED = 9;

    // The status when an environment is trying to resume.
    RESUME_STARTED = 10;
    // The status when an environment completed resuming.
    RESUME_FINISHED = 11;
    // The status when an environment failed to resume.
    RESUME_FAILED = 12;
  }
}

// The status of a CDP Cluster
message CDPClusterStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status when CDP CP is trying to create a cluster.
    CREATE_STARTED = 1;
    // The status when CDP CP is done creating a cluster.
    CREATE_FINISHED = 2;
    // The status when CDP CP failed to provision a cluster.
    CREATE_FAILED = 3;

    // The status when CDP CP is trying to delete a cluster.
    DELETE_STARTED = 4;
    // The status when CDP CP is done deleting a cluster.
    DELETE_FINISHED = 5;
    //  The status when CDP CP failed to delete a cluster.
    DELETE_FAILED = 6;

    // The status when a cluster is trying to suspend.
    SUSPEND_STARTED = 7;
    // The status when a cluster is suspended.
    SUSPEND_FINISHED = 8;
    // The status when a cluster failed to suspend.
    SUSPEND_FAILED = 9;

    // The status when a cluster is trying to resume.
    RESUME_STARTED = 10;
    // The status when a cluster completed resuming.
    RESUME_FINISHED = 11;
    // The status when a cluster failed to resume.
    RESUME_FAILED = 12;

    // The status when a cluster is trying to upgrade.
    UPGRADE_STARTED = 13;
    // The status when a cluster completed upgrading.
    UPGRADE_FINISHED = 14;
    // The status when a cluster failed to upgrade.
    UPGRADE_FAILED = 15;

    // The status when a cluster is trying to repair.
    REPAIR_STARTED = 16;
    // The status when a cluster completed repairing.
    REPAIR_FINISHED = 17;
    // The status when a cluster failed to repair.
    REPAIR_FAILED = 18;

    // The status when a cluster is trying to upscale.
    UPSCALE_STARTED = 19;
    // The status when a cluster completed upscaling.
    UPSCALE_FINISHED = 20;
    // The status when a cluster failed to upscale.
    UPSCALE_FAILED = 21;

    // The status when a cluster is trying to downscale.
    DOWNSCALE_STARTED = 22;
    // The status when a cluster completed downscaling.
    DOWNSCALE_FINISHED = 23;
    // The status when a cluster failed to downscale.
    DOWNSCALE_FAILED = 24;

    // The status when CB is trying to renew the public facing certificate of the cluster, Letsencrypt certificate
    RENEW_PUBLIC_CERT_STARTED = 25;
    // The status when CB is done renewing the public facing certificate of the cluster, Letsencrypt certificate
    RENEW_PUBLIC_CERT_FINISHED = 26;
    // The status when CB could not renew the public facing certificate of the cluster, Letsencrypt certificate
    RENEW_PUBLIC_CERT_FAILED = 27;

    // The status when CB is trying to renew the internal certificates of the cluster
    RENEW_CLUSTER_INTERNAL_CERT_STARTED = 28;
    // The status when CB is done renewing the internal certificates of the cluster
    RENEW_CLUSTER_INTERNAL_CERT_FINISHED = 29;
    // The status when CB could not renew the internal certificates of the cluster
    RENEW_CLUSTER_INTERNAL_CERT_FAILED = 30;

    // The status when CB is trying to do a backup of the cluster
    BACKUP_STARTED = 31;
    // The status when CB has finished backing up the cluster
    BACKUP_FINISHED = 32;
    // The status when CB could not do a backup of the cluster
    BACKUP_FAILED = 33;

    // The status when CB is trying to create a diagnostic bundle for the the cluster
    DIAGNOSTIC_COLLECTION_STARTED = 34;
    // The status when CB is done creating the diagnostic bundle for the the cluster
    DIAGNOSTIC_COLLECTION_FINISHED = 35;
    // The status when CB could not create the diagnostic bundle for the the cluster
    DIAGNOSTIC_COLLECTION_FAILED = 36;
  }
}

message CDPOperationDetails {
  // The CDP account id of the event
  string accountId = 1;
  // The CRN for the resource
  string resourceCrn = 2;
  // Name of the resource
  string resourceName = 3;
  // User CRN initiated this event (it might be internal actor)
  string initiatorCrn = 4;
  // Version of the application that created this event
  string applicationVersion = 5;
  // Request processing type
  CDPRequestProcessingStep.Value cdpRequestProcessingStep = 6;
  // Flow UUID, to make it easy to identify which flow has triggered this event
  string flowId = 7;
  // Flow Chain UUID, to make it easy to identify which flowchain has triggered this event
  string flowChainId = 8;
  // Flow state when this event is written
  string flowState = 9;
  // Correlation ID to correlate events written together
  string correlationId = 10;
  // Cloud provider identifier
  CDPEnvironmentsEnvironmentType.Value environmentType = 11;
}

message CDPEnvironmentDetails {
  // Cloud provider identifier
  CDPEnvironmentsEnvironmentType.Value environmentType = 1;
  // Region of the deployment
  string region = 2;
  // Number of availability zones used in the environment
  int32 numberOfAvailabilityZones = 3;
  // Number of availability zones used in the environment
  string availabilityZones = 4;
  // Network metadata
  CDPNetworkDetails networkDetails = 5;
  // AWS specific details of the environment
  CDPEnvironmentAwsDetails awsDetails = 6;
  // Azure specific details of the environment
  CDPEnvironmentAzureDetails azureDetails = 7;
  // The user-defined tags for the environment. These should not include automatically
  // added tags that are product-specific. The format of this is a map serialized
  // into a string as json. e.g.:   "tags": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string userTags = 8;
}

message CDPFreeIPADetails {
  // Number of nodes
  int32 nodes = 1;
  // Shows whether spot is used for any FreeIPA nodes
  bool spot = 2;
}

// Azure specific environment details
message CDPEnvironmentAzureDetails {
  // True if user provides a resource group, allowing CDP to create resources only within the specified resource group
  bool singleResourceGroup = 1;
  // True if user provides encryption key URL to encrypt Azure managed disks with CMK
  bool resourceEncryptionEnabled = 2;
}

// AWS specific environment details
message CDPEnvironmentAwsDetails {
}

message CDPEnvironmentTelemetryFeatureDetails {
  // Workload analytics is enabled on this environment
  string workloadAnalytics = 1;
  // Cluster log collection is enabled on this environment
  string clusterLogsCollection = 2;
}

message CDPProxyDetails {
  // Shows whether a proxy is used
  bool proxy = 1;
  // Shows whether it is http or https
  string protocol = 2;
  // Shows whether NONE or BASIC auth
  string authentication = 3;
}

message CDPNetworkDetails {
  // Whether the network is created by CDP CP or by the customer
  string networkType = 1;
  // How CDP CP connects to the environment
  string connectivity = 2;
  // How many public subnets are used
  int32 numberPublicSubnets = 3;
  // How many public subnets are used
  int32 numberPrivateSubnets = 4;
  // Private endpoints are created for this particular environment
  string serviceEndpointCreation = 5;
  // Metadata around what type of proxy is used in this environment
  CDPProxyDetails proxyDetails = 6;
  // Public Endpoint Access Gateway (aka semi-private networks) are enabled or not
  string publicEndpointAccessGateway = 7;
  // Whether the security groups are created by CDP CP or by the customer
  string securityAccessType = 8;
}

// Generated when Environment creation has been requested or finished
message CDPEnvironmentRequested {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Environment metadata
  CDPEnvironmentDetails environmentDetails = 2;
  // Data collection metadata
  CDPEnvironmentTelemetryFeatureDetails telemetryFeatureDetails = 3;
  // FreeIPA metadata
  CDPFreeIPADetails freeIPA = 4;
}

// Generated when Environment status has changed
message CDPEnvironmentStatusChanged {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // The environment's status before the change.
  CDPEnvironmentStatus.Value oldStatus = 2;
  // The environment's status after the change.
  CDPEnvironmentStatus.Value newStatus = 3;
  // Describe the reason of the failure if any
  string failureReason = 4;
  // Environment metadata
  CDPEnvironmentDetails environmentDetails = 5;
  // Data collection metadata
  CDPEnvironmentTelemetryFeatureDetails telemetryFeatureDetails = 6;
  // FreeIPA metadata
  CDPFreeIPADetails freeIPA = 7;
}

message CDPImageDetails {
  // CDP Image ID
  string imageId = 1;
  // Image catalog name
  string imageCatalog = 2;
}

message CDPClusterShape {
  // Cluster template
  string clusterTemplateName = 1;
  // Number of nodes
  int32 nodes = 2;
  // Detailed node count per host group
  string hostGroupNodeCount = 3;
  // Definition details in a json format
  string definitionDetails = 4;
  // Indicating whether Temporary Storage is used in the cluster
  bool temporaryStorageUsed = 5;
}

message CDPVersionDetails {
  // Cloudera Runtime Version
  string crVersion = 1;
  // CM Version
  string cmVersion = 2;
  // CDPD Version
  string cdpdVersion = 3;
  // Salt Version
  string saltVersion = 4;
  // Date when the OS was updated last time
  string osPatchLevel = 5;
  // Key value pairs of every version what we know
  string all = 6;
}

message CDPClusterDetails {
  // Shape of the cluster
  CDPClusterShape clusterShape = 1;
  // Version details
  CDPVersionDetails versionDetails = 2;
  // Image details
  CDPImageDetails imageDetails = 3;
  // The user-defined tags for the cluster. These should not include automatically
  // added tags that are product-specific. The format of this is a map serialized
  // into a string as json. e.g.:   "tags": "{\"key1\":\"value1\",\"key2\":\"value2\"}"
  string userTags = 4;
  // The cluster specific variant e.g.: in case of AWS it can be AWS or AWS_NATIVE
  CDPCloudProviderVariantType.Value cloudProviderVariant = 5;
}

message CDPStatusDetails {
  // Status of the stack
  string stackStatus = 1;
  // Detailed status of the stack
  string stackDetailedStatus = 2;
  // Status reason of the stack
  string stackStatusReason = 3;
  // Status of the cluster
  string clusterStatus = 4;
  // Status reason of the cluster
  string clusterStatusReason = 5;
}

message CDPDatalakeFeatures {
  // Ranger Authorization feature tracking
  CDPRaz raz = 1;
}

message CDPRaz {
  // Status whether RAZ is enabled for this cluster ot not
  string status = 1;
}

// Generated when Datalake creation has been requested or finished
message CDPDatalakeRequested {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Environment Crn
  string environmentCrn = 2;
  // Cluster details for Datalake
  CDPClusterDetails clusterDetails = 3;
  // Feature tracking for DL
  CDPDatalakeFeatures features = 4;
}

// Generated when Datalake status has changed
message CDPDatalakeStatusChanged {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // The datalake's status before the change.
  CDPClusterStatus.Value oldStatus = 2;
  // The datalake's status after the change.
  CDPClusterStatus.Value newStatus = 3;
  // Describes the detailed status of the stack and the cluster of the datalake
  CDPStatusDetails statusDetails = 4;
  // Environment Crn
  string environmentCrn = 5;
  // Cluster details for Datalake
  CDPClusterDetails clusterDetails = 6;
  // Feature tracking for DL
  CDPDatalakeFeatures features = 7;
}

// Generated when Datahub creation has been requested or finished
message CDPDatahubRequested {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Environment Crn
  string environmentCrn = 2;
  // Details for datahub
  CDPClusterDetails clusterDetails = 3;
}

// Generated when Datahub status has changed
message CDPDatahubStatusChanged {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // The datahub's status before the change.
  CDPClusterStatus.Value oldStatus = 2;
  // The datahub's status after the change.
  CDPClusterStatus.Value newStatus = 3;
  // Describes the detailed status of the stack and the cluster of the datahub
  CDPStatusDetails statusDetails = 4;
  // Environment Crn
  string environmentCrn = 5;
  // Cluster details for Datahub
  CDPClusterDetails clusterDetails = 6;
}

message CDPSyncDetails {
  // Status of the stack
  string status = 1;
  // Detailed status of the stack
  string detailedStatus = 2;
  // The timestamp of the start of the cluster creation
  uint64 clusterCreationStarted = 3;
  // The timestamp of the finish of the cluster creation
  uint64 clusterCreationFinished = 4;
}

// Generated periodically for Datalake clusters
message CDPDatalakeSync {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Additional metadata about the cluster
  CDPSyncDetails syncDetails = 2;
  // Details for datalake
  CDPClusterDetails clusterDetails = 3;
  // Describes the detailed status of the stack and the cluster of the datalake
  CDPStatusDetails statusDetails = 4;
}

// Generated periodically for Datahub clusters
message CDPDatahubSync {
  // Operation metadata
  CDPOperationDetails operationDetails = 1;
  // Additional metadata about the cluster
  CDPSyncDetails syncDetails = 2;
  // Details for datahub
  CDPClusterDetails clusterDetails = 3;
  // Describes the detailed status of the stack and the cluster of the datahub
  CDPStatusDetails statusDetails = 4;
}

// Supported types of catalog artifacts in DF.
message CDPDFCatalogArtifactType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // NiFi Flow
    FLOW = 1;
  }
}

// Generated periodically when users upload/create a new catalog artifact in DF
message CDPDFCatalogArtifactCreated {
  // The id of the artifact created.
  string artifactId = 1;
  // The CDP account ID.
  string accountId = 2;
  // The crn of the catalog artifact.
  string crn = 3;
  // The type of artifact created
  CDPDFCatalogArtifactType.Value type = 4;
}

// Generated periodically when users delete a catalog artifact in DF
message CDPDFCatalogArtifactDeleted {
  // The id of the artifact deleted.
  string artifactId = 1;
  // The CDP account ID.
  string accountId = 2;
  // The crn of the catalog artifact.
  string crn = 3;
  // The type of artifact deleted
  CDPDFCatalogArtifactType.Value type = 4;
}

// Generated periodically when users upload/create a new version of a catalog artifact in DF
message CDPDFCatalogArtifactVersionCreated {
  // The id of the catalog artifact version.
  string versionId = 1;
  // The id of the catalog artifact associated with the version.
  string artifactId = 2;
  // The crn of the catalog artifact version.
  string crn = 3;
  // The CDP account ID of the version.
  string accountId = 4;
}

// Generated periodically when users delete a version of a catalog artifact in DF
message CDPDFCatalogArtifactVersionDeleted {
  // The id of the catalog artifact version.
  string versionId = 1;
  // The id of the catalog artifact associated with the version.
  string artifactId = 2;
  // The crn of the catalog artifact version.
  string crn = 3;
  // The CDP account ID of the version.
  string accountId = 4;
}

// The status of a CDP DataFlow service.
message CDPDFServiceStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status of a df service that is being requested to enable.
    ENABLE_REQUESTED = 1;
    // The status of a df service that is being enabled.
    ENABLE_IN_PROGRESS = 2;
    // The status of a df service that is available for use.
    ENABLE_COMPLETED = 3;
    // The status of a df service that failed to enable.
    ENABLE_FAILED = 4;
    // The status of a df service that is being requested to enable.
    DISABLE_REQUESTED = 5;
    // The status of a df service that is being disabled.
    DISABLE_IN_PROGRESS = 6;
    // The status of a df service that is successfully disabled.
    DISABLE_COMPLETED = 7;
    // The status of a df service that failed to disable.
    DISABLE_FAILED = 8;
    // The status of a df service that is being requested to update.
    UPDATE_REQUESTED = 9;
    // The status of a df service that is being updated.
    UPDATE_IN_PROGRESS = 10;
    // The status of a df service that failed to update.
    UPDATE_FAILED = 11;
    // The status of a df service was updated successfully.
    UPDATE_COMPLETED = 12;
  }
}

// Common items among all async workflow executions of DF.
message CDPDFOperationDetails {
  // The id of the resource that is the subject of the operation.
  string id = 1;
  // The crn of the resource that is the subject of the operation.
  string crn = 2;
  // The CDP account ID.
  string accountId = 3;
  // The workflow id associated with the operation
  string workflowId = 4;
  // The run id of workflow execution.
  string runId = 5;
}

// Generated when DataFlow Service enable, update, or disable has been requested
message CDPDFServiceRequested {
  // Operation metadata
  CDPDFOperationDetails operationDetails = 1;
  // The crn of the CDP environment being enabled for DF.
  string environmentCrn = 2;
  // The environment type / cloud provider.
  CDPEnvironmentsEnvironmentType.Value environmentType = 3;
  // The instance type of nodes used in the DF service
  string instanceType = 4;
  // Minimum number of nodes.
  int32 minNodes = 5;
  // Maximum number of nodes to scale to.
  int32 maxNodes = 6;
  // Version of k8s requested to be provisioned.
  string k8sServerVersion = 7;
  // Requested version of DataFlow service.
  string version = 8;
  // Is the load balancer publicly available on the internet?
  bool publicEndpoint = 9;
  // Is K8S API access restricted by ip ranges (CIDR)?
  bool accessRestricted = 10;
  // The initial status of the df service. Should be ENABLE_REQUESTED, UPDATE_REQUESTED, or DISABLE_REQUESTED.
  CDPDFServiceStatus.Value status = 11;
  // Is the load balancer (if configured) restricting access by ip ranges?
  bool loadBalancerAccessRestricted = 12;
}

message CDPDFServiceStatusChanged {
  // Operation metadata
  CDPDFOperationDetails operationDetails = 1;
  // The status of the df service before the change
  CDPDFServiceStatus.Value oldStatus = 2;
  // The status of the df service after the change
  CDPDFServiceStatus.Value newStatus = 3;
  // A failure message for the df service. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
}

// The status of a CDP Deployment.
message CDPDFDeploymentStatus {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The status of a deployment that is being requested.
    CREATE_REQUESTED = 1;
    // The status of a deployment.
    CREATE_IN_PROGRESS = 2;
    // The status of a deployment that is available for use.
    CREATE_COMPLETED = 3;
    // The status of a deployment that failed.
    CREATE_FAILED = 4;
    // The status of a deployment that is being requested.
    TERMINATE_REQUESTED = 5;
    // The status of a deployment that is being terminated.
    TERMINATE_IN_PROGRESS = 6;
    // The status of a deployment that is successfully terminated.
    TERMINATE_COMPLETED = 7;
    // The status of a deployment that failed to terminate.
    TERMINATE_FAILED = 8;
    // The status of a deployment that is being requested to terminate.
    UPDATE_REQUESTED = 9;
    // The status of a deployment that is being updated.
    UPDATE_IN_PROGRESS = 10;
    // The status of a deployment was updated successfully.
    UPDATE_COMPLETED = 11;
    // The status of a deployment that failed to update.
    UPDATE_FAILED = 12;
  }
}

message CDPDFDeploymentRequested {
  // Operation metadata
  CDPDFOperationDetails operationDetails = 1;
  // The crn of the CDP environment where the deployment is to land.
  string environmentCrn = 2;
  // The number of parameters defined for the deployment
  int32 parameterCount = 3;
  // The number of KPIs monitored in the deployment
  int32 kpiCount = 4;
  // Is autoscaling of the NiFi cluster enabled?
  bool autoscalingEnabled = 5;
  // Minimum number of nodes.
  int32 minNodes = 6;
  // Maximum number of nodes to scale to.
  int32 maxNodes = 7;
  // The node type selected (small, medium, large, x-large).
  string nodeType = 8;
  // The version of NiFi to run as part of the deployment
  string nifiVersion = 9;
  // The initial status of the Deployment. Should be CREATE_REQUESTED, UPDATE_REQUESTED, or TERMINATE_REQUESTED
  CDPDFDeploymentStatus.Value status = 10;
  // Does the deployment have asset references?
  bool assetReferences = 11;
}

message CDPDFDeploymentStatusChanged {
  // Operation metadata
  CDPDFOperationDetails operationDetails = 1;
  // The status of the deployment before the change
  CDPDFDeploymentStatus.Value oldStatus = 2;
  // The status of the deployment after the change
  CDPDFDeploymentStatus.Value newStatus = 3;
  // A failure message for the df service. This will only be set if newStatus is
  // *_FAILED.
  string failureReason = 4;
}

// Generated when users initiate diagnostics collection
message CDPUDXBundleInitiated {
  // The details for the bundle.
  CDPUDXBundleDetails bundleDetails = 1;
  // The CRN of the user who initiated the diagnostics collection.
  string initiatorCrn = 2;
  // The support case number for the diagnostics collection.
  string caseNumber = 3;
}

// Generated when a new diagnostics bundle is received.
message CDPUDXBundleReceived {
  // The details for the bundle.
  CDPUDXBundleDetails bundleDetails = 1;
  // The host for which the bundle was collected.
  string host = 2;
  // The processing status of the diagnostics collection.
  string status = 3;
}

// Details for a UDX diagnostics bundle
message CDPUDXBundleDetails {
  // The CDP account ID of the resource for which diagnostics is being collected.
  string accountId = 1;
  // The uuid for the diagnostics collection.
  string uuid = 2;
  // The CRN of the environment.
  string environmentCrn = 3;
  // The CRN of the resource for which diagnostics is being collected.
  string resourceCrn = 4;
  // The type of the diagnostics bundle.
  string type = 5;
}

// Generated when a DataFlow Service's number of nodes change.
message CDPDFServiceNodesChanged {
  // The id of the DataFlow Service.
  string id = 1;
  // The crn of the DataFlow Service.
  string crn = 2;
  // The CDP account ID.
  string accountId = 3;
  // The crn of the CDP environment.
  string environmentCrn = 4;
  // The number of nodes before the scaling event occurred.
  int32 oldNodeCount = 5;
  // The number of nodes after the scaling event occurred.
  int32 newNodeCount = 6;
}

message CDPDFDeploymentPodsChanged {
  // The id of the DataFlow Deployment.
  string id = 1;
  // The crn of the DataFlow Deployment.
  string crn = 2;
  // The CDP account ID.
  string accountId = 3;
  // The crn of the CDP environment.
  string environmentCrn = 4;
  // The id of the DataFlow Service.
  string dataFlowServiceId = 5;
  // The crn of the DataFlow Service.
  string dataFlowServiceCrn = 6;
  // The number of pods before the scaling event occurred.
  int32 oldPodCount = 7;
  // The number of pods after the scaling event occurred.
  int32 newPodCount = 8;
}

// General information regarding a KPI created by a user.
message CDPDFKpiDetails {
  // The scope of the kpi. (SYSTEM, NIFI_FLOW, NIFI_PROCESSOR, NIFI_PROCESS_GROUP, NIFI_CONNECTION, ...)
  string scope = 1;
  // The actual metric being monitored. (cpu, data in, data out, bytes read, bytes written, ...)
  string metric = 2;
  // Whether or not an alert was set to trigger at a threshold or not.
  bool alert = 3;
}

// Generated when a user creates a new KPI for a deployment
message CDPDFDeploymentKpiCreated {
  // The id of the deployment kpi.
  string id = 1;
  // The id of the deployment that the kpi is associated with.
  string deploymentId = 2;
  // The CDP account ID.
  string accountId = 3;
  // The crn of the CDP environment.
  string environmentCrn = 4;
  // The details about the kpi created
  CDPDFKpiDetails kpiDetails = 5;
}

// Generated when a user modifies an existing KPI.
message CDPDFDeploymentKpiUpdated {
  // The id of the deployment kpi.
  string id = 1;
  // The id of the deployment that the kpi is associated with.
  string deploymentId = 2;
  // The CDP account ID.
  string accountId = 3;
  // The crn of the CDP environment.
  string environmentCrn = 4;
  // The details about the kpi created
  CDPDFKpiDetails kpiDetails = 5;
}

// Generated when a user deletes a KPI. The details are not important. Just tracking the fact it happened.
message CDPDFDeploymentKpiDeleted {
  // The id of the deployment kpi.
  string id = 1;
}

//Autoscale Policy Type
message AutoscalePolicyType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // The schedule-based autoscale policy.
    TIME_BASED = 1;
    // The load-based autoscale policy.
    LOAD_BASED = 2;
  }
}

//Autoscale Policy Definition
message CDPAutoscalePolicyDefinition {
  // The autoscale policy type
  AutoscalePolicyType.Value autoscalePolicyType = 1;
  // The autoscale policy parameters
  string autoscalePolicyParameters = 2;
  // The autoscale host group
  string autoscalingHostGroup = 3;
  // The autoscale policy name.
  string autoscalingPolicyName = 4;
}

//Autoscale Trigger Status
message AutoscaleScalingStatusType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Scaling requested successfully.
    SCALING_REQUESTED = 1;
    // Scaling request failed.
    SCALING_REQUEST_FAILED = 2;
    // Autoscale trigger failed.
    AUTOSCALE_TRIGGER_FAILED = 3;
  }
}

//Autoscale Trigger Details
message CDPAutoscaleTriggerDetails {
  // The CDP account ID of the datahub cluster.
  string accountId = 1;
  // The user-supplied cluster name.
  string clusterName = 2;
  // The cluster crn.
  string clusterCrn = 3;
  // The autoscaling policy definition.
  CDPAutoscalePolicyDefinition autoscalingPolicyDefinition = 4;
  // The original hostGroup node count.
  int32 originalHostGroupNodeCount = 5;
  // The desired hostGroup node count.
  int32 desiredHostGroupNodeCount = 6;
  // The autoscaling action that was performed.
  string autoscalingAction = 7;
  // The status of the trigger
  AutoscaleScalingStatusType.Value autoscaleStatus = 8;
}

// Generated after autoscale has been triggered.
message CDPDatahubAutoscaleTriggered {
  // The autoscaling trigger details
  CDPAutoscaleTriggerDetails autoscaleTriggerDetails = 1;
}

// Generated after autoscale config has been updated.
message CDPDatahubAutoscaleConfigChanged {
  // The user crn who updated the autoscale config.
  string userCrn = 1;
  // True if autoscaling is enabled for the cluster.
  bool autoscalingEnabled = 2;
  // The autoscaling policy definition.
  repeated CDPAutoscalePolicyDefinition autoscalingPolicyDefinition = 3;
  // The CDP account ID of the datahub cluster.
  string accountId = 4;
  // The user-supplied cluster name.
  string clusterName = 5;
  // The cluster crn.
  string clusterCrn = 6;
}

// Holds network check result
message CDPNetworkCheckResult {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // Successful result for a network check
    SUCCESSFUL = 1;
    // Failed result for a network check
    FAILED = 2;
  }
}

// Holds network check type
message CDPNetworkCheckType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // AWS S3 endpoint.
    S3 = 1;
    // AWS Security Token Service endpoint.
    STS = 2;
    // ADLS v2 (ABFS) endpoint (<azure_storage_account>.dfs.core.windows.net).
    ADLSV2 = 3;
    // Azure management endpoint (management.azure.com).
    AZURE_MGMT = 4;
    // GCS endpoint (storage.googleapis.com).
    GCS = 5;
    // Cloudera archive endpoint (archive.cloudera.com).
    CLOUDERA_ARCHIVE = 6;
    // DataBus API endpoint.
    DATABUS = 7;
    // DataBus S3 endpoint.
    DATABUS_S3 = 8;
    // Cloudera service delivery cache S3 address (cloudera-service-delivery-cache.s3.amazonaws.com).
    SERVICE_DELIVERY_CACHE_S3 = 9;
  }
}

// Pre flight network check result for VM based clusters.
message CDPNetworkCheck {
  // Type of the pre flight network check.
  CDPNetworkCheckType.Value type = 1;
  // Result of the pre flight network check.
  CDPNetworkCheckResult.Value result = 2;
  // CDP account id. This uniquely identifies the account within CDP
  string accountId = 3;
  // The crn of the cluster resource.
  string crn = 4;
  // List of hosts where network check failed
  repeated string failedHosts = 5;
}
