syntax = "proto3";

package meteringevents;

option java_package = "com.cloudera.thunderhead.service.metering.events";
option java_outer_classname = "MeteringEventsProto";


//
// The Event model for Metering Events.
//
// References:
// [1] CDP Metering Technical Specification - https://docs.google.com/document/d/1A_Z__HeI7GIoI0uqgxMdIQbrascjfxdli3j0d0dU6wc/edit?usp=sharing
//

//
// The service types. Any new services added to CDP which will have their own
// billable events must be added here. These values should match the customer
// visible values used in the CLI.
//
// This list below is a subset of the values in the Crn.Service enumeration.
// The exact value need not match, but it should correspond to some Crn.Service.
//
message ServiceType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // DataHub
    DATAHUB = 1;
    // Machine Learning
    MACHINE_LEARNING = 2;
    // Data Warehouse
    DATA_WAREHOUSE = 3;
    // Data Engineering
    DATA_ENGINEERING = 4;
    // Operational Database
    OPERATIONAL_DB = 5;
    // Data Flow
    DATA_FLOW = 6;
    // Environment, which contains one or multiple services
    ENVIRONMENT = 7;
  }
}

//
// Service features. Features allow a product to have different rates based on
// the feature used. A service is not required to have any features.
//
message ServiceFeature {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // NiFi enabled
    NIFI = 1;
    // Impala engine
    IMPALA = 2;
    // Hive engine
    HIVE = 3;
    // Druid engine
    DRUID = 4;
    // Kafka
    KAFKA = 5;
    // Flink
    FLINK = 6;
    // Spark
    SPARK = 7;
    // Spark3
    SPARK3 = 8;
    // Kudu
    KUDU = 9;
    // Solr
    SOLR = 10;
    // HBase
    HBASE = 11;
    // NaaF
    NAAF = 12;
    // Object storage
    OBJECT_STORAGE = 13;
    // File storage
    FILE_STORAGE = 14;
    // Low latency storage
    LOW_LATENCY_STORAGE = 15;
  }
}

//
// The service configuration. Any non-standard configuration that could
// result in different rates should be identified here.
//
message ServiceConfiguration {
  // The feature used by this service configuration.
  ServiceFeature.Value serviceFeature = 1;
}

//
// The cloud platforms. Any new cloud providers supported by CDP services will
// be added here. These values should match the customer visible values.
//
message Platform {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // AWS
    AWS = 1;
    // Azure
    AZURE = 2;
    // GCP
    GCP = 3;
  }
}

//
// A metering event.
//
message MeteringEvent {
  //
  // The event's ID. This should be a unique ID generated by the client in
  // uuid v4 format. This is used on the server for detection of duplicate
  // events.
  //
  // e.g.: 4d4a1472-d5e3-464e-a763-e4bbb0d99a77
  //
  string id = 1;
  //
  // The event timestamp in ms from the epoch of 1970-01-01T00:00:00Z.
  // Note that epoch time is in UTC.
  //
  uint64 timestamp = 2;
  //
  // The version of this event model. Specifying a version other than 1
  // will result in version-specific validation checks by the Metering service.
  //
  // Version notes:
  //  3: a. Introduces NaafHeartbeat for accepting usage
  //     heartbeats for Nifi As A Function. Also, introduces
  //     MeteredResourceMetadataLite which will be used by
  //     NaafHeartbeat.
  //     b. Introduces AdditionalMetadata which is to be used for capturing
  //     metadata for resource differentiation during billing.
  //     c. Introduces StorageHeartbeat for accepting storage usage heartbeats.
  //  2: a. workloadCrn in the MeteringEvent object is deprecated. This field
  //     is not used and is not needed.
  //     b. clusterCrn in the ClusterInstanceHeartbeat object is deprecated.
  //     The ClusterInstanceHeartbeat.meteredResourceMetadata field/object should be
  //     populated instead.
  //     c. clusterCrn in the UserGauge object is deprecated. the
  //     UserGauge.meteredResourceMetadata field/object should be populated instead.
  //     d. Introduces ServiceConfiguration for specifying non-standard deployment
  //     configuration.
  //     e. Introduces ComputeResourceHeartbeat for accepting usage heartbeats for
  //     compute resources.
  //  1: initial version
  //
  int32 version = 3;
  //
  // Service Information.
  //  - Each event must be attributed to a service.
  //  - Each service has a version.
  //  - A service may specify a service configuration.
  //  - Each event is attributed to a particular deployment of a
  //    service/app/workload.
  //
  ServiceType.Value serviceType = 4;
  //
  // The product version is expected to be a string following the convention
  // described here: https://semver.org/
  //
  // e.g.: 0.9.7
  //     1.0.0
  //
  string serviceVersion = 5;
  //
  // The service configurations. Any non-standard deployment configuration
  // which may result in a different rate should be identified in the service
  // configuration.
  //
  ServiceConfiguration serviceConfiguration = 9;
  //
  // The workload CRN. (deprecated in version 2)
  //
  // USAGE NOTES:
  // - This field is deprecated. If present it will be ignored by the Metering
  //   service. It will be removed in a future version.
  //
  string workloadCrn = 6;
  //
  // The event payload
  //
  oneof payload {
    ClusterInstanceHeartbeat clusterInstanceHeartbeat = 7;
    User user = 8;
    ComputeResourceHeartbeat computeResourceHeartbeat = 10;
    NaafHeartbeat naafHeartbeat = 11;
    StorageHeartbeat storageHeartbeat = 12;
  }
}

//
// A list of MeteringEvent objects.
//
message MeteringEvents {
  repeated MeteringEvent events = 1;
}

//
// A heartbeat event for one or more instances in a cluster. Heartbeat events
// may originate from any system that can authoritatively say the instance
// is healthy.
//
// REPORTING INTERVAL: At least once a minute and no less than every 5 minutes.
// USAGE NOTES:        See clusterCrn, instances, and meteredResourceMetadata fields
//
message ClusterInstanceHeartbeat {
  //
  // The cluster CRN (deprecated in version 2)
  //
  // USAGE NOTES:
  // - This field is deprecated. The meteredResourceMetadata field/object should be
  //   populated instead.
  // - CDP Control Plane apps using version 1 of the event model are expected
  //   to provide an RPC service for collecting cluster/environment related
  //   information (i.e. data enrichment) based on this CRN. For more
  //   information see the CDP Metering Technical Specification ([1]) referenced
  //   above.
  // - CDP Control Plane apps using version 2 of the event model should populate
  //   the meteredResourceMetadata field/object instead of this field; this field can be
  //   ignored.
  //
  string clusterCrn = 1;
  //
  // List of instances that this heartbeat is being submitted for.
  //
  // USAGE NOTES:
  // - If there are no instances, the event will be dropped.
  // - If any of the instances do not contain the required data, the event
  //   associated with that particular instance will be dropped.
  //
  repeated Instance instances = 2;
  //
  // MeteredResourceMetadata for this ClusterInstanceHeartbeat (added in version 2).
  // This is the Cloudera resource being metered.
  //
  // USAGE NOTES:
  // - CDP Control Plane apps using version 2 of the event model must fully
  //   populate the meteredResourceMetadata field/object.
  //
  MeteredResourceMetadata meteredResourceMetadata = 3;
}

//
// A heartbeat event for one or more compute resources. Heartbeat events
// may originate from any system that can authoritatively say the compute
// resource is healthy.
//
// REPORTING INTERVAL: Every 1 minute.
// USAGE NOTES:        See computeResources and meteredResourceMetadata fields
//
message ComputeResourceHeartbeat {
  //
  // List of compute resources that this heartbeat is being submitted for.
  //
  // USAGE NOTES:
  // - If there are no compute resources (i.e. empty list), the event will be
  //   dropped.
  // - If any of the compute resource objects do not contain the required data,
  //   no event will be persisted for that particular compute resource.
  //
  repeated ComputeResource computeResources = 1;
  //
  // MeteredResourceMetadata for this ComputeResourceHeartbeat (added in version 2).
  // This is the resource being metered.
  //
  // USAGE NOTES:
  // - This object must be present and fully populated.
  // - If any of the required fields of the MeteredResourceMetadata object are not
  //   provided, the event will not be persisted.
  //
  MeteredResourceMetadata meteredResourceMetadata = 2;
}

//
// A gauge of current users. The use case is to report all known users at each
// event.
//
// REPORTING INTERVAL:     Every 30 minutes
// USAGE NOTES:            See clusterCrn, userId, and meteredResourceMetadata fields
//
message User {
  //
  // The cluster CRN. (deprecated in version 2)
  //
  // USAGE NOTES:
  // - This field is deprecated. The meteredResourceMetadata field/object should be
  //   populated instead.
  // - CDP Control Plane apps using version 1 of the event model are expected
  //   to provide an RPC service for collecting cluster/environment related
  //   information (i.e. data enrichment) based on this CRN. For more
  //   information see the CDP Metering Technical Specification ([1]) referenced
  //   above.
  // - CDP Control Plane apps using version 2 of the event model should populate
  //   the meteredResourceMetadata field/object instead of this field; this field can be
  //   ignored.
  //
  string clusterCrn = 1;
  //
  // The userIds to report.
  //
  // USAGE NOTES:
  // - If no userId values are provided, the event is still persisted.
  // - Empty userId values are not allowed.
  //
  repeated string userId = 2;
  //
  // MeteredResourceMetadata for this UserGauge (added in version 2). This is the
  // resource being metered.
  //
  // USAGE NOTES:
  // - CDP Control Plane apps using version 2 of the event model must fully
  //   populate the meteredResourceMetadata field/object.
  //
  MeteredResourceMetadata meteredResourceMetadata = 3;
}

//
// A heartbeat event for one or more NaaF invocations.
// These heartbeats originate from the Nifi As A Service Pre Aggregation
// Metering service within the control plane. This service is responsible
// for correctly identifying and aggregating individual heartbeats from the
// function invocation.
//
// REPORTING INTERVAL: Every 1 hour.
// USAGE NOTES:        See naafInvocations and meteredResourceMetadataLite fields
//
message NaafHeartbeat {
  //
  // List of NaaF invocations that this heartbeat is being submitted for.
  //
  // USAGE NOTES:
  // - If there are no NaaF invocations (i.e. empty list), the event will be
  //   dropped.
  // - If any of the NaaF invocation objects do not contain the required data,
  //   no event will be persisted for that particular NaaF invocation.
  //
  repeated NaafInvocation naafInvocations = 1;
  //
  // MeteredResourceMetadataLite for this NaafHeartbeat (added in
  // version 3). This is the resource being metered.
  //
  // USAGE NOTES:
  // - This object must be present and fully populated.
  // - If any of the required fields of the MeteredResourceMetadataLite object
  //   are not provided, the event will not be persisted.
  //
  MeteredResourceMetadataLite meteredResourceMetadata = 2;
}

//
// A heartbeat event for storage usages. Heartbeat events may originate from
// CDP experiences where storage needs to be metered.
//
// REPORTING INTERVAL: Every 30 minutes.
//
message StorageHeartbeat {
  //
  // The actual storage usages.
  //
  repeated Storage storages = 1;
  //
  // MeteredResourceMetadata for this storage usage.
  //
  // USAGE NOTES:
  // - For Object Store (S3, etc) heartbeats:
  //   The environmentCrn field is required.
  // - For FileSystem storage (EFS, etc) heartbeats:
  //   All fields are required. The crn field must be a cluster CRN.
  // - For Low Latency storage (EBS, etc) heartbeats:
  //   All fields are required. The crn field must be a cluster CRN.
  //
  MeteredResourceMetadata meteredResourceMetadata = 2;
}

//
// Information about storage usage.
//
message Storage {
  //
  // The storage type
  //
  StorageType.Value type = 1;
  //
  // The storage identifier.
  //
  string id = 2;
  //
  // The storage size in Megabytes.
  //
  double sizeInMB = 3;
  //
  // The optional description of the storage.
  //
  string description = 4;
}

//
// The storage types.
//
message StorageType {
  enum Value {
    // A value indicating the enum is unset.
    UNSET = 0;
    // AWS S3
    S3 = 1;
    // AWS EFS
    EFS = 2;
    // AWS EBS
    EBS = 3;
  }
}

//
// Information about additional metadata for a Metered Resource.
//
// USAGE NOTES:            See hostGroup, and template fields
//
message AdditionalMetadata {
  //
  // Every provisioned resource has an assigned group like
  //  - worker
  //  - gateway
  //  - leader, etc
  //
  // USAGE NOTES:
  // - If no hostGroup is provided, the event will still be processed.
  //
  string hostGroup = 1;
}

//
// Information about an instance.
//
// USAGE NOTES:            See id, type, and ipAddress, additionalMetadata fields
//
message Instance {
  //
  // A unique identifier.
  //  - on AWS EC2, it might be: i-0123456789..
  //  - on Azure, it might be: 13f56399-bd52-4150-9748-7190aae1ff21
  //  - on-prem, it could be an application-derived id, as long as it
  //    is consistent for the node in-between application restarts.
  //
  // USAGE NOTES:
  // - If no id is provided, the event will be dropped.
  //
  string id = 1;
  //
  // Type
  //  - on AWS EC2, it might be: m5.4xlarge
  //  - on Azure, it might be STANDARD_D1
  //
  // USAGE NOTES:
  // - If no type is provided, the event will be dropped.
  //
  string type = 2;
  //
  // Network address
  // It is not particularly important if it is a public or private IP, but
  // it should not flip-flop back and forth between successive heartbeats --
  // it should always be the publicIp or always be the privateIp for the
  // life of an instance.
  //
  // USAGE NOTES:
  // - If no ipAddress is provided, the event will be dropped.
  //
  string ipAddress = 3;
  //
  // Additional Metadata
  // If we need to capture metadata for the aggregation algorithm for
  // differentiation during billing like hostGroup.
  //
  // USAGE NOTES:
  // - Optional, if no additionalMetadata is provided, the event will still be
  // processed.
  //
  AdditionalMetadata additionalMetadata = 4;
}

//
// Information about a compute resource.
//
// USAGE NOTES:            See id, numCores, and gbMem fields
//
message ComputeResource {
  //
  // A unique identifier.
  //  - This could be the container id.
  //  - This could be an application-derived id, as long as it is
  //    unique across all ComputeResources reported for the Service.
  //
  // USAGE NOTES:
  // - If no id is provided, the event will be dropped.
  //
  string id = 1;
  //
  // The number of vCores assigned to the compute resource. This may not be a
  // whole number. Please note, the relation between vCores and cores is 2:1.
  //
  // USAGE NOTES:
  // - If the value is <= 0, the event will be dropped
  //
  double numCores = 2;
  //
  // The amount of memory assigned to the compute resource.
  //
  // USAGE NOTES:
  // - If the value is 0, the event will be dropped
  //
  double gbMem = 3;
}

//
// Information about a Nifi as a Function invocation.
//
// USAGE NOTES:
// - See id, count, billedInvocations, start and end timestamps fields
//
message NaafInvocation {
  //
  // A unique identifier.
  //  - This could be an application-derived id, as long as it is
  //    unique across all NaaF invocations reported for the Service.
  //
  // USAGE NOTES:
  // - If no id is provided, the event will be dropped.
  //
  string id = 1;
  //
  // The raw number of nifi function invocations.
  //
  // USAGE NOTES:
  // - If the value is 0, the event will be dropped.
  //
  int32 count = 2;
  //
  // The number of nifi function invocations per second, calculated using the
  // following by NaaF Metering Pre Aggregation service for each invocation:
  //   ceiling(invocation-duration-milliseconds / 1000)
  //
  // This results in a billedInvocation of 1 or more for each invocation.
  // As a result, billedInvocations should always be >= count.
  // For example, if there are 8 invocations, each 100 milliseconds, the heartbeat
  // would indicate count = 8, billedInvocations = 8.
  // If there is 1 invocation that takes 1002 milliseconds, the heartbeat would
  // indicate count = 1, billedInvocations = 2.
  //
  // USAGE NOTES:
  // - If the value is 0, the event will be dropped.
  // - If the value is less than count, the event will be dropped.
  //
  int32 billedInvocations = 3;
  //
  // The event start timestamp in ms from the epoch of 1970-01-01T00:00:00Z.
  // Note that epoch time is in UTC.
  //
  // USAGE NOTES:
  // - If the end timestamp is less than the start timestamp, the event will
  // be dropped.
  //
  uint64 startTimestamp = 4;
  //
  // The event end timestamp in ms from the epoch of 1970-01-01T00:00:00Z.
  // Note that epoch time is in UTC.
  //
  // USAGE NOTES:
  // - If the end timestamp is less than the start timestamp, the event will
  // be dropped.
  //
  uint64 endTimestamp = 5;
}

//
// Resource metadata that is needed to materialize billing line items from
// metering events (added in version 2). This metadata refers to the Cloudera
// resource being metered.
//
message MeteredResourceMetadata {
  //
  // The resource CRN.
  //
  string crn = 1;
  //
  // The friendly name.
  //
  string name = 2;
  //
  // The CRN of the user that created the resource.
  //
  string creatorCrn = 3;
  //
  // The CRN of the CDP environment the resource is part of.
  //
  string environmentCrn = 4;
}

//
// The lite version of the Resource metadata that is needed to materialize
// billing line items from metering events (added in version 3). This metadata
// refers to the Cloudera resource being metered.
//
// The difference between MeteredResourceMetadata and MeteredResourceMetadataLite
// is that, we no longer require creator or the environment crn. We instead
// require platform value to be provided.
//
message MeteredResourceMetadataLite {
  //
  // The resource CRN.
  //
  string crn = 1;
  //
  // The friendly name.
  //
  string name = 2;
  //
  // The platform where the Metered Resource is executed.
  //
  Platform.Value platform = 3;
}