syntax = "proto3";

package workloadiam;

option java_package = "com.cloudera.thunderhead.service.workloadiam";
option java_outer_classname = "WorkloadIamProto";

import "version.proto";
import "nullable.proto";

// For future compatibility, all rpcs must take a request and return a response
// even if there is initially no content for these messages.
service WorkloadIam {

  // Get the service version.
  rpc GetVersion (version.VersionRequest)
    returns (version.VersionResponse) {}

  // Creates a new sync event. A sync event indicates that a state change is about to be made in
  // the control plane (usually in UMS). This service will persist the event and will asynchronously
  // sync the changes into the customer environment. In order to give time for the control plane
  // changes to go through before attempting a sync, a processing delay is included in the sync
  // event. To allow processing an event earlier, the CommitSyncEvent rpc should be called.
  rpc CreateSyncEvent (CreateSyncEventRequest)
    returns (CreateSyncEventResponse) {}

  // Update an existing sync event to indicate that it's ready for processing.
  rpc CommitSyncEvent (CommitSyncEventRequest)
    returns (CommitSyncEventResponse) {}

  // Get the sync event state for an environment.
  rpc GetAutomatedSyncEnvironmentStatus (GetAutomatedSyncEnvironmentStatusRequest)
    returns (GetAutomatedSyncEnvironmentStatusResponse) {}

  // Get the status of a sync event.
  rpc GetSyncEventStatus (GetSyncEventStatusRequest)
      returns (GetSyncEventStatusResponse) {}

  // Request a manual usersync. Specifying multiple environments is supported
  // for backwards compatibility of the environments2 API service. Internal services
  // and new use cases should not use this RPC. Deprecated.
  rpc LegacySyncUsers (LegacySyncUsersRequest)
      returns (LegacySyncUsersResponse) {}

  // Get the status of a LegacySyncUsers request. This RPC is for supporting
  // backwards compatibility of the environments2 API service. Internal services
  // and new use cases should not use this RPC. Deprecated.
  rpc LegacyGetSyncUsersStatus (LegacyGetSyncUsersStatusRequest)
      returns (LegacyGetSyncUsersStatusResponse) {}

  // Request a manual usersync. Specifying exactly one environment is required.
  rpc SyncUsers (SyncUsersRequest)
      returns (SyncUsersResponse) {}

  // Get the status of a SyncUsers request.
  rpc GetSyncUsersStatus (GetSyncUsersStatusRequest)
      returns (GetSyncUsersStatusResponse) {}
}

message CreateSyncEventRequest {
  // The account id affected by the event.
  string accountId = 1;
  // An optional description of the event for documentation and logging purpose.
  string description = 2;
  // This indicates the amount of time (in milliseconds) until the event is ready for processing.
  int32 commitDelayMs = 3;
  // This indicates that the event can be processed immediately. The commitDelayMs should be set
  // to 0 when this is flag is set.
  bool commitImmediately = 8;
  // The sync event which can be of different types.
  oneof syncEvent {
    // An event that indicates that full sync should be triggered for the
    // environments within the account.
    FullSyncRequestEvent fullSyncRequestEvent = 4;
    // An event that indicates that the state of an actor has changed.
    ActorUpdateEvent actorUpdateEvent = 5;
    // An event that indicates that a group has been created or deleted.
    GroupUpdateEvent groupUpdateEvent = 6;
    // An event that indicates that the cloud identity has been updated for a service principal.
    ServicePrincipalUpdateEvent servicePrincipalUpdateEvent = 7;
  }
}

message CreateSyncEventResponse {
  // The id of the newly added event.
  int64 eventId = 1;
  // The crn of the newly added event.
  string eventCrn = 2;
}

message FullSyncRequestEvent {
  // An optional environment crn. All environments will be synced in the account if unspecified.
  string environmentCrn = 1;
}

message ActorUpdateEvent {
  // The crn of the updated actor.
  string actorCrn = 1;
  // Whether the update involved deletion of the actor.
  bool actorDeleted = 2;
}

message GroupUpdateEvent {
  // The crn of the updated group.
  string groupCrn = 1;
}

message ServicePrincipalUpdateEvent {
}

message CommitSyncEventRequest {
  // The id of the event.
  int64 eventId = 1;
}

message CommitSyncEventResponse {
}

message LastAutomatedSyncDetails {
  // The Unix timestamp, in milliseconds (UTC), when the sync was executed.
  int64 timestamp = 1;
  // Status of the last sync executed.
  enum LastAutomatedSyncStatus {
    UNKNOWN = 0;
    SUCCESS = 1;
    FAILED = 2;
  }
  LastAutomatedSyncStatus status = 2;
  // Status Message for the last sync executed.
  string statusMessage = 3;
}

message GetAutomatedSyncEnvironmentStatusRequest {
  // The environment crn.
  string environmentCrn = 1;
}

message GetAutomatedSyncEnvironmentStatusResponse {
  enum SyncPendingState {
    UNKNOWN = 0;
    SYNC_PENDING = 1;
    SYNCED = 2;
    SYNC_HALTED = 3;
    QUARANTINED = 4;
  }
  // The state to indicate whether a sync is pending.
  SyncPendingState syncPendingState = 1;
  // Details of the last sync processed for the environment.
  LastAutomatedSyncDetails lastAutomatedSyncDetails = 2;
}

message GetSyncEventStatusRequest {
  string eventCrn = 1;
}

message GetSyncEventStatusResponse {
  string eventCrn = 1;
  // The state of the sync event
  enum SyncEventState {
    UNKNOWN = 0;
    CREATED = 1;
    COMMITTED = 2;
    ACCEPTED = 3;
    COMPLETED = 4;
  }
  SyncEventState syncEventState = 2;
  // The creation date in ms from the Java epoch of 1970-01-01T00:00:00Z.
  uint64 creationDate = 3;
  // The environment states associated with the event.
  repeated EventEnvironmentState eventEnvironmentState = 4;
}

message EventEnvironmentState {
  // The crn of the environment.
  string environmentCrn = 1;
  // The details about the environment completion. This will be unset if the sync hasn't
  // completed for the environment.
  CompletionDetails completionDetails = 2;
}

message CompletionDetails {
  enum Reason {
    UNKNOWN = 0;
    SYNC_SUCCESSFUL = 1;
    SUBSUMED = 2;
    ENVIRONMENT_DELETED = 3;
    ENVIRONMENT_NOT_ENTITLED = 4;
  }
  // The completion reason
  Reason reason = 1;
}

message LegacySyncUsersRequest {
  // The account id for the usersync.
  string accountId = 1;
  // The environments to sync. All environments in the account will be synced if
  // this field is omitted. Multiple environments are supported for backwards
  // compatibility of the environments2 API service. Internal services should
  // use the SyncUsers and GetSyncUsersStatus endpoints instead.
  repeated string environmentCrn = 2;
  // The actors to sync. All actors in the account will be synced if this field
  // is omitted.
  repeated string actorCrn = 3;
}

message LegacySyncUsersResponse {
  // Status of usersync.
  LegacyUsersyncStatus status = 1;
}

message LegacyUsersyncStatus {
  // A CRN for the requested usersync
  string usersyncCrn = 1;
  // A string indicating the status of the usersync.
  // Allowed values are:
  // REQUESTED - Usersync has been requested but has not started RUNNING or been REJECTED yet.
  // RUNNING - Usersync is running.
  // COMPLETED - Usersync completed. There may be warnings in the EnvironmentDetails.
  // FAILED - An unrecoverable error occurred during usersync.
  // REJECTED - Usersync has been rejected and will not be run.
  // TIMEDOUT - Usersync has timed out and has not completed.
  string status = 2;
  // Start timestamp.
  int64 startTimestamp = 3;
  // End timestamp.
  int64 endTimestamp = 4;
  // Error message if the overall usersync FAILED or REJECTED.
  string error = 5;
  // Details for each environment.
  repeated LegacyEnvironmentSyncDetails environmentDetails = 6;
}

message LegacyEnvironmentSyncDetails {
  // The environment CRN.
  string environmentCrn = 1;
  // The status of the environment usersync. Allowed values are SUCCESS, FAILURE.
  string status = 2;
  // A message about usersync for this environment.
  string message = 3;
  // Additional details about the usersync for this environment.
  repeated LegacyEnvironmentSyncAdditionalDetail additionalDetails = 4;
}

message LegacyEnvironmentSyncAdditionalDetail {
  // The subject of the additional detail.
  string subject = 1;
  // The value(s) of the additional detail.
  repeated string value = 2;
}

message LegacyGetSyncUsersStatusRequest {
  // The usersync CRN.
  string usersyncCrn = 1;
}

message LegacyGetSyncUsersStatusResponse {
  // Status of usersync.
  LegacyUsersyncStatus status = 1;
}

message SyncUsersRequest {
  // The account id affected by the event.
  string accountId = 1;
  // The environment to sync.
  string environmentCrn = 2;
  // The actors to sync. All actors in the account will be synced if this field
  // is omitted.
  repeated string actorCrn = 3;
}

message SyncUsersResponse {
  // The environment CRN.
  string environmentCrn = 1;
  // A CRN for the requested usersync
  string usersyncCrn = 2;
}

message GetSyncUsersStatusRequest {
  // The environment CRN.
  string environmentCrn = 1;
  // The usersync CRN.
  string usersyncCrn = 2;
}

message GetSyncUsersStatusResponse {
  // The environment CRN.
  string environmentCrn = 1;
  // The usersync CRN.
  string usersyncCrn = 2;
  // Start timestamp.
  int64 startTimestamp = 3;
  // End timestamp.
  int64 endTimestamp = 4;

  // Status of usersync.
  oneof status {
    RunningStatus running = 5;
    CompletedStatus completed = 6;
    FailedStatus failed = 7;
  }
}

message RunningStatus {
  // Details TBD
}

message CompletedStatus {
  // Details TBD
}

message FailedStatus {
  // Details TBD
}
