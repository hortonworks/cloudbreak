import org.ajoberstar.grgit.Grgit

buildscript {
  repositories {
    mavenLocal()
    maven { url = "$repoUrl" }
    maven { url = "$springRepoUrl" }
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootRun {
  systemProperty 'spring.profiles.active', System.properties['spring.profiles.active']
  systemProperty 'spring.config.location', System.properties['spring.config.location']
  systemProperty 'spring.config.additional-location', System.properties['spring.config.additional-location']
  if (project.hasProperty('jvmArgs')) {
    jvmArgs += project.jvmArgs.split("\\s+").toList()
  }
}

springBoot {
  mainClassName = 'com.sequenceiq.it.IntegrationTestApp'
}

bootJar {
  baseName = 'cloudbreak-integration-test'
  archiveName = 'cloudbreak-integration-test.jar'
  manifest {
    def grgit = Grgit.open(currentDir: project.projectDir)
    attributes "Implementation-Version": grgit.describe()
  }
}

uploadBootArchives {
  repositories {
    mavenDeployer {
      configuration = configurations.deployerJars
      repository(url: "$System.env.NEXUS_URL") {
        authentication(userName: "$System.env.NEXUS_USER", password: "$System.env.NEXUS_PASSWORD")
      }
    }
  }
}

task runMockServer(type:JavaExec) {
  main = 'com.sequenceiq.it.spark.MockSparkServer'
  classpath = sourceSets.main.runtimeClasspath
  systemProperty "MOCK_SERVER_ADDRESS", System.getProperty("MOCK_SERVER_ADDRESS")
}

dependencies {
  compile project(':cloud-common')
  compile project(':core-api')
  compile (project(':orchestrator-api')) {
    transitive = false;
  }
  compile (project(':orchestrator-salt')) {
    transitive = false;
  }
  compile (project(':cloud-api')) {
    transitive = false;
  }
  compile (project(':autoscale-api')) {
    transitive = false;
  }
  compile (project(':freeipa-api')) {
    transitive = false;
  }
  compile (project(':freeipa-client')) {
    transitive = false;
  }
  compile (project(':environment-api')) {
    transitive = false;
  }
  compile (project(':authorization-common-api')) {
    transitive = false;
  }
  compile (project(':datalake-api')) {
    transitive = false;
  }
  compile (project(':redbeams-api')) {
    transitive = false;
  }
  compile (project(':audit-connector')) {
    transitive = false;
  }

  compile group: 'xerces',              name: 'xercesImpl',            version: xerces

  compile (group: 'com.amazonaws',                name: 'aws-java-sdk',                   version: awsSdkVersion) {
    exclude group: 'commons-logging'
  }

  compile group: 'org.kohsuke', name: 'wordnet-random-name', version: '1.3'
  compile group: 'com.google.code.gson',          name: 'gson',                           version: '2.6.2'
  compile (group: 'com.microsoft.azure',          name: 'azure',                          version: azureSdkVersion) { exclude group: 'org.slf4j' }
  compile group:  'com.google.apis',              name: 'google-api-services-compute',    version: 'v1-rev133-1.22.0'
  compile group: 'com.google.apis',               name: 'google-api-services-storage',    version: 'v1-rev94-1.22.0'
  compile group: 'com.microsoft.azure',           name: 'azure-storage',                  version: azureStorageSdkVersion
  compile group: 'com.microsoft.azure',           name: 'azure-data-lake-store-sdk',      version: '2.1.5'
  compile group:  'org.springframework.boot',     name: 'spring-boot-starter',            version: springBootVersion
  compile group:  'org.springframework.boot',     name: 'spring-boot-starter-test',       version: springBootVersion
  compile group:  'org.springframework.boot',     name: 'spring-boot-starter-web',        version: springBootVersion
  compile group:  'org.springframework',          name: 'spring-context-support',         version: springFrameworkVersion
  compile group:  'org.apache.velocity',          name: 'velocity',                       version: '1.7'
  compile group:  'org.testng',                   name: 'testng',                         version: testNgVersion
  compile group:  'javax.el',                     name: 'javax.el-api',                   version: '3.0.0'
  compile group:  'org.apache.commons',           name: 'commons-lang3',                  version: '3.4'
  compile group:  'org.opentest4j',               name: 'opentest4j',                     version: '1.2.0'
  compile group: 'org.pacesys.openstack4j.connectors', name: 'openstack4j-jersey2',       version: '3.1.0-jersey26_v4fix'
  compile(group:  'org.apache.sshd',              name: 'sshd-core',                      version: '1.2.0') {
    exclude group: 'ch.qos.logback'
  }
  compile group: 'com.sparkjava',                 name: 'spark-core',                     version: '2.9.1'

  compile ("org.uncommons:reportng:1.1.4") {
    exclude group: "velocity"
  }
  compile group: 'com.google.code.findbugs',      name: 'annotations',                    version: '3.0.1'
  compile (group: 'com.cloudera.api.swagger',           name: 'cloudera-manager-api-swagger',version: cmClientVersion) {
    transitive = false
  }
  compile (group: 'com.hierynomus',                name: 'sshj',                           version: '0.27.0') {
    exclude group: "net.i2p.crypto"
  }
  testCompile group: 'org.reflections',           name: 'reflections',                    version:  '0.9.11'
  runtime group: 'com.google.inject',             name: 'guice',                          version: '3.0'
  runtime group: 'javax.xml.bind',                name: 'jaxb-api', version: '2.3.0'
}

test {
  useTestNG()
}
