package com.sequenceiq.cloudbreak.shell.commands.common;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.shell.core.CommandMarker;
import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
import org.springframework.shell.core.annotation.CliCommand;
import org.springframework.shell.core.annotation.CliOption;

import com.sequenceiq.cloudbreak.api.model.FlexSubscriptionRequest;
import com.sequenceiq.cloudbreak.api.model.FlexSubscriptionResponse;
import com.sequenceiq.cloudbreak.shell.model.OutPutType;
import com.sequenceiq.cloudbreak.shell.model.ShellContext;

public class FlexSubscriptionCommands implements CommandMarker {

    private ShellContext shellContext;

    public FlexSubscriptionCommands(ShellContext shellContext) {
        this.shellContext = shellContext;
    }

    @CliAvailabilityIndicator("flex register")
    public boolean registerAvailable() {
        try {
            return shellContext.getSmartSenseSubscription() != null && !shellContext.getSmartSenseSubscription().isAutoGenerated();
        } catch (Exception ex) {
            return false;
        }
    }

    @CliCommand(value = "flex register", help = "Register a Flex subscription")
    public String register(
            @CliOption(key = "name", mandatory = true) String name,
            @CliOption(key = "subscriptionId", mandatory = true) String subscriptionId,
            @CliOption(key = "publicInAccount", help = "Flags if the blueprint is public in the account",
                    unspecifiedDefaultValue = "false", specifiedDefaultValue = "true") boolean publicInAccount) {
        FlexSubscriptionRequest request = new FlexSubscriptionRequest();
        request.setName(name);
        request.setSubscriptionId(subscriptionId);
        request.setSmartSenseSubscriptionId(shellContext.getSmartSenseSubscription().getId());
        try {
            Long id;
            if (publicInAccount) {
                id = shellContext.cloudbreakClient().flexSubscriptionEndpoint().postPublic(request).getId();
            } else {
                id = shellContext.cloudbreakClient().flexSubscriptionEndpoint().postPrivate(request).getId();
            }
            return String.format("Flex subscription registered with id: '%d'", id);
        } catch (RuntimeException e) {
            throw shellContext.exceptionTransformer().transformToRuntimeException(e);
        }
    }

    @CliAvailabilityIndicator({"flex set-default --id", "flex set-default --name"})
    public boolean setDefaultAvailable() {
        return true;
    }

    @CliCommand(value = "flex set-default --id", help = "Sets the default Flex subscription by id")
    public String setDefault(@CliOption(key = "", mandatory = true) Long id) {
        return setDefault(id, null);
    }

    @CliCommand(value = "flex set-default --name", help = "Sets the default Flex subscription by name")
    public String setDefault(@CliOption(key = "", mandatory = true) String name) {
        return setDefault(null, name);
    }

    @CliAvailabilityIndicator({"flex use-for-controller --id", "flex use-for-controller --name"})
    public boolean useForControllerAvailable() {
        return true;
    }

    @CliCommand(value = "flex use-for-controller --id", help = "Sets the Flex subscription for controller node by id")
    public String useForController(@CliOption(key = "", mandatory = true) Long id) {
        return usedForController(id, null);
    }

    @CliCommand(value = "flex use-for-controller --name", help = "Sets the Flex subscription for controller node by name")
    public String useForController(@CliOption(key = "", mandatory = true) String name) {
        return usedForController(null, name);
    }

    @CliAvailabilityIndicator("flex list")
    public boolean listAvailable() {
        return true;
    }

    @CliCommand(value = "flex list", help = "Shows the currently available Flex subscriptions")
    public String list() {
        try {
            List<FlexSubscriptionResponse> publics = shellContext.cloudbreakClient().flexSubscriptionEndpoint().getPublics();
            return shellContext.outputTransformer().render(shellContext.responseTransformer().transformToMap(publics, "id", "name"), "ID", "INFO");
        } catch (Exception ex) {
            throw shellContext.exceptionTransformer().transformToRuntimeException(ex);
        }
    }

    @CliAvailabilityIndicator({"flex delete --id", "flex delete --name"})
    public boolean deleteAvailable() {
        return true;
    }

    private String delete(Long id, String name) {
        try {
            if (id != null) {
                shellContext.cloudbreakClient().flexSubscriptionEndpoint().delete(id);
                return String.format("Flex subscription deleted with id: %s", id);
            } else if (name != null) {
                shellContext.cloudbreakClient().flexSubscriptionEndpoint().deletePrivate(name);
                return String.format("Flex subscription deleted with name: %s", name);
            }
            throw shellContext.exceptionTransformer().transformToRuntimeException("Id or subscription id not specified");
        } catch (Exception ex) {
            throw shellContext.exceptionTransformer().transformToRuntimeException(ex);
        }
    }

    @CliCommand(value = "flex delete --id", help = "Deletes Flex subscription by its id")
    public String deleteById(@CliOption(key = "", mandatory = true) Long id) {
        return delete(id, null);
    }

    @CliCommand(value = "flex delete --name", help = "Deletes Flex subscription by its name")
    public String deleteByName(@CliOption(key = "", mandatory = true) String name) {
        return delete(null, name);
    }

    @CliAvailabilityIndicator({"flex show --id", "flex show --name"})
    public boolean showAvailable() {
        return true;
    }

    private String show(Long id, String name, OutPutType outPutType) {
        try {
            FlexSubscriptionResponse flexSubscriptionResponse;
            if (id != null) {
                flexSubscriptionResponse = shellContext.cloudbreakClient().flexSubscriptionEndpoint().get(id);
            } else if (name != null) {
                flexSubscriptionResponse = shellContext.cloudbreakClient().flexSubscriptionEndpoint().getPublic(name);
            } else {
                throw shellContext.exceptionTransformer().transformToRuntimeException("Id or subscription id not specified");
            }

            Map<String, String> map = new HashMap<>();
            map.put("id", flexSubscriptionResponse.getId().toString());
            map.put("name", flexSubscriptionResponse.getName());
            map.put("subscriptionId", flexSubscriptionResponse.getSubscriptionId());
            map.put("smartSenseSubscription", flexSubscriptionResponse.getSmartSenseSubscription().getSubscriptionId());
            map.put("isDefault", Boolean.toString(flexSubscriptionResponse.isDefault()));
            map.put("isUsedForController", Boolean.toString(flexSubscriptionResponse.isUsedForController()));

            return shellContext.outputTransformer().render(outPutType, map, "FIELD", "INFO");
        } catch (Exception ex) {
            throw shellContext.exceptionTransformer().transformToRuntimeException(ex);
        }
    }

    @CliCommand(value = "flex show --id", help = "Describes Flex subscription by its id")
    public String showById(@CliOption(key = "", mandatory = true) Long id,
            @CliOption(key = "outputType", help = "OutputType of the response") OutPutType outPutType) {
        return show(id, null, outPutType);
    }

    @CliCommand(value = "flex show --name", help = "Describes Flex subscription by its name")
    public String showByName(@CliOption(key = "", mandatory = true) String name,
            @CliOption(key = "outputType", help = "OutputType of the response") OutPutType outPutType) {
        return show(null, name, outPutType);
    }

    private String setDefault(Long id, String name) {
        try {
            if (id != null) {
                shellContext.cloudbreakClient().flexSubscriptionEndpoint().setDefaultInAccount(id);
                return String.format("Default Flex subscription changed to '%s'", id);
            } else if (name != null) {
                shellContext.cloudbreakClient().flexSubscriptionEndpoint().setDefaultInAccount(name);
                return String.format("Default Flex subscription changed to '%s'", name);
            }
            throw shellContext.exceptionTransformer().transformToRuntimeException("Neither the id nor the name hasn't been specified");
        } catch (RuntimeException e) {
            throw shellContext.exceptionTransformer().transformToRuntimeException(e);
        }
    }

    private String usedForController(Long id, String name) {
        try {
            if (id != null) {
                shellContext.cloudbreakClient().flexSubscriptionEndpoint().setUsedForControllerInAccount(id);
                return String.format("Flex subscription for controller changed to '%s'", id);
            } else if (name != null) {
                shellContext.cloudbreakClient().flexSubscriptionEndpoint().setUsedForControllerInAccount(name);
                return String.format("Flex subscription for controller changed to '%s'", name);
            }
            throw shellContext.exceptionTransformer().transformToRuntimeException("Neither the id nor the name hasn't been specified");
        } catch (RuntimeException e) {
            throw shellContext.exceptionTransformer().transformToRuntimeException(e);
        }
    }
}
